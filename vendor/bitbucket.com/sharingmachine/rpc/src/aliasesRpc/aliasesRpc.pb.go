// Code generated by protoc-gen-go.
// source: aliasesRpc.proto
// DO NOT EDIT!

/*
Package aliasesRpc is a generated protocol buffer package.

It is generated from these files:
	aliasesRpc.proto

It has these top-level messages:
	CreateRequest
	UpdateRequest
	RenameRequest
	RenameResponse
	PatchRequest
	PatchResponse
	UpdateResponse
	CloneRequest
	CloneResponse
	TagRequest
	TagResponse
	UnTagRequest
	UnTagResponse
	GetRequest
	ListRequest
	DeleteRequest
	DeleteResponse
	CreateAliasResponse
	AliasResponse
	TypeMatchResponse
	MatchResponse
	AliasListResponse
*/
package aliasesRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Uri         string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	FullKey     string `protobuf:"bytes,2,opt,name=fullKey" json:"fullKey,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UpdateRequest struct {
	FullKey     string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RenameRequest struct {
	FullKey    string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	NewFullKey string `protobuf:"bytes,2,opt,name=newFullKey" json:"newFullKey,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RenameResponse struct {
	Alias           *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	OriginalFullKey string         `protobuf:"bytes,2,opt,name=originalFullKey" json:"originalFullKey,omitempty"`
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RenameResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type PatchRequest struct {
	FullKey string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Target  string `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Patch   string `protobuf:"bytes,2,opt,name=patch" json:"patch,omitempty"`
}

func (m *PatchRequest) Reset()                    { *m = PatchRequest{} }
func (m *PatchRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchRequest) ProtoMessage()               {}
func (*PatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PatchResponse struct {
	Alias *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *PatchResponse) Reset()                    { *m = PatchResponse{} }
func (m *PatchResponse) String() string            { return proto.CompactTextString(m) }
func (*PatchResponse) ProtoMessage()               {}
func (*PatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PatchResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type UpdateResponse struct {
	Alias *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type CloneRequest struct {
	FullKey    string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	NewFullKey string `protobuf:"bytes,2,opt,name=newFullKey" json:"newFullKey,omitempty"`
	Username   string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *CloneRequest) Reset()                    { *m = CloneRequest{} }
func (m *CloneRequest) String() string            { return proto.CompactTextString(m) }
func (*CloneRequest) ProtoMessage()               {}
func (*CloneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type CloneResponse struct {
	Alias *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *CloneResponse) Reset()                    { *m = CloneResponse{} }
func (m *CloneResponse) String() string            { return proto.CompactTextString(m) }
func (*CloneResponse) ProtoMessage()               {}
func (*CloneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CloneResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type TagRequest struct {
	FullKey  string   `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Username string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type TagResponse struct {
	Alias *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *TagResponse) Reset()                    { *m = TagResponse{} }
func (m *TagResponse) String() string            { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()               {}
func (*TagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TagResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type UnTagRequest struct {
	FullKey  string   `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Username string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *UnTagRequest) Reset()                    { *m = UnTagRequest{} }
func (m *UnTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UnTagRequest) ProtoMessage()               {}
func (*UnTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type UnTagResponse struct {
	Alias *AliasResponse `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *UnTagResponse) Reset()                    { *m = UnTagResponse{} }
func (m *UnTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UnTagResponse) ProtoMessage()               {}
func (*UnTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnTagResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

type GetRequest struct {
	FullKey  string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListRequest struct {
	Username string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Since    int64    `protobuf:"varint,2,opt,name=since" json:"since,omitempty"`
	Size     int64    `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Tags     []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Runtimes []string `protobuf:"bytes,5,rep,name=runtimes" json:"runtimes,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type DeleteRequest struct {
	FullKey  string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type DeleteResponse struct {
	FullKey string `protobuf:"bytes,1,opt,name=fullKey" json:"fullKey,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type CreateAliasResponse struct {
	Alias     *AliasResponse     `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	TypeMatch *TypeMatchResponse `protobuf:"bytes,2,opt,name=typeMatch" json:"typeMatch,omitempty"`
}

func (m *CreateAliasResponse) Reset()                    { *m = CreateAliasResponse{} }
func (m *CreateAliasResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAliasResponse) ProtoMessage()               {}
func (*CreateAliasResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateAliasResponse) GetAlias() *AliasResponse {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CreateAliasResponse) GetTypeMatch() *TypeMatchResponse {
	if m != nil {
		return m.TypeMatch
	}
	return nil
}

type AliasResponse struct {
	SnipId            string   `protobuf:"bytes,1,opt,name=snipId" json:"snipId,omitempty"`
	FullKey           string   `protobuf:"bytes,2,opt,name=fullKey" json:"fullKey,omitempty"`
	Username          string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Key               string   `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Extension         string   `protobuf:"bytes,6,opt,name=extension" json:"extension,omitempty"`
	Snip              string   `protobuf:"bytes,7,opt,name=snip" json:"snip,omitempty"`
	SnipVersion       int64    `protobuf:"varint,8,opt,name=snipVersion" json:"snipVersion,omitempty"`
	Runtime           string   `protobuf:"bytes,9,opt,name=runtime" json:"runtime,omitempty"`
	Tags              []string `protobuf:"bytes,11,rep,name=tags" json:"tags,omitempty"`
	Created           int64    `protobuf:"varint,13,opt,name=created" json:"created,omitempty"`
	Description       string   `protobuf:"bytes,14,opt,name=description" json:"description,omitempty"`
	ForkedFromFullKey string   `protobuf:"bytes,15,opt,name=forkedFromFullKey" json:"forkedFromFullKey,omitempty"`
	ForkedFromVersion int64    `protobuf:"varint,16,opt,name=forkedFromVersion" json:"forkedFromVersion,omitempty"`
	Private           bool     `protobuf:"varint,17,opt,name=private" json:"private,omitempty"`
	CloneCount        int64    `protobuf:"varint,18,opt,name=cloneCount" json:"cloneCount,omitempty"`
	RunCount          int64    `protobuf:"varint,19,opt,name=runCount" json:"runCount,omitempty"`
}

func (m *AliasResponse) Reset()                    { *m = AliasResponse{} }
func (m *AliasResponse) String() string            { return proto.CompactTextString(m) }
func (*AliasResponse) ProtoMessage()               {}
func (*AliasResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type TypeMatchResponse struct {
	Matches []*MatchResponse `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *TypeMatchResponse) Reset()                    { *m = TypeMatchResponse{} }
func (m *TypeMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeMatchResponse) ProtoMessage()               {}
func (*TypeMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TypeMatchResponse) GetMatches() []*MatchResponse {
	if m != nil {
		return m.Matches
	}
	return nil
}

type MatchResponse struct {
	Media     string `protobuf:"bytes,1,opt,name=media" json:"media,omitempty"`
	Runtime   string `protobuf:"bytes,2,opt,name=runtime" json:"runtime,omitempty"`
	Extension string `protobuf:"bytes,3,opt,name=extension" json:"extension,omitempty"`
	Score     int64  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
}

func (m *MatchResponse) Reset()                    { *m = MatchResponse{} }
func (m *MatchResponse) String() string            { return proto.CompactTextString(m) }
func (*MatchResponse) ProtoMessage()               {}
func (*MatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type AliasListResponse struct {
	Items []*AliasResponse `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total int64            `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Since int64            `protobuf:"varint,3,opt,name=since" json:"since,omitempty"`
	Size  int64            `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *AliasListResponse) Reset()                    { *m = AliasListResponse{} }
func (m *AliasListResponse) String() string            { return proto.CompactTextString(m) }
func (*AliasListResponse) ProtoMessage()               {}
func (*AliasListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AliasListResponse) GetItems() []*AliasResponse {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "aliasesRpc.CreateRequest")
	proto.RegisterType((*UpdateRequest)(nil), "aliasesRpc.UpdateRequest")
	proto.RegisterType((*RenameRequest)(nil), "aliasesRpc.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "aliasesRpc.RenameResponse")
	proto.RegisterType((*PatchRequest)(nil), "aliasesRpc.PatchRequest")
	proto.RegisterType((*PatchResponse)(nil), "aliasesRpc.PatchResponse")
	proto.RegisterType((*UpdateResponse)(nil), "aliasesRpc.UpdateResponse")
	proto.RegisterType((*CloneRequest)(nil), "aliasesRpc.CloneRequest")
	proto.RegisterType((*CloneResponse)(nil), "aliasesRpc.CloneResponse")
	proto.RegisterType((*TagRequest)(nil), "aliasesRpc.TagRequest")
	proto.RegisterType((*TagResponse)(nil), "aliasesRpc.TagResponse")
	proto.RegisterType((*UnTagRequest)(nil), "aliasesRpc.UnTagRequest")
	proto.RegisterType((*UnTagResponse)(nil), "aliasesRpc.UnTagResponse")
	proto.RegisterType((*GetRequest)(nil), "aliasesRpc.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "aliasesRpc.ListRequest")
	proto.RegisterType((*DeleteRequest)(nil), "aliasesRpc.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "aliasesRpc.DeleteResponse")
	proto.RegisterType((*CreateAliasResponse)(nil), "aliasesRpc.CreateAliasResponse")
	proto.RegisterType((*AliasResponse)(nil), "aliasesRpc.AliasResponse")
	proto.RegisterType((*TypeMatchResponse)(nil), "aliasesRpc.TypeMatchResponse")
	proto.RegisterType((*MatchResponse)(nil), "aliasesRpc.MatchResponse")
	proto.RegisterType((*AliasListResponse)(nil), "aliasesRpc.AliasListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AliasesRpc service

type AliasesRpcClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateAliasResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AliasListResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AliasListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type aliasesRpcClient struct {
	cc *grpc.ClientConn
}

func NewAliasesRpcClient(cc *grpc.ClientConn) AliasesRpcClient {
	return &aliasesRpcClient{cc}
}

func (c *aliasesRpcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateAliasResponse, error) {
	out := new(CreateAliasResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Patch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Clone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Tag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error) {
	out := new(UnTagResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/UnTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*AliasListResponse, error) {
	out := new(AliasListResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*AliasListResponse, error) {
	out := new(AliasListResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aliasesRpcClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/aliasesRpc.AliasesRpc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AliasesRpc service

type AliasesRpcServer interface {
	Create(context.Context, *CreateRequest) (*CreateAliasResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	UnTag(context.Context, *UnTagRequest) (*UnTagResponse, error)
	Get(context.Context, *GetRequest) (*AliasListResponse, error)
	List(context.Context, *ListRequest) (*AliasListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterAliasesRpcServer(s *grpc.Server, srv AliasesRpcServer) {
	s.RegisterService(&_AliasesRpc_serviceDesc, srv)
}

func _AliasesRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_UnTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).UnTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/UnTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).UnTag(ctx, req.(*UnTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AliasesRpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AliasesRpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aliasesRpc.AliasesRpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AliasesRpcServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AliasesRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aliasesRpc.AliasesRpc",
	HandlerType: (*AliasesRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AliasesRpc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AliasesRpc_Update_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _AliasesRpc_Rename_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _AliasesRpc_Patch_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _AliasesRpc_Clone_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _AliasesRpc_Tag_Handler,
		},
		{
			MethodName: "UnTag",
			Handler:    _AliasesRpc_UnTag_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AliasesRpc_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AliasesRpc_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AliasesRpc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("aliasesRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x56, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0x8f, 0xe3, 0xfc, 0x69, 0x26, 0x75, 0xae, 0xd9, 0x3b, 0x05, 0x5f, 0xc4, 0x41, 0xb4, 0x0f,
	0x28, 0x42, 0x28, 0x48, 0xbd, 0x17, 0x24, 0xa4, 0x53, 0xd3, 0x42, 0x8f, 0xaa, 0x20, 0x55, 0x56,
	0x5b, 0xf1, 0xc2, 0x83, 0x71, 0xb6, 0x61, 0x95, 0xc4, 0x36, 0xde, 0x4d, 0x4b, 0x78, 0x85, 0x2f,
	0xc1, 0xa7, 0xe3, 0xab, 0xa0, 0x5d, 0xff, 0xc9, 0x4e, 0x1c, 0x92, 0x12, 0x74, 0x4f, 0xf6, 0xfc,
	0xd9, 0xdf, 0xfc, 0x76, 0x67, 0x76, 0x66, 0xe1, 0xc4, 0x9f, 0x73, 0x5f, 0x30, 0xe1, 0xc5, 0xc1,
	0x28, 0x4e, 0x22, 0x19, 0x11, 0x58, 0x6b, 0xe8, 0x4f, 0xe0, 0x5c, 0x24, 0xcc, 0x97, 0xcc, 0x63,
	0xbf, 0x2e, 0x99, 0x90, 0xe4, 0x04, 0xec, 0x65, 0xc2, 0x5d, 0x6b, 0x60, 0x0d, 0x5b, 0x9e, 0xfa,
	0x25, 0x2e, 0x34, 0x1f, 0x96, 0xf3, 0xf9, 0x35, 0x5b, 0xb9, 0x55, 0xad, 0xcd, 0x45, 0x32, 0x80,
	0xf6, 0x84, 0x89, 0x20, 0xe1, 0xb1, 0xe4, 0x51, 0xe8, 0xda, 0xda, 0x6a, 0xaa, 0xe8, 0x35, 0x38,
	0x77, 0xf1, 0xc4, 0x80, 0x37, 0xc0, 0xac, 0x9d, 0x60, 0xd5, 0x32, 0xd8, 0x15, 0x38, 0x1e, 0x0b,
	0xfd, 0xc5, 0x33, 0xc0, 0x3e, 0x01, 0x08, 0xd9, 0xd3, 0x25, 0xa2, 0x6d, 0x68, 0xe8, 0x0c, 0x3a,
	0x39, 0x94, 0x88, 0xa3, 0x50, 0x30, 0xf2, 0x25, 0xd4, 0xf5, 0xb1, 0x68, 0xa4, 0xf6, 0xe9, 0xeb,
	0x91, 0x71, 0x6c, 0x63, 0xf5, 0x9b, 0x7b, 0x7a, 0xa9, 0x1f, 0x19, 0xc2, 0x8b, 0x28, 0xe1, 0x53,
	0x1e, 0xfa, 0x73, 0x1c, 0x67, 0x53, 0x4d, 0xef, 0xe1, 0xf8, 0xc6, 0x97, 0xc1, 0x2f, 0xfb, 0x69,
	0xf7, 0xa0, 0x21, 0xfd, 0x64, 0xca, 0x64, 0x76, 0x96, 0x99, 0x44, 0x5e, 0x41, 0x3d, 0x56, 0x08,
	0x59, 0x84, 0x54, 0xa0, 0x67, 0xe0, 0x64, 0xb8, 0x07, 0xee, 0x81, 0x8e, 0xa1, 0x93, 0xa7, 0xe7,
	0x50, 0x88, 0x09, 0x1c, 0x5f, 0xcc, 0xa3, 0xf0, 0xff, 0xe7, 0x84, 0xf4, 0xe1, 0x68, 0x29, 0x58,
	0xa2, 0xb2, 0x92, 0x6d, 0xbf, 0x90, 0xd5, 0x56, 0xb3, 0x28, 0x87, 0xf2, 0xbc, 0x07, 0xb8, 0xf5,
	0xa7, 0xfb, 0x59, 0x12, 0xa8, 0x49, 0x7f, 0x2a, 0xdc, 0xea, 0xc0, 0x1e, 0xb6, 0x3c, 0xfd, 0xbf,
	0x93, 0xd9, 0x3b, 0x68, 0x6b, 0xdc, 0x43, 0x79, 0xfd, 0x08, 0xc7, 0x77, 0xe1, 0x07, 0x61, 0x76,
	0x06, 0x4e, 0x86, 0x7c, 0x28, 0xb7, 0x73, 0x80, 0xf7, 0x4c, 0xee, 0x67, 0x66, 0xb2, 0xa8, 0x6e,
	0xb0, 0xf8, 0xc3, 0x82, 0xf6, 0xf7, 0x5c, 0x14, 0x28, 0xa6, 0xaf, 0x85, 0x7d, 0x55, 0x99, 0x0b,
	0x1e, 0x06, 0x29, 0x88, 0xed, 0xa5, 0x82, 0xda, 0xb7, 0xe0, 0xbf, 0xa7, 0xfb, 0xb3, 0x3d, 0xfd,
	0x5f, 0x9c, 0x45, 0x0d, 0x9f, 0x45, 0xb2, 0x0c, 0x25, 0x5f, 0x30, 0xe1, 0xd6, 0xb5, 0xbe, 0x90,
	0xe9, 0xb7, 0xe0, 0x7c, 0xc3, 0xe6, 0xec, 0x39, 0x7d, 0x68, 0xd7, 0x66, 0x3e, 0x87, 0x4e, 0x0e,
	0x93, 0x9d, 0xe9, 0xbf, 0xe2, 0xa8, 0x8d, 0xbf, 0x4c, 0x5b, 0x2b, 0x3a, 0xdb, 0xff, 0xde, 0x68,
	0xbe, 0x86, 0x96, 0x5c, 0xc5, 0xec, 0x87, 0xa2, 0x01, 0xb4, 0x4f, 0xdf, 0x98, 0x8b, 0x6e, 0x73,
	0x63, 0xb1, 0x70, 0xed, 0x4f, 0xff, 0xb6, 0xc1, 0xc1, 0xf1, 0x7b, 0xd0, 0x10, 0x21, 0x8f, 0xaf,
	0x26, 0x19, 0xe1, 0x4c, 0xda, 0xd1, 0xe6, 0x77, 0x14, 0x99, 0x1a, 0x17, 0x33, 0xb6, 0x72, 0x6b,
	0xe9, 0xb8, 0x98, 0xb1, 0x15, 0xf9, 0x18, 0x5a, 0xec, 0x37, 0xc9, 0x42, 0xa1, 0xba, 0x78, 0x43,
	0xeb, 0xd7, 0x0a, 0x9d, 0xcc, 0x90, 0xc7, 0x6e, 0x53, 0x1b, 0xf4, 0xbf, 0xea, 0xfc, 0xea, 0x7b,
	0xcf, 0x12, 0xbd, 0xe6, 0x48, 0xe7, 0xd9, 0x54, 0x29, 0x6e, 0x59, 0x2a, 0xdd, 0x56, 0xca, 0x2d,
	0x13, 0x8b, 0x42, 0x68, 0x1b, 0x85, 0xe0, 0x42, 0x33, 0xd0, 0x07, 0x3f, 0x71, 0x1d, 0x8d, 0x95,
	0x8b, 0x9b, 0x33, 0xa6, 0x53, 0x9a, 0x31, 0xe4, 0x0b, 0xe8, 0x3e, 0x44, 0xc9, 0x8c, 0x4d, 0x2e,
	0x93, 0x68, 0x91, 0xf7, 0xaa, 0x17, 0xda, 0xaf, 0x6c, 0xc0, 0xde, 0x39, 0xff, 0x13, 0x1d, 0xb3,
	0x6c, 0x50, 0xbc, 0xe2, 0x84, 0x3f, 0xfa, 0x92, 0xb9, 0xdd, 0x81, 0x35, 0x3c, 0xf2, 0x72, 0x51,
	0xb5, 0xc6, 0x40, 0xb5, 0xb7, 0x8b, 0x68, 0x19, 0x4a, 0x97, 0x68, 0x00, 0x43, 0x93, 0x95, 0x76,
	0x6a, 0x7d, 0xa9, 0xad, 0x85, 0x4c, 0xbf, 0x83, 0x6e, 0xa9, 0x02, 0xc8, 0x5b, 0x68, 0x2e, 0x94,
	0x82, 0xa9, 0x32, 0xb3, 0x37, 0xcb, 0x0c, 0x57, 0x4b, 0xee, 0x49, 0x05, 0x38, 0x18, 0xe5, 0x15,
	0xd4, 0x17, 0x6c, 0xc2, 0xfd, 0xac, 0x52, 0x52, 0xc1, 0x4c, 0x46, 0x15, 0x27, 0x03, 0xa5, 0xde,
	0xde, 0x4c, 0xbd, 0xba, 0xdd, 0x41, 0x94, 0x30, 0x5d, 0x2c, 0xea, 0x76, 0x2b, 0x81, 0xfe, 0x69,
	0x41, 0x57, 0x17, 0x68, 0xda, 0x24, 0xd6, 0x97, 0x84, 0x4b, 0xb6, 0xd8, 0xca, 0x7e, 0xe3, 0x92,
	0x68, 0x3f, 0x05, 0x2e, 0x23, 0xe9, 0xcf, 0xf3, 0xd6, 0xa1, 0x85, 0x75, 0x43, 0xb1, 0xb7, 0x35,
	0x94, 0xda, 0xba, 0xa1, 0x9c, 0xfe, 0x55, 0x07, 0x18, 0x17, 0x31, 0xc8, 0x25, 0x34, 0xd2, 0xbb,
	0x4b, 0x50, 0x68, 0xf4, 0x54, 0xea, 0x7f, 0x5a, 0x36, 0x21, 0x6e, 0xb4, 0x42, 0xc6, 0xd0, 0x48,
	0x07, 0x2c, 0xc6, 0x41, 0x6f, 0xa2, 0x7e, 0x7f, 0x9b, 0xc9, 0x84, 0x48, 0x9f, 0x2a, 0x18, 0x02,
	0xbd, 0x84, 0x30, 0x04, 0x7e, 0xd9, 0xd0, 0x0a, 0x79, 0x07, 0x75, 0xfd, 0x50, 0x20, 0xae, 0xe9,
	0x66, 0xbe, 0x49, 0xfa, 0xaf, 0xb7, 0x58, 0xcc, 0xf5, 0x7a, 0xfa, 0xe2, 0xf5, 0xe6, 0xd8, 0xc7,
	0xeb, 0xd1, 0xa8, 0xa6, 0x15, 0xf2, 0x15, 0xd8, 0xb7, 0xfe, 0x94, 0xf4, 0x50, 0xd7, 0x2a, 0x46,
	0x5e, 0xff, 0xa3, 0x92, 0xde, 0x8c, 0xac, 0x67, 0x18, 0x8e, 0x6c, 0x0e, 0x4c, 0x1c, 0x19, 0x0d,
	0x3c, 0xbd, 0xde, 0x7e, 0xcf, 0x24, 0x8e, 0xbc, 0x1e, 0x69, 0xfd, 0x37, 0xa5, 0xba, 0x32, 0xab,
	0x90, 0x56, 0xc8, 0x19, 0xd4, 0x94, 0x86, 0x20, 0x8a, 0xc6, 0x38, 0xdb, 0x8f, 0x30, 0x86, 0x46,
	0x3a, 0x32, 0x70, 0xfa, 0xd0, 0x34, 0xc2, 0xe9, 0xc3, 0x13, 0x86, 0x56, 0xce, 0x3f, 0x83, 0x1e,
	0x8f, 0x46, 0xb3, 0xa7, 0xd9, 0x48, 0xb0, 0xe4, 0x91, 0x07, 0x2c, 0xf7, 0x3e, 0x37, 0x4a, 0xf6,
	0xc6, 0xfa, 0xb9, 0xa1, 0x9f, 0xf7, 0x6f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x6b, 0xa5,
	0x7b, 0xf2, 0x0b, 0x00, 0x00,
}
