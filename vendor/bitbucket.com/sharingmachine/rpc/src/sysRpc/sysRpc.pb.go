// Code generated by protoc-gen-go.
// source: sysRpc.proto
// DO NOT EDIT!

/*
Package sysRpc is a generated protocol buffer package.

It is generated from these files:
	sysRpc.proto

It has these top-level messages:
	InfoRequest
	InfoResponse
	ErrorRequest
	ErrorResponse
*/
package sysRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InfoRequest struct {
	ClientVersion string `protobuf:"bytes,1,opt,name=clientVersion" json:"clientVersion,omitempty"`
}

func (m *InfoRequest) Reset()                    { *m = InfoRequest{} }
func (m *InfoRequest) String() string            { return proto.CompactTextString(m) }
func (*InfoRequest) ProtoMessage()               {}
func (*InfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *InfoRequest) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

type InfoResponse struct {
	Version         string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Build           string `protobuf:"bytes,2,opt,name=build" json:"build,omitempty"`
	ClientSupported string `protobuf:"bytes,3,opt,name=clientSupported" json:"clientSupported,omitempty"`
	Dc              string `protobuf:"bytes,4,opt,name=dc" json:"dc,omitempty"`
}

func (m *InfoResponse) Reset()                    { *m = InfoResponse{} }
func (m *InfoResponse) String() string            { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()               {}
func (*InfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *InfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *InfoResponse) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *InfoResponse) GetClientSupported() string {
	if m != nil {
		return m.ClientSupported
	}
	return ""
}

func (m *InfoResponse) GetDc() string {
	if m != nil {
		return m.Dc
	}
	return ""
}

type ErrorRequest struct {
}

func (m *ErrorRequest) Reset()                    { *m = ErrorRequest{} }
func (m *ErrorRequest) String() string            { return proto.CompactTextString(m) }
func (*ErrorRequest) ProtoMessage()               {}
func (*ErrorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ErrorResponse struct {
}

func (m *ErrorResponse) Reset()                    { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string            { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()               {}
func (*ErrorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*InfoRequest)(nil), "sysRpc.InfoRequest")
	proto.RegisterType((*InfoResponse)(nil), "sysRpc.InfoResponse")
	proto.RegisterType((*ErrorRequest)(nil), "sysRpc.ErrorRequest")
	proto.RegisterType((*ErrorResponse)(nil), "sysRpc.ErrorResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SysRpc service

type SysRpcClient interface {
	GetApiInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	TestTransportError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
	TestAppError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type sysRpcClient struct {
	cc *grpc.ClientConn
}

func NewSysRpcClient(cc *grpc.ClientConn) SysRpcClient {
	return &sysRpcClient{cc}
}

func (c *sysRpcClient) GetApiInfo(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := grpc.Invoke(ctx, "/sysRpc.SysRpc/GetApiInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRpcClient) TestTransportError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := grpc.Invoke(ctx, "/sysRpc.SysRpc/TestTransportError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysRpcClient) TestAppError(ctx context.Context, in *ErrorRequest, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := grpc.Invoke(ctx, "/sysRpc.SysRpc/TestAppError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysRpc service

type SysRpcServer interface {
	GetApiInfo(context.Context, *InfoRequest) (*InfoResponse, error)
	TestTransportError(context.Context, *ErrorRequest) (*ErrorResponse, error)
	TestAppError(context.Context, *ErrorRequest) (*ErrorResponse, error)
}

func RegisterSysRpcServer(s *grpc.Server, srv SysRpcServer) {
	s.RegisterService(&_SysRpc_serviceDesc, srv)
}

func _SysRpc_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRpcServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysRpc.SysRpc/GetApiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRpcServer).GetApiInfo(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRpc_TestTransportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRpcServer).TestTransportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysRpc.SysRpc/TestTransportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRpcServer).TestTransportError(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysRpc_TestAppError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysRpcServer).TestAppError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sysRpc.SysRpc/TestAppError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysRpcServer).TestAppError(ctx, req.(*ErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SysRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sysRpc.SysRpc",
	HandlerType: (*SysRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApiInfo",
			Handler:    _SysRpc_GetApiInfo_Handler,
		},
		{
			MethodName: "TestTransportError",
			Handler:    _SysRpc_TestTransportError_Handler,
		},
		{
			MethodName: "TestAppError",
			Handler:    _SysRpc_TestAppError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sysRpc.proto",
}

func init() { proto.RegisterFile("sysRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x91, 0x41, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0xff, 0xed, 0x5f, 0x6b, 0x18, 0x0b, 0x24, 0x23, 0x24, 0x0d, 0x27, 0xd3, 0x70, 0xe0,
	0xd4, 0x83, 0x9c, 0x3c, 0x78, 0x00, 0x63, 0x8c, 0x37, 0xd3, 0x12, 0xef, 0xb0, 0x1d, 0xe3, 0x06,
	0xd2, 0x5d, 0x77, 0xb6, 0xa8, 0x9f, 0xd0, 0xaf, 0x65, 0xba, 0x5b, 0x09, 0xe5, 0xe8, 0xa9, 0x79,
	0x6f, 0x66, 0x5e, 0x7f, 0x2f, 0x0b, 0x31, 0x7f, 0x71, 0xae, 0x45, 0xa6, 0x8d, 0xb2, 0x0a, 0x23,
	0xaf, 0xd2, 0x39, 0x5c, 0x3e, 0x55, 0xaf, 0x2a, 0xa7, 0xf7, 0x9a, 0xd8, 0xe2, 0x14, 0xfa, 0x62,
	0x27, 0xa9, 0xb2, 0x2f, 0x64, 0x58, 0xaa, 0x2a, 0x09, 0xae, 0x83, 0x59, 0x2f, 0xef, 0x9a, 0xe9,
	0x27, 0xc4, 0xfe, 0x88, 0xb5, 0xaa, 0x98, 0x30, 0x81, 0x8b, 0x7d, 0x67, 0xff, 0x57, 0xe2, 0x08,
	0xce, 0x37, 0xb5, 0xdc, 0x95, 0x49, 0xe8, 0x7c, 0x2f, 0x70, 0x06, 0x43, 0x1f, 0x58, 0xd4, 0x5a,
	0x2b, 0x63, 0xa9, 0x4c, 0xfe, 0xbb, 0xf9, 0xa9, 0x8d, 0x03, 0x08, 0x4b, 0x91, 0x9c, 0xb9, 0x61,
	0x58, 0x8a, 0x74, 0x00, 0xf1, 0x83, 0x31, 0xca, 0xb4, 0xbc, 0xe9, 0x10, 0xfa, 0xad, 0xf6, 0x28,
	0x37, 0xdf, 0x01, 0x44, 0x85, 0xab, 0x86, 0xb7, 0x00, 0x8f, 0x64, 0x17, 0x5a, 0x36, 0xac, 0x78,
	0x95, 0xb5, 0xfd, 0x8f, 0xea, 0x4e, 0x46, 0x5d, 0xd3, 0x67, 0xa4, 0xff, 0xf0, 0x1e, 0x70, 0x45,
	0x6c, 0x57, 0x66, 0x5d, 0x71, 0x43, 0xe2, 0xfe, 0x81, 0x87, 0xed, 0x63, 0x84, 0xc9, 0xf8, 0xc4,
	0x3d, 0x84, 0xdc, 0x41, 0xdc, 0x84, 0x2c, 0xb4, 0xfe, 0xcb, 0xf9, 0x72, 0x0a, 0x63, 0xa9, 0xb2,
	0xed, 0xc7, 0x36, 0x63, 0x32, 0x7b, 0x29, 0x28, 0x63, 0x5a, 0x1b, 0xf1, 0xb6, 0xec, 0x15, 0xee,
	0x9b, 0x6b, 0xf1, 0x1c, 0x6c, 0x22, 0xf7, 0x9c, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x7d, 0x9f, 0x7b, 0xde, 0x01, 0x00, 0x00,
}
