// Code generated by protoc-gen-go.
// source: snipsRpc.proto
// DO NOT EDIT!

/*
Package snipsRpc is a generated protocol buffer package.

It is generated from these files:
	snipsRpc.proto

It has these top-level messages:
	LogUseRequest
	LogUseResponse
	AlphaRequest
	AlphaResponse
	AlphaResult
	CreatePouchRequest
	CreatePouchResponse
	RenamePouchRequest
	RenamePouchResponse
	MakePrivateRequest
	MakePrivateResponse
	DeletePouchRequest
	DeletePouchResponse
	CreateRequest
	UpdateRequest
	MoveRequest
	Alias
	SnipName
	MoveResponse
	RenameRequest
	RenameResponse
	PatchRequest
	PatchResponse
	UpdateResponse
	CloneRequest
	CloneResponse
	TagRequest
	TagResponse
	UnTagRequest
	UnTagResponse
	GetRequest
	ListRequest
	RootRequest
	RootResponse
	UserStats
	DeleteRequest
	DeleteResponse
	CreateResponse
	Pouch
	PouchCounts
	Snip
	SnipCounts
	TypeMatchResponse
	MatchResponse
	ListResponse
*/
package snipsRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UseStatus int32

const (
	UseStatus_UseStatusUnknown UseStatus = 0
	UseStatus_UseStatusSuccess UseStatus = 1
	UseStatus_UseStatusFail    UseStatus = 2
)

var UseStatus_name = map[int32]string{
	0: "UseStatusUnknown",
	1: "UseStatusSuccess",
	2: "UseStatusFail",
}
var UseStatus_value = map[string]int32{
	"UseStatusUnknown": 0,
	"UseStatusSuccess": 1,
	"UseStatusFail":    2,
}

func (x UseStatus) String() string {
	return proto.EnumName(UseStatus_name, int32(x))
}
func (UseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UseType int32

const (
	UseType_UseTypeUnknown UseType = 0
	UseType_UseTypeView    UseType = 1
	UseType_UseTypeRun     UseType = 2
	UseType_UseTypeClone   UseType = 3
)

var UseType_name = map[int32]string{
	0: "UseTypeUnknown",
	1: "UseTypeView",
	2: "UseTypeRun",
	3: "UseTypeClone",
}
var UseType_value = map[string]int32{
	"UseTypeUnknown": 0,
	"UseTypeView":    1,
	"UseTypeRun":     2,
	"UseTypeClone":   3,
}

func (x UseType) String() string {
	return proto.EnumName(UseType_name, int32(x))
}
func (UseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Role int32

const (
	Role_Standard    Role = 0
	Role_Preferences Role = 1
	Role_Environment Role = 2
	Role_Message     Role = 3
)

var Role_name = map[int32]string{
	0: "Standard",
	1: "Preferences",
	2: "Environment",
	3: "Message",
}
var Role_value = map[string]int32{
	"Standard":    0,
	"Preferences": 1,
	"Environment": 2,
	"Message":     3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LogUseRequest struct {
	Alias   *Alias    `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Type    UseType   `protobuf:"varint,2,opt,name=type,enum=snipsRpc.UseType" json:"type,omitempty"`
	Status  UseStatus `protobuf:"varint,3,opt,name=status,enum=snipsRpc.UseStatus" json:"status,omitempty"`
	Preview string    `protobuf:"bytes,4,opt,name=preview" json:"preview,omitempty"`
	Time    int64     `protobuf:"varint,5,opt,name=time" json:"time,omitempty"`
}

func (m *LogUseRequest) Reset()                    { *m = LogUseRequest{} }
func (m *LogUseRequest) String() string            { return proto.CompactTextString(m) }
func (*LogUseRequest) ProtoMessage()               {}
func (*LogUseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LogUseRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *LogUseRequest) GetType() UseType {
	if m != nil {
		return m.Type
	}
	return UseType_UseTypeUnknown
}

func (m *LogUseRequest) GetStatus() UseStatus {
	if m != nil {
		return m.Status
	}
	return UseStatus_UseStatusUnknown
}

func (m *LogUseRequest) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *LogUseRequest) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type LogUseResponse struct {
}

func (m *LogUseResponse) Reset()                    { *m = LogUseResponse{} }
func (m *LogUseResponse) String() string            { return proto.CompactTextString(m) }
func (*LogUseResponse) ProtoMessage()               {}
func (*LogUseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AlphaRequest struct {
	Term      string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	Extension string `protobuf:"bytes,2,opt,name=extension" json:"extension,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	All       bool   `protobuf:"varint,4,opt,name=all" json:"all,omitempty"`
	Global    bool   `protobuf:"varint,5,opt,name=global" json:"global,omitempty"`
}

func (m *AlphaRequest) Reset()                    { *m = AlphaRequest{} }
func (m *AlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*AlphaRequest) ProtoMessage()               {}
func (*AlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AlphaRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *AlphaRequest) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *AlphaRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AlphaRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *AlphaRequest) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

type AlphaResponse struct {
	Results []*AlphaResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Total   int64          `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Took    int64          `protobuf:"varint,3,opt,name=took" json:"took,omitempty"`
}

func (m *AlphaResponse) Reset()                    { *m = AlphaResponse{} }
func (m *AlphaResponse) String() string            { return proto.CompactTextString(m) }
func (*AlphaResponse) ProtoMessage()               {}
func (*AlphaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AlphaResponse) GetResults() []*AlphaResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AlphaResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AlphaResponse) GetTook() int64 {
	if m != nil {
		return m.Took
	}
	return 0
}

type AlphaResult struct {
	Snippet    *Snip             `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
	Highlights map[string]string `protobuf:"bytes,2,rep,name=highlights" json:"highlights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AlphaResult) Reset()                    { *m = AlphaResult{} }
func (m *AlphaResult) String() string            { return proto.CompactTextString(m) }
func (*AlphaResult) ProtoMessage()               {}
func (*AlphaResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AlphaResult) GetSnippet() *Snip {
	if m != nil {
		return m.Snippet
	}
	return nil
}

func (m *AlphaResult) GetHighlights() map[string]string {
	if m != nil {
		return m.Highlights
	}
	return nil
}

type CreatePouchRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MakePrivate bool   `protobuf:"varint,3,opt,name=makePrivate" json:"makePrivate,omitempty"`
	Encrypt     bool   `protobuf:"varint,4,opt,name=encrypt" json:"encrypt,omitempty"`
}

func (m *CreatePouchRequest) Reset()                    { *m = CreatePouchRequest{} }
func (m *CreatePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePouchRequest) ProtoMessage()               {}
func (*CreatePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreatePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreatePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePouchRequest) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

func (m *CreatePouchRequest) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

type CreatePouchResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreatePouchResponse) Reset()                    { *m = CreatePouchResponse{} }
func (m *CreatePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePouchResponse) ProtoMessage()               {}
func (*CreatePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CreatePouchResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RenamePouchRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	NewName  string `protobuf:"bytes,3,opt,name=newName" json:"newName,omitempty"`
}

func (m *RenamePouchRequest) Reset()                    { *m = RenamePouchRequest{} }
func (m *RenamePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*RenamePouchRequest) ProtoMessage()               {}
func (*RenamePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RenamePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RenamePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenamePouchRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenamePouchResponse struct {
	OriginalName string `protobuf:"bytes,2,opt,name=originalName" json:"originalName,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *RenamePouchResponse) Reset()                    { *m = RenamePouchResponse{} }
func (m *RenamePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*RenamePouchResponse) ProtoMessage()               {}
func (*RenamePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RenamePouchResponse) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

func (m *RenamePouchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MakePrivateRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MakePrivate bool   `protobuf:"varint,3,opt,name=makePrivate" json:"makePrivate,omitempty"`
}

func (m *MakePrivateRequest) Reset()                    { *m = MakePrivateRequest{} }
func (m *MakePrivateRequest) String() string            { return proto.CompactTextString(m) }
func (*MakePrivateRequest) ProtoMessage()               {}
func (*MakePrivateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MakePrivateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MakePrivateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MakePrivateRequest) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

type MakePrivateResponse struct {
	IsPrivate bool `protobuf:"varint,1,opt,name=isPrivate" json:"isPrivate,omitempty"`
}

func (m *MakePrivateResponse) Reset()                    { *m = MakePrivateResponse{} }
func (m *MakePrivateResponse) String() string            { return proto.CompactTextString(m) }
func (*MakePrivateResponse) ProtoMessage()               {}
func (*MakePrivateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MakePrivateResponse) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

type DeletePouchRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *DeletePouchRequest) Reset()                    { *m = DeletePouchRequest{} }
func (m *DeletePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePouchRequest) ProtoMessage()               {}
func (*DeletePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeletePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeletePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeletePouchResponse struct {
}

func (m *DeletePouchResponse) Reset()                    { *m = DeletePouchResponse{} }
func (m *DeletePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePouchResponse) ProtoMessage()               {}
func (*DeletePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type CreateRequest struct {
	Snip        string `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	Alias       *Alias `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Role        Role   `protobuf:"varint,4,opt,name=role,enum=snipsRpc.Role" json:"role,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateRequest) GetSnip() string {
	if m != nil {
		return m.Snip
	}
	return ""
}

func (m *CreateRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRequest) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

type UpdateRequest struct {
	Alias       *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MoveRequest struct {
	Username    string      `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	SourcePouch string      `protobuf:"bytes,2,opt,name=sourcePouch" json:"sourcePouch,omitempty"`
	TargetPouch string      `protobuf:"bytes,3,opt,name=targetPouch" json:"targetPouch,omitempty"`
	SnipNames   []*SnipName `protobuf:"bytes,4,rep,name=snipNames" json:"snipNames,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MoveRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MoveRequest) GetSourcePouch() string {
	if m != nil {
		return m.SourcePouch
	}
	return ""
}

func (m *MoveRequest) GetTargetPouch() string {
	if m != nil {
		return m.TargetPouch
	}
	return ""
}

func (m *MoveRequest) GetSnipNames() []*SnipName {
	if m != nil {
		return m.SnipNames
	}
	return nil
}

type Alias struct {
	Username string    `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Pouch    string    `protobuf:"bytes,2,opt,name=pouch" json:"pouch,omitempty"`
	SnipName *SnipName `protobuf:"bytes,3,opt,name=snipName" json:"snipName,omitempty"`
}

func (m *Alias) Reset()                    { *m = Alias{} }
func (m *Alias) String() string            { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()               {}
func (*Alias) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Alias) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Alias) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *Alias) GetSnipName() *SnipName {
	if m != nil {
		return m.SnipName
	}
	return nil
}

type SnipName struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Extension string `protobuf:"bytes,2,opt,name=extension" json:"extension,omitempty"`
}

func (m *SnipName) Reset()                    { *m = SnipName{} }
func (m *SnipName) String() string            { return proto.CompactTextString(m) }
func (*SnipName) ProtoMessage()               {}
func (*SnipName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SnipName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnipName) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

type MoveResponse struct {
	Pouch string `protobuf:"bytes,1,opt,name=pouch" json:"pouch,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MoveResponse) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

type RenameRequest struct {
	Alias   *Alias    `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	NewName *SnipName `protobuf:"bytes,3,opt,name=newName" json:"newName,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RenameRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *RenameRequest) GetNewName() *SnipName {
	if m != nil {
		return m.NewName
	}
	return nil
}

type RenameResponse struct {
	Snip     *Snip     `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	Original *SnipName `protobuf:"bytes,2,opt,name=original" json:"original,omitempty"`
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RenameResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

func (m *RenameResponse) GetOriginal() *SnipName {
	if m != nil {
		return m.Original
	}
	return nil
}

type PatchRequest struct {
	Alias  *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Patch  string `protobuf:"bytes,3,opt,name=patch" json:"patch,omitempty"`
}

func (m *PatchRequest) Reset()                    { *m = PatchRequest{} }
func (m *PatchRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchRequest) ProtoMessage()               {}
func (*PatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PatchRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *PatchRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PatchRequest) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

type PatchResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *PatchResponse) Reset()                    { *m = PatchResponse{} }
func (m *PatchResponse) String() string            { return proto.CompactTextString(m) }
func (*PatchResponse) ProtoMessage()               {}
func (*PatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PatchResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type UpdateResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *UpdateResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type CloneRequest struct {
	Alias *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	New   *Alias `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
}

func (m *CloneRequest) Reset()                    { *m = CloneRequest{} }
func (m *CloneRequest) String() string            { return proto.CompactTextString(m) }
func (*CloneRequest) ProtoMessage()               {}
func (*CloneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CloneRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CloneRequest) GetNew() *Alias {
	if m != nil {
		return m.New
	}
	return nil
}

type CloneResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *CloneResponse) Reset()                    { *m = CloneResponse{} }
func (m *CloneResponse) String() string            { return proto.CompactTextString(m) }
func (*CloneResponse) ProtoMessage()               {}
func (*CloneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CloneResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type TagRequest struct {
	Alias *Alias   `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Tags  []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *TagRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *TagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TagResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *TagResponse) Reset()                    { *m = TagResponse{} }
func (m *TagResponse) String() string            { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()               {}
func (*TagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *TagResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type UnTagRequest struct {
	Alias *Alias   `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Tags  []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *UnTagRequest) Reset()                    { *m = UnTagRequest{} }
func (m *UnTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UnTagRequest) ProtoMessage()               {}
func (*UnTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UnTagRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *UnTagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UnTagResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *UnTagResponse) Reset()                    { *m = UnTagResponse{} }
func (m *UnTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UnTagResponse) ProtoMessage()               {}
func (*UnTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UnTagResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type GetRequest struct {
	Alias *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

type ListRequest struct {
	Username      string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Since         int64    `protobuf:"varint,2,opt,name=since" json:"since,omitempty"`
	Size          int64    `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Tags          []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Extensions    []string `protobuf:"bytes,5,rep,name=extensions" json:"extensions,omitempty"`
	All           bool     `protobuf:"varint,6,opt,name=all" json:"all,omitempty"`
	Pouch         string   `protobuf:"bytes,7,opt,name=pouch" json:"pouch,omitempty"`
	IgnorePouches bool     `protobuf:"varint,8,opt,name=ignorePouches" json:"ignorePouches,omitempty"`
	Category      string   `protobuf:"bytes,9,opt,name=category" json:"category,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ListRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListRequest) GetExtensions() []string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ListRequest) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *ListRequest) GetIgnorePouches() bool {
	if m != nil {
		return m.IgnorePouches
	}
	return false
}

func (m *ListRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type RootRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	All      bool   `protobuf:"varint,2,opt,name=all" json:"all,omitempty"`
}

func (m *RootRequest) Reset()                    { *m = RootRequest{} }
func (m *RootRequest) String() string            { return proto.CompactTextString(m) }
func (*RootRequest) ProtoMessage()               {}
func (*RootRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *RootRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RootRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type RootResponse struct {
	Snips    []*Snip    `protobuf:"bytes,1,rep,name=snips" json:"snips,omitempty"`
	Pouches  []*Pouch   `protobuf:"bytes,2,rep,name=pouches" json:"pouches,omitempty"`
	Personal []*Pouch   `protobuf:"bytes,3,rep,name=personal" json:"personal,omitempty"`
	Username string     `protobuf:"bytes,4,opt,name=Username,json=username" json:"Username,omitempty"`
	Stats    *UserStats `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
}

func (m *RootResponse) Reset()                    { *m = RootResponse{} }
func (m *RootResponse) String() string            { return proto.CompactTextString(m) }
func (*RootResponse) ProtoMessage()               {}
func (*RootResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *RootResponse) GetSnips() []*Snip {
	if m != nil {
		return m.Snips
	}
	return nil
}

func (m *RootResponse) GetPouches() []*Pouch {
	if m != nil {
		return m.Pouches
	}
	return nil
}

func (m *RootResponse) GetPersonal() []*Pouch {
	if m != nil {
		return m.Personal
	}
	return nil
}

func (m *RootResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RootResponse) GetStats() *UserStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type UserStats struct {
	MaxUsePerPouch   int64    `protobuf:"varint,1,opt,name=maxUsePerPouch" json:"maxUsePerPouch,omitempty"`
	MaxSnipsPerPouch int64    `protobuf:"varint,2,opt,name=maxSnipsPerPouch" json:"maxSnipsPerPouch,omitempty"`
	RecentPouches    []string `protobuf:"bytes,3,rep,name=recentPouches" json:"recentPouches,omitempty"`
}

func (m *UserStats) Reset()                    { *m = UserStats{} }
func (m *UserStats) String() string            { return proto.CompactTextString(m) }
func (*UserStats) ProtoMessage()               {}
func (*UserStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *UserStats) GetMaxUsePerPouch() int64 {
	if m != nil {
		return m.MaxUsePerPouch
	}
	return 0
}

func (m *UserStats) GetMaxSnipsPerPouch() int64 {
	if m != nil {
		return m.MaxSnipsPerPouch
	}
	return 0
}

func (m *UserStats) GetRecentPouches() []string {
	if m != nil {
		return m.RecentPouches
	}
	return nil
}

type DeleteRequest struct {
	Username string      `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Pouch    string      `protobuf:"bytes,2,opt,name=pouch" json:"pouch,omitempty"`
	Names    []*SnipName `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *DeleteRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteRequest) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *DeleteRequest) GetNames() []*SnipName {
	if m != nil {
		return m.Names
	}
	return nil
}

type DeleteResponse struct {
	SnipNames []*SnipName `protobuf:"bytes,1,rep,name=snipNames" json:"snipNames,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteResponse) GetSnipNames() []*SnipName {
	if m != nil {
		return m.SnipNames
	}
	return nil
}

type CreateResponse struct {
	Snip      *Snip              `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	TypeMatch *TypeMatchResponse `protobuf:"bytes,2,opt,name=typeMatch" json:"typeMatch,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *CreateResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

func (m *CreateResponse) GetTypeMatch() *TypeMatchResponse {
	if m != nil {
		return m.TypeMatch
	}
	return nil
}

type Pouch struct {
	Username    string       `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	MakePrivate bool         `protobuf:"varint,3,opt,name=makePrivate" json:"makePrivate,omitempty"`
	Encrypt     bool         `protobuf:"varint,4,opt,name=encrypt" json:"encrypt,omitempty"`
	SharedWith  []string     `protobuf:"bytes,6,rep,name=sharedWith" json:"sharedWith,omitempty"`
	Modified    int64        `protobuf:"varint,7,opt,name=modified" json:"modified,omitempty"`
	PouchId     string       `protobuf:"bytes,8,opt,name=pouchId" json:"pouchId,omitempty"`
	UnOpened    int64        `protobuf:"varint,9,opt,name=unOpened" json:"unOpened,omitempty"`
	Personal    bool         `protobuf:"varint,10,opt,name=personal" json:"personal,omitempty"`
	Stats       *PouchCounts `protobuf:"bytes,11,opt,name=stats" json:"stats,omitempty"`
}

func (m *Pouch) Reset()                    { *m = Pouch{} }
func (m *Pouch) String() string            { return proto.CompactTextString(m) }
func (*Pouch) ProtoMessage()               {}
func (*Pouch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Pouch) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Pouch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pouch) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

func (m *Pouch) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

func (m *Pouch) GetSharedWith() []string {
	if m != nil {
		return m.SharedWith
	}
	return nil
}

func (m *Pouch) GetModified() int64 {
	if m != nil {
		return m.Modified
	}
	return 0
}

func (m *Pouch) GetPouchId() string {
	if m != nil {
		return m.PouchId
	}
	return ""
}

func (m *Pouch) GetUnOpened() int64 {
	if m != nil {
		return m.UnOpened
	}
	return 0
}

func (m *Pouch) GetPersonal() bool {
	if m != nil {
		return m.Personal
	}
	return false
}

func (m *Pouch) GetStats() *PouchCounts {
	if m != nil {
		return m.Stats
	}
	return nil
}

type PouchCounts struct {
	Views  int64 `protobuf:"varint,1,opt,name=views" json:"views,omitempty"`
	Runs   int64 `protobuf:"varint,2,opt,name=runs" json:"runs,omitempty"`
	Clones int64 `protobuf:"varint,3,opt,name=clones" json:"clones,omitempty"`
	Snips  int64 `protobuf:"varint,5,opt,name=snips" json:"snips,omitempty"`
	Use    int64 `protobuf:"varint,6,opt,name=use" json:"use,omitempty"`
	Red    int64 `protobuf:"varint,4,opt,name=red" json:"red,omitempty"`
	Green  int64 `protobuf:"varint,7,opt,name=green" json:"green,omitempty"`
}

func (m *PouchCounts) Reset()                    { *m = PouchCounts{} }
func (m *PouchCounts) String() string            { return proto.CompactTextString(m) }
func (*PouchCounts) ProtoMessage()               {}
func (*PouchCounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *PouchCounts) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *PouchCounts) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

func (m *PouchCounts) GetClones() int64 {
	if m != nil {
		return m.Clones
	}
	return 0
}

func (m *PouchCounts) GetSnips() int64 {
	if m != nil {
		return m.Snips
	}
	return 0
}

func (m *PouchCounts) GetUse() int64 {
	if m != nil {
		return m.Use
	}
	return 0
}

func (m *PouchCounts) GetRed() int64 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *PouchCounts) GetGreen() int64 {
	if m != nil {
		return m.Green
	}
	return 0
}

type Snip struct {
	Alias             *Alias      `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	SnipId            string      `protobuf:"bytes,2,opt,name=snipId" json:"snipId,omitempty"`
	SnipVersion       int64       `protobuf:"varint,4,opt,name=snipVersion" json:"snipVersion,omitempty"`
	Snip              string      `protobuf:"bytes,3,opt,name=snip" json:"snip,omitempty"`
	Tags              []string    `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Created           int64       `protobuf:"varint,6,opt,name=created" json:"created,omitempty"`
	Description       string      `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
	ClonedFromAlias   string      `protobuf:"bytes,8,opt,name=clonedFromAlias" json:"clonedFromAlias,omitempty"`
	ClonedFromVersion int64       `protobuf:"varint,9,opt,name=clonedFromVersion" json:"clonedFromVersion,omitempty"`
	Private           bool        `protobuf:"varint,10,opt,name=private" json:"private,omitempty"`
	SnipChecksum      string      `protobuf:"bytes,13,opt,name=snipChecksum" json:"snipChecksum,omitempty"`
	SnipSignature     string      `protobuf:"bytes,14,opt,name=snipSignature" json:"snipSignature,omitempty"`
	Encrypted         bool        `protobuf:"varint,15,opt,name=encrypted" json:"encrypted,omitempty"`
	Algorithm         string      `protobuf:"bytes,16,opt,name=algorithm" json:"algorithm,omitempty"`
	Role              Role        `protobuf:"varint,17,opt,name=role,enum=snipsRpc.Role" json:"role,omitempty"`
	Stats             *SnipCounts `protobuf:"bytes,21,opt,name=stats" json:"stats,omitempty"`
	RunStatus         UseStatus   `protobuf:"varint,18,opt,name=runStatus,enum=snipsRpc.UseStatus" json:"runStatus,omitempty"`
	RunStatusTime     int64       `protobuf:"varint,19,opt,name=runStatusTime" json:"runStatusTime,omitempty"`
	Preview           string      `protobuf:"bytes,20,opt,name=preview" json:"preview,omitempty"`
	Dependencies      []string    `protobuf:"bytes,22,rep,name=dependencies" json:"dependencies,omitempty"`
	Attribution       string      `protobuf:"bytes,23,opt,name=attribution" json:"attribution,omitempty"`
}

func (m *Snip) Reset()                    { *m = Snip{} }
func (m *Snip) String() string            { return proto.CompactTextString(m) }
func (*Snip) ProtoMessage()               {}
func (*Snip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *Snip) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Snip) GetSnipId() string {
	if m != nil {
		return m.SnipId
	}
	return ""
}

func (m *Snip) GetSnipVersion() int64 {
	if m != nil {
		return m.SnipVersion
	}
	return 0
}

func (m *Snip) GetSnip() string {
	if m != nil {
		return m.Snip
	}
	return ""
}

func (m *Snip) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Snip) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Snip) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Snip) GetClonedFromAlias() string {
	if m != nil {
		return m.ClonedFromAlias
	}
	return ""
}

func (m *Snip) GetClonedFromVersion() int64 {
	if m != nil {
		return m.ClonedFromVersion
	}
	return 0
}

func (m *Snip) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Snip) GetSnipChecksum() string {
	if m != nil {
		return m.SnipChecksum
	}
	return ""
}

func (m *Snip) GetSnipSignature() string {
	if m != nil {
		return m.SnipSignature
	}
	return ""
}

func (m *Snip) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Snip) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *Snip) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

func (m *Snip) GetStats() *SnipCounts {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Snip) GetRunStatus() UseStatus {
	if m != nil {
		return m.RunStatus
	}
	return UseStatus_UseStatusUnknown
}

func (m *Snip) GetRunStatusTime() int64 {
	if m != nil {
		return m.RunStatusTime
	}
	return 0
}

func (m *Snip) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *Snip) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Snip) GetAttribution() string {
	if m != nil {
		return m.Attribution
	}
	return ""
}

type SnipCounts struct {
	Views  int64 `protobuf:"varint,1,opt,name=views" json:"views,omitempty"`
	Clones int64 `protobuf:"varint,2,opt,name=clones" json:"clones,omitempty"`
	Runs   int64 `protobuf:"varint,3,opt,name=runs" json:"runs,omitempty"`
}

func (m *SnipCounts) Reset()                    { *m = SnipCounts{} }
func (m *SnipCounts) String() string            { return proto.CompactTextString(m) }
func (*SnipCounts) ProtoMessage()               {}
func (*SnipCounts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *SnipCounts) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *SnipCounts) GetClones() int64 {
	if m != nil {
		return m.Clones
	}
	return 0
}

func (m *SnipCounts) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

type TypeMatchResponse struct {
	Matches []*MatchResponse `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *TypeMatchResponse) Reset()                    { *m = TypeMatchResponse{} }
func (m *TypeMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeMatchResponse) ProtoMessage()               {}
func (*TypeMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *TypeMatchResponse) GetMatches() []*MatchResponse {
	if m != nil {
		return m.Matches
	}
	return nil
}

type MatchResponse struct {
	Extension string `protobuf:"bytes,1,opt,name=extension" json:"extension,omitempty"`
	Score     int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (m *MatchResponse) Reset()                    { *m = MatchResponse{} }
func (m *MatchResponse) String() string            { return proto.CompactTextString(m) }
func (*MatchResponse) ProtoMessage()               {}
func (*MatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *MatchResponse) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *MatchResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ListResponse struct {
	Items    []*Snip `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total    int64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Since    int64   `protobuf:"varint,3,opt,name=since" json:"since,omitempty"`
	Size     int64   `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Username string  `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	Pouch    *Pouch  `protobuf:"bytes,6,opt,name=pouch" json:"pouch,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ListResponse) GetItems() []*Snip {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponse) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListResponse) GetPouch() *Pouch {
	if m != nil {
		return m.Pouch
	}
	return nil
}

func init() {
	proto.RegisterType((*LogUseRequest)(nil), "snipsRpc.LogUseRequest")
	proto.RegisterType((*LogUseResponse)(nil), "snipsRpc.LogUseResponse")
	proto.RegisterType((*AlphaRequest)(nil), "snipsRpc.AlphaRequest")
	proto.RegisterType((*AlphaResponse)(nil), "snipsRpc.AlphaResponse")
	proto.RegisterType((*AlphaResult)(nil), "snipsRpc.AlphaResult")
	proto.RegisterType((*CreatePouchRequest)(nil), "snipsRpc.CreatePouchRequest")
	proto.RegisterType((*CreatePouchResponse)(nil), "snipsRpc.CreatePouchResponse")
	proto.RegisterType((*RenamePouchRequest)(nil), "snipsRpc.RenamePouchRequest")
	proto.RegisterType((*RenamePouchResponse)(nil), "snipsRpc.RenamePouchResponse")
	proto.RegisterType((*MakePrivateRequest)(nil), "snipsRpc.MakePrivateRequest")
	proto.RegisterType((*MakePrivateResponse)(nil), "snipsRpc.MakePrivateResponse")
	proto.RegisterType((*DeletePouchRequest)(nil), "snipsRpc.DeletePouchRequest")
	proto.RegisterType((*DeletePouchResponse)(nil), "snipsRpc.DeletePouchResponse")
	proto.RegisterType((*CreateRequest)(nil), "snipsRpc.CreateRequest")
	proto.RegisterType((*UpdateRequest)(nil), "snipsRpc.UpdateRequest")
	proto.RegisterType((*MoveRequest)(nil), "snipsRpc.MoveRequest")
	proto.RegisterType((*Alias)(nil), "snipsRpc.Alias")
	proto.RegisterType((*SnipName)(nil), "snipsRpc.SnipName")
	proto.RegisterType((*MoveResponse)(nil), "snipsRpc.MoveResponse")
	proto.RegisterType((*RenameRequest)(nil), "snipsRpc.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "snipsRpc.RenameResponse")
	proto.RegisterType((*PatchRequest)(nil), "snipsRpc.PatchRequest")
	proto.RegisterType((*PatchResponse)(nil), "snipsRpc.PatchResponse")
	proto.RegisterType((*UpdateResponse)(nil), "snipsRpc.UpdateResponse")
	proto.RegisterType((*CloneRequest)(nil), "snipsRpc.CloneRequest")
	proto.RegisterType((*CloneResponse)(nil), "snipsRpc.CloneResponse")
	proto.RegisterType((*TagRequest)(nil), "snipsRpc.TagRequest")
	proto.RegisterType((*TagResponse)(nil), "snipsRpc.TagResponse")
	proto.RegisterType((*UnTagRequest)(nil), "snipsRpc.UnTagRequest")
	proto.RegisterType((*UnTagResponse)(nil), "snipsRpc.UnTagResponse")
	proto.RegisterType((*GetRequest)(nil), "snipsRpc.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "snipsRpc.ListRequest")
	proto.RegisterType((*RootRequest)(nil), "snipsRpc.RootRequest")
	proto.RegisterType((*RootResponse)(nil), "snipsRpc.RootResponse")
	proto.RegisterType((*UserStats)(nil), "snipsRpc.UserStats")
	proto.RegisterType((*DeleteRequest)(nil), "snipsRpc.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "snipsRpc.DeleteResponse")
	proto.RegisterType((*CreateResponse)(nil), "snipsRpc.CreateResponse")
	proto.RegisterType((*Pouch)(nil), "snipsRpc.Pouch")
	proto.RegisterType((*PouchCounts)(nil), "snipsRpc.PouchCounts")
	proto.RegisterType((*Snip)(nil), "snipsRpc.Snip")
	proto.RegisterType((*SnipCounts)(nil), "snipsRpc.SnipCounts")
	proto.RegisterType((*TypeMatchResponse)(nil), "snipsRpc.TypeMatchResponse")
	proto.RegisterType((*MatchResponse)(nil), "snipsRpc.MatchResponse")
	proto.RegisterType((*ListResponse)(nil), "snipsRpc.ListResponse")
	proto.RegisterEnum("snipsRpc.UseStatus", UseStatus_name, UseStatus_value)
	proto.RegisterEnum("snipsRpc.UseType", UseType_name, UseType_value)
	proto.RegisterEnum("snipsRpc.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SnipsRpc service

type SnipsRpcClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Lists snippets in either a given pouch or as a flat list.
	// Tree view currently not supported.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error)
	LogUse(ctx context.Context, in *LogUseRequest, opts ...grpc.CallOption) (*LogUseResponse, error)
}

type snipsRpcClient struct {
	cc *grpc.ClientConn
}

func NewSnipsRpcClient(cc *grpc.ClientConn) SnipsRpcClient {
	return &snipsRpcClient{cc}
}

func (c *snipsRpcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Patch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Clone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Tag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error) {
	out := new(UnTagResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/UnTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error) {
	out := new(AlphaResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Alpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) LogUse(ctx context.Context, in *LogUseRequest, opts ...grpc.CallOption) (*LogUseResponse, error) {
	out := new(LogUseResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/LogUse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnipsRpc service

type SnipsRpcServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	UnTag(context.Context, *UnTagRequest) (*UnTagResponse, error)
	Get(context.Context, *GetRequest) (*ListResponse, error)
	// Lists snippets in either a given pouch or as a flat list.
	// Tree view currently not supported.
	List(context.Context, *ListRequest) (*ListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Alpha(context.Context, *AlphaRequest) (*AlphaResponse, error)
	LogUse(context.Context, *LogUseRequest) (*LogUseResponse, error)
}

func RegisterSnipsRpcServer(s *grpc.Server, srv SnipsRpcServer) {
	s.RegisterService(&_SnipsRpc_serviceDesc, srv)
}

func _SnipsRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_UnTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).UnTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/UnTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).UnTag(ctx, req.(*UnTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Alpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Alpha(ctx, req.(*AlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_LogUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).LogUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/LogUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).LogUse(ctx, req.(*LogUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnipsRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snipsRpc.SnipsRpc",
	HandlerType: (*SnipsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SnipsRpc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SnipsRpc_Update_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _SnipsRpc_Move_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _SnipsRpc_Rename_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SnipsRpc_Patch_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _SnipsRpc_Clone_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _SnipsRpc_Tag_Handler,
		},
		{
			MethodName: "UnTag",
			Handler:    _SnipsRpc_UnTag_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SnipsRpc_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SnipsRpc_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnipsRpc_Delete_Handler,
		},
		{
			MethodName: "Alpha",
			Handler:    _SnipsRpc_Alpha_Handler,
		},
		{
			MethodName: "LogUse",
			Handler:    _SnipsRpc_LogUse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snipsRpc.proto",
}

// Client API for PouchesRpc service

type PouchesRpcClient interface {
	// Lists the root of your kwk account. Includes pouches and snippets.
	GetRoot(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error)
	Create(ctx context.Context, in *CreatePouchRequest, opts ...grpc.CallOption) (*CreatePouchResponse, error)
	Rename(ctx context.Context, in *RenamePouchRequest, opts ...grpc.CallOption) (*RenamePouchResponse, error)
	MakePrivate(ctx context.Context, in *MakePrivateRequest, opts ...grpc.CallOption) (*MakePrivateResponse, error)
	Delete(ctx context.Context, in *DeletePouchRequest, opts ...grpc.CallOption) (*DeletePouchResponse, error)
}

type pouchesRpcClient struct {
	cc *grpc.ClientConn
}

func NewPouchesRpcClient(cc *grpc.ClientConn) PouchesRpcClient {
	return &pouchesRpcClient{cc}
}

func (c *pouchesRpcClient) GetRoot(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error) {
	out := new(RootResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.PouchesRpc/GetRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pouchesRpcClient) Create(ctx context.Context, in *CreatePouchRequest, opts ...grpc.CallOption) (*CreatePouchResponse, error) {
	out := new(CreatePouchResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.PouchesRpc/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pouchesRpcClient) Rename(ctx context.Context, in *RenamePouchRequest, opts ...grpc.CallOption) (*RenamePouchResponse, error) {
	out := new(RenamePouchResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.PouchesRpc/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pouchesRpcClient) MakePrivate(ctx context.Context, in *MakePrivateRequest, opts ...grpc.CallOption) (*MakePrivateResponse, error) {
	out := new(MakePrivateResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.PouchesRpc/MakePrivate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pouchesRpcClient) Delete(ctx context.Context, in *DeletePouchRequest, opts ...grpc.CallOption) (*DeletePouchResponse, error) {
	out := new(DeletePouchResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.PouchesRpc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PouchesRpc service

type PouchesRpcServer interface {
	// Lists the root of your kwk account. Includes pouches and snippets.
	GetRoot(context.Context, *RootRequest) (*RootResponse, error)
	Create(context.Context, *CreatePouchRequest) (*CreatePouchResponse, error)
	Rename(context.Context, *RenamePouchRequest) (*RenamePouchResponse, error)
	MakePrivate(context.Context, *MakePrivateRequest) (*MakePrivateResponse, error)
	Delete(context.Context, *DeletePouchRequest) (*DeletePouchResponse, error)
}

func RegisterPouchesRpcServer(s *grpc.Server, srv PouchesRpcServer) {
	s.RegisterService(&_PouchesRpc_serviceDesc, srv)
}

func _PouchesRpc_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PouchesRpcServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.PouchesRpc/GetRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PouchesRpcServer).GetRoot(ctx, req.(*RootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PouchesRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PouchesRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.PouchesRpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PouchesRpcServer).Create(ctx, req.(*CreatePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PouchesRpc_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenamePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PouchesRpcServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.PouchesRpc/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PouchesRpcServer).Rename(ctx, req.(*RenamePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PouchesRpc_MakePrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PouchesRpcServer).MakePrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.PouchesRpc/MakePrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PouchesRpcServer).MakePrivate(ctx, req.(*MakePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PouchesRpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PouchesRpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.PouchesRpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PouchesRpcServer).Delete(ctx, req.(*DeletePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PouchesRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snipsRpc.PouchesRpc",
	HandlerType: (*PouchesRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoot",
			Handler:    _PouchesRpc_GetRoot_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PouchesRpc_Create_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _PouchesRpc_Rename_Handler,
		},
		{
			MethodName: "MakePrivate",
			Handler:    _PouchesRpc_MakePrivate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PouchesRpc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snipsRpc.proto",
}

func init() { proto.RegisterFile("snipsRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x19, 0xcb, 0x72, 0xdc, 0x5a,
	0x71, 0x34, 0x9a, 0x67, 0xcf, 0xc3, 0xe3, 0x63, 0x3b, 0x51, 0x19, 0x43, 0x99, 0x53, 0x31, 0xe5,
	0xeb, 0xdc, 0x32, 0xc4, 0xbe, 0x14, 0x10, 0xc8, 0xe2, 0xc6, 0x37, 0x09, 0xa1, 0xe2, 0xe0, 0x92,
	0xed, 0xcb, 0x5d, 0x51, 0xa5, 0x8c, 0x3a, 0x63, 0xe1, 0x19, 0x49, 0x9c, 0xa3, 0xb1, 0x63, 0x56,
	0x6c, 0x60, 0xcd, 0x82, 0x3d, 0x7f, 0xc0, 0x16, 0x36, 0xfc, 0x01, 0x3b, 0xbe, 0xe4, 0xfe, 0x01,
	0x75, 0x5e, 0xd2, 0x91, 0x3c, 0x13, 0x6c, 0x5e, 0x3b, 0x75, 0x9f, 0x47, 0xbf, 0xfb, 0x74, 0xb7,
	0x60, 0xc8, 0xe3, 0x28, 0xe5, 0x7e, 0x3a, 0xde, 0x4f, 0x59, 0x92, 0x25, 0xa4, 0x63, 0x60, 0xfa,
	0x57, 0x07, 0x06, 0x6f, 0x92, 0xc9, 0x39, 0x47, 0x1f, 0x7f, 0x3d, 0x47, 0x9e, 0x91, 0x1d, 0x68,
	0x06, 0xd3, 0x28, 0xe0, 0x9e, 0xb3, 0xed, 0xec, 0xf6, 0x0e, 0x56, 0xf6, 0xf3, 0xb3, 0x9f, 0x0b,
	0xb4, 0xaf, 0x56, 0xc9, 0x0e, 0x34, 0xb2, 0x9b, 0x14, 0xbd, 0xfa, 0xb6, 0xb3, 0x3b, 0x3c, 0x58,
	0x2d, 0x76, 0x9d, 0x73, 0x3c, 0xbb, 0x49, 0xd1, 0x97, 0xcb, 0xe4, 0x31, 0xb4, 0x78, 0x16, 0x64,
	0x73, 0xee, 0xb9, 0x72, 0xe3, 0x5a, 0x69, 0xe3, 0xa9, 0x5c, 0xf2, 0xf5, 0x16, 0xe2, 0x41, 0x3b,
	0x65, 0x78, 0x15, 0xe1, 0xb5, 0xd7, 0xd8, 0x76, 0x76, 0xbb, 0xbe, 0x01, 0x09, 0x81, 0x46, 0x16,
	0xcd, 0xd0, 0x6b, 0x6e, 0x3b, 0xbb, 0xae, 0x2f, 0xbf, 0xe9, 0x08, 0x86, 0x86, 0x73, 0x9e, 0x26,
	0x31, 0x47, 0xfa, 0x7b, 0x07, 0xfa, 0x9f, 0x4f, 0xd3, 0x8b, 0xc0, 0xc8, 0x22, 0x8e, 0x21, 0x9b,
	0x49, 0x51, 0xba, 0xbe, 0xfc, 0x26, 0x5b, 0xd0, 0xc5, 0x0f, 0x19, 0xc6, 0x3c, 0x4a, 0x62, 0xc9,
	0x7d, 0xd7, 0x2f, 0x10, 0x64, 0x13, 0x3a, 0x73, 0x8e, 0x2c, 0x0e, 0x66, 0x28, 0x39, 0xee, 0xfa,
	0x39, 0x4c, 0x46, 0xe0, 0x06, 0xd3, 0xa9, 0x64, 0xad, 0xe3, 0x8b, 0x4f, 0xf2, 0x00, 0x5a, 0x93,
	0x69, 0xf2, 0x2e, 0x98, 0x4a, 0xc6, 0x3a, 0xbe, 0x86, 0xe8, 0xaf, 0x60, 0xa0, 0xf9, 0x50, 0x9c,
	0x91, 0xef, 0x42, 0x9b, 0x21, 0x9f, 0x4f, 0x33, 0xa1, 0x56, 0x77, 0xb7, 0x77, 0xb0, 0x61, 0xab,
	0x55, 0xed, 0x9c, 0x4f, 0x33, 0xdf, 0xec, 0x22, 0xeb, 0xd0, 0xcc, 0x92, 0x2c, 0x98, 0x4a, 0x0e,
	0x5d, 0x5f, 0x01, 0x52, 0x9e, 0x24, 0xb9, 0x94, 0x9c, 0x09, 0x35, 0x24, 0xc9, 0x25, 0xfd, 0x9b,
	0x03, 0x3d, 0xeb, 0x0a, 0xb2, 0x0b, 0x6d, 0x71, 0x75, 0x8a, 0x99, 0xb6, 0xe0, 0xb0, 0x20, 0x75,
	0x1a, 0x47, 0xa9, 0x6f, 0x96, 0xc9, 0x0b, 0x80, 0x8b, 0x68, 0x72, 0x31, 0x8d, 0x26, 0x17, 0x19,
	0xf7, 0xea, 0x92, 0xaf, 0x9d, 0x85, 0x7c, 0xed, 0xff, 0x34, 0xdf, 0xf7, 0x22, 0xce, 0xd8, 0x8d,
	0x6f, 0x1d, 0xdc, 0x7c, 0x06, 0x2b, 0x95, 0x65, 0xa1, 0xa9, 0x4b, 0xbc, 0xd1, 0x6a, 0x17, 0x9f,
	0x42, 0x9e, 0xab, 0x60, 0x3a, 0x47, 0xad, 0x71, 0x05, 0x3c, 0xad, 0xff, 0xd0, 0xa1, 0xbf, 0x75,
	0x80, 0x1c, 0x31, 0x0c, 0x32, 0x3c, 0x49, 0xe6, 0xe3, 0x0b, 0x63, 0x3a, 0xdb, 0x10, 0x4e, 0xc5,
	0x10, 0x04, 0x1a, 0x12, 0xaf, 0xee, 0x92, 0xdf, 0x64, 0x1b, 0x7a, 0xb3, 0xe0, 0x12, 0x4f, 0x58,
	0x74, 0x15, 0x64, 0xca, 0x76, 0x1d, 0xdf, 0x46, 0x09, 0xef, 0xc2, 0x78, 0xcc, 0x6e, 0xd2, 0x4c,
	0x9b, 0xd0, 0x80, 0x74, 0x07, 0xd6, 0x4a, 0x1c, 0x68, 0xa3, 0x0d, 0xa1, 0x1e, 0x85, 0x9a, 0x78,
	0x3d, 0x0a, 0xe9, 0x2f, 0x81, 0xf8, 0x28, 0x88, 0xfd, 0x47, 0x8c, 0x7a, 0xd0, 0x8e, 0xf1, 0xfa,
	0x6d, 0xe1, 0x60, 0x06, 0xa4, 0xc7, 0xb0, 0x56, 0xba, 0x5f, 0xb3, 0x41, 0xa1, 0x9f, 0xb0, 0x68,
	0x12, 0xc5, 0xc1, 0xf4, 0x6d, 0x71, 0x59, 0x09, 0x97, 0x13, 0x72, 0x0b, 0x42, 0xf4, 0x3d, 0x90,
	0xe3, 0x42, 0xfc, 0xff, 0x99, 0x5e, 0xe9, 0x21, 0xac, 0x95, 0xe8, 0x68, 0xb6, 0xb7, 0xa0, 0x1b,
	0x71, 0x73, 0xcc, 0x91, 0xc7, 0x0a, 0x04, 0xfd, 0x02, 0xc8, 0x17, 0x38, 0xc5, 0x7f, 0xc3, 0xe8,
	0xb6, 0x88, 0x1b, 0xb0, 0x56, 0xba, 0x45, 0xe7, 0x81, 0x3f, 0x38, 0x30, 0x50, 0x06, 0xb5, 0x12,
	0x81, 0xf0, 0x6b, 0x93, 0x08, 0xc4, 0x77, 0x91, 0xe8, 0xea, 0x1f, 0x4d, 0x74, 0xdb, 0xd0, 0x0b,
	0x91, 0x8f, 0x59, 0x94, 0x66, 0x22, 0x63, 0x28, 0xf2, 0x36, 0x8a, 0x50, 0x68, 0xb0, 0x64, 0x8a,
	0xd2, 0xab, 0x86, 0x76, 0xb8, 0xf9, 0xc9, 0x14, 0x7d, 0xb9, 0x46, 0xbf, 0x82, 0xc1, 0x79, 0x1a,
	0x5a, 0x1c, 0xdd, 0x31, 0xcd, 0x56, 0xa8, 0xd7, 0x6f, 0x51, 0xa7, 0x7f, 0x72, 0xa0, 0x77, 0x9c,
	0x5c, 0xdd, 0xc9, 0xc0, 0xdb, 0xd0, 0xe3, 0xc9, 0x9c, 0x8d, 0x95, 0xbe, 0xcc, 0x6d, 0x16, 0x4a,
	0xec, 0xc8, 0x02, 0x36, 0xc1, 0x4c, 0xed, 0xd0, 0xd2, 0x5a, 0x28, 0xf2, 0x3d, 0xe8, 0x0a, 0x56,
	0x85, 0xdb, 0x71, 0xaf, 0x21, 0x93, 0x06, 0x29, 0x67, 0x18, 0xb1, 0xe4, 0x17, 0x9b, 0x68, 0x04,
	0x4d, 0x29, 0xd3, 0x47, 0x59, 0x5b, 0x87, 0x66, 0x6a, 0x31, 0xa5, 0x00, 0xb2, 0x0f, 0x1d, 0x73,
	0x8f, 0xe4, 0x65, 0x31, 0xad, 0x7c, 0x0f, 0xfd, 0x09, 0x74, 0x0c, 0x36, 0x77, 0x18, 0xc7, 0xf2,
	0xe6, 0x8f, 0x26, 0x7f, 0xfa, 0x08, 0xfa, 0x4a, 0x93, 0xda, 0x85, 0x73, 0x9e, 0x1c, 0x8b, 0x27,
	0x1a, 0xc2, 0x40, 0x85, 0xe9, 0x3d, 0x4d, 0xf9, 0x69, 0x39, 0xf0, 0x17, 0x8b, 0x92, 0x27, 0x83,
	0x10, 0x86, 0x86, 0x4a, 0x9e, 0x07, 0x0a, 0x1f, 0xbe, 0x9d, 0xd5, 0x95, 0x4f, 0xef, 0x43, 0xc7,
	0xe4, 0x05, 0xed, 0xd6, 0x0b, 0xf5, 0x65, 0xf6, 0xd0, 0x31, 0xf4, 0x4f, 0x82, 0xac, 0x08, 0xc0,
	0x3b, 0x8a, 0xf2, 0x00, 0x5a, 0xca, 0x25, 0xb4, 0x0e, 0x35, 0x24, 0x15, 0x26, 0xae, 0xd3, 0x7e,
	0xa3, 0x00, 0x7a, 0x08, 0x03, 0x4d, 0xe4, 0xee, 0x92, 0xd0, 0xcf, 0x60, 0x68, 0x02, 0xe6, 0x1e,
	0xa7, 0xbe, 0x82, 0xfe, 0xd1, 0x34, 0x89, 0xef, 0x6b, 0x9a, 0x6f, 0x83, 0x1b, 0xe3, 0xf5, 0xb2,
	0x44, 0x20, 0xd6, 0x84, 0x10, 0xfa, 0xe6, 0x7b, 0xb0, 0xf3, 0x0a, 0xe0, 0x2c, 0x98, 0xdc, 0x93,
	0x19, 0xf1, 0xc8, 0x07, 0x13, 0xf5, 0x20, 0x8b, 0xa2, 0x25, 0x98, 0x70, 0xfa, 0x04, 0x7a, 0xf2,
	0xa2, 0x7b, 0xd0, 0x7e, 0x0d, 0xfd, 0xf3, 0xf8, 0xbf, 0x43, 0xfd, 0x10, 0x06, 0xfa, 0xaa, 0x7b,
	0xd0, 0x3f, 0x04, 0x78, 0x85, 0xd9, 0xfd, 0xa8, 0xd3, 0xaf, 0x1d, 0xe8, 0xbd, 0x89, 0x78, 0x76,
	0x97, 0x64, 0xb6, 0x0e, 0x4d, 0x1e, 0xc5, 0x63, 0x34, 0x25, 0x92, 0x04, 0x64, 0xa6, 0x8f, 0x7e,
	0x83, 0xa6, 0x44, 0x12, 0xdf, 0xb9, 0x4c, 0x8d, 0x42, 0x26, 0xf2, 0x2d, 0x80, 0x3c, 0xf0, 0xb9,
	0xd7, 0x94, 0x2b, 0x16, 0xc6, 0x14, 0x7b, 0xad, 0xa2, 0xd8, 0xcb, 0xb3, 0x41, 0xdb, 0xce, 0x50,
	0x8f, 0x60, 0x10, 0x4d, 0xe2, 0x84, 0xa9, 0xfc, 0x89, 0xdc, 0xeb, 0xc8, 0x13, 0x65, 0xa4, 0x90,
	0x63, 0x1c, 0x64, 0x38, 0x49, 0xd8, 0x8d, 0xd7, 0x55, 0x72, 0x18, 0x98, 0xfe, 0x18, 0x7a, 0x7e,
	0x92, 0xdc, 0x49, 0x64, 0xcd, 0x54, 0x3d, 0x67, 0x8a, 0xfe, 0xc3, 0x81, 0xbe, 0x3a, 0xad, 0x4d,
	0xf3, 0x08, 0x9a, 0x52, 0xb5, 0xba, 0xce, 0xac, 0xda, 0x46, 0x2d, 0x92, 0x4f, 0xa0, 0x9d, 0x6a,
	0x7e, 0x55, 0xdd, 0x67, 0x19, 0x44, 0xbd, 0xa5, 0x66, 0x9d, 0x3c, 0x86, 0x4e, 0x8a, 0x8c, 0x27,
	0x22, 0xa5, 0xb8, 0x8b, 0xf7, 0xe6, 0x1b, 0x04, 0xf3, 0xe7, 0x86, 0xf9, 0x46, 0x85, 0xf9, 0x4f,
	0xa0, 0x29, 0xea, 0x7c, 0x2e, 0x6b, 0xe5, 0x5e, 0xa5, 0x13, 0x60, 0xa2, 0x15, 0xe0, 0xbe, 0xda,
	0x41, 0x7f, 0xe7, 0x40, 0x37, 0x47, 0x92, 0xef, 0xc0, 0x70, 0x16, 0x7c, 0x38, 0xe7, 0x78, 0x82,
	0xec, 0x24, 0xcf, 0xc7, 0xae, 0x5f, 0xc1, 0x92, 0x3d, 0x18, 0xcd, 0x82, 0x0f, 0x42, 0x4c, 0x9e,
	0xef, 0x54, 0xbe, 0x71, 0x0b, 0x2f, 0xcc, 0xc6, 0x70, 0x8c, 0x71, 0x66, 0xcc, 0xe6, 0x4a, 0x0f,
	0x28, 0x23, 0xe9, 0x25, 0x0c, 0x54, 0x7d, 0x71, 0x47, 0x7f, 0x5c, 0xf0, 0x82, 0xed, 0x42, 0x33,
	0x96, 0x4f, 0xa5, 0xbb, 0xf4, 0xa9, 0x54, 0x1b, 0xe8, 0x73, 0x18, 0x1a, 0x62, 0xda, 0x96, 0xa5,
	0xa7, 0xd6, 0xb9, 0xcb, 0x53, 0x9b, 0xc0, 0xd0, 0x14, 0x3e, 0xf7, 0x78, 0x35, 0x7e, 0x04, 0x5d,
	0xd1, 0xac, 0x1d, 0xcb, 0xd4, 0xad, 0x92, 0xe0, 0x37, 0x8a, 0x8d, 0x67, 0x66, 0xc9, 0xdc, 0xe9,
	0x17, 0xbb, 0xe9, 0x9f, 0xeb, 0xd0, 0x54, 0x1a, 0xfd, 0x3f, 0x16, 0xec, 0x22, 0x78, 0xf9, 0x45,
	0xc0, 0x30, 0xfc, 0x45, 0x94, 0x5d, 0x78, 0x2d, 0x15, 0xbc, 0x05, 0x46, 0xf0, 0x32, 0x4b, 0xc2,
	0xe8, 0x7d, 0x84, 0xa1, 0x8c, 0x56, 0xd7, 0xcf, 0x61, 0xd9, 0x64, 0x0a, 0x86, 0x5f, 0x87, 0x32,
	0x54, 0xbb, 0xbe, 0x01, 0xa5, 0x04, 0xf1, 0xcf, 0x53, 0x8c, 0x31, 0x94, 0x41, 0xea, 0xfa, 0x39,
	0x2c, 0xd6, 0xf2, 0x28, 0x00, 0xc9, 0x4c, 0xe1, 0xf4, 0x8f, 0x8d, 0x63, 0xf7, 0xa4, 0xea, 0x36,
	0x2a, 0xe1, 0x71, 0x94, 0xcc, 0xe3, 0xc2, 0xb5, 0x45, 0xb9, 0x66, 0xa1, 0x65, 0x63, 0x14, 0xe1,
	0x35, 0xd7, 0x3e, 0xad, 0x00, 0xa1, 0x30, 0x36, 0x8f, 0xb9, 0x76, 0x5f, 0xf9, 0x2d, 0x1e, 0xdd,
	0xb1, 0x78, 0x81, 0xb8, 0xce, 0x6d, 0x1a, 0x92, 0x79, 0x50, 0x46, 0x7c, 0x53, 0xe7, 0x41, 0x19,
	0xe1, 0x23, 0x70, 0xe7, 0x1c, 0x65, 0xfe, 0x72, 0x7d, 0xf1, 0x29, 0x30, 0x0c, 0x43, 0xa9, 0x4a,
	0xd7, 0x17, 0x9f, 0xe2, 0xe4, 0x84, 0x21, 0xc6, 0x5a, 0x47, 0x0a, 0xa0, 0x7f, 0x6f, 0x42, 0xe3,
	0xb4, 0x54, 0x20, 0xff, 0xcb, 0x62, 0x40, 0x2c, 0xbc, 0x0e, 0x4d, 0x31, 0xa0, 0x20, 0x59, 0x6c,
	0xc6, 0x51, 0xfa, 0x25, 0x32, 0x59, 0x6d, 0x29, 0xba, 0x36, 0x2a, 0xaf, 0xca, 0x5d, 0xab, 0x2a,
	0x37, 0xb9, 0xba, 0x69, 0xe5, 0x6a, 0x0f, 0xda, 0x63, 0xe9, 0xd5, 0xa1, 0x96, 0xc7, 0x80, 0xd5,
	0xf2, 0xb8, 0x7d, 0xbb, 0x38, 0xdf, 0x85, 0x15, 0xa9, 0xa7, 0xf0, 0x25, 0x4b, 0x66, 0x92, 0x6f,
	0x6d, 0xf6, 0x2a, 0x9a, 0x7c, 0x0a, 0xab, 0x05, 0xca, 0x70, 0xad, 0xfc, 0xe0, 0xf6, 0x82, 0x9a,
	0x55, 0x28, 0xd7, 0x55, 0xfe, 0x60, 0x40, 0xd1, 0xaf, 0x09, 0x49, 0x8e, 0x2e, 0x70, 0x7c, 0xc9,
	0xe7, 0x33, 0x6f, 0xa0, 0xfa, 0x35, 0x1b, 0x27, 0xd2, 0x8f, 0x80, 0x4f, 0xa3, 0x49, 0x1c, 0x64,
	0x73, 0x86, 0xde, 0x50, 0x6e, 0x2a, 0x23, 0x65, 0xb5, 0xaa, 0x3c, 0x1e, 0x43, 0x6f, 0x45, 0xb5,
	0x50, 0x39, 0x42, 0xac, 0x06, 0xd3, 0x49, 0xc2, 0xa2, 0xec, 0x62, 0xe6, 0x8d, 0x54, 0x2d, 0x9b,
	0x23, 0xf2, 0xa6, 0x64, 0x75, 0x79, 0x53, 0x42, 0xf6, 0x8c, 0xe3, 0x6e, 0x48, 0x03, 0xaf, 0x97,
	0x93, 0x43, 0xc9, 0x6f, 0xc9, 0x13, 0xe8, 0xb2, 0x79, 0xac, 0x06, 0x36, 0x1e, 0x59, 0x3e, 0xcb,
	0x29, 0x76, 0xc9, 0x1c, 0x6b, 0x80, 0xb3, 0x68, 0x86, 0xde, 0x9a, 0x54, 0x66, 0x19, 0x69, 0x0f,
	0x7d, 0xd6, 0xcb, 0x43, 0x1f, 0x0a, 0xfd, 0x10, 0x53, 0x8c, 0x43, 0x8c, 0xc7, 0x11, 0x72, 0xef,
	0x81, 0x74, 0x89, 0x12, 0x4e, 0x38, 0x40, 0x90, 0x65, 0x2c, 0x7a, 0x37, 0x97, 0x0e, 0xf0, 0x50,
	0x39, 0x80, 0x85, 0xa2, 0x6f, 0x01, 0x0a, 0x69, 0x96, 0x84, 0x5b, 0x11, 0x5a, 0xf5, 0x52, 0x68,
	0x99, 0x30, 0x74, 0x8b, 0x30, 0xa4, 0x2f, 0x61, 0xf5, 0x56, 0x46, 0x24, 0x4f, 0xa0, 0x3d, 0x13,
	0x88, 0x3c, 0x4f, 0x3f, 0x2c, 0x74, 0x53, 0xce, 0x9d, 0x66, 0x1f, 0x3d, 0x82, 0x41, 0xf9, 0x8e,
	0x52, 0x6f, 0xe2, 0x54, 0x07, 0x53, 0x22, 0xca, 0xc7, 0x09, 0x2b, 0xaa, 0x1d, 0x01, 0xd0, 0xbf,
	0x38, 0xd0, 0x57, 0xf5, 0x52, 0xf1, 0xfc, 0x47, 0x19, 0xce, 0x96, 0x3e, 0xff, 0x72, 0x71, 0xc9,
	0x74, 0x29, 0x2f, 0xa8, 0xdc, 0x45, 0x05, 0x55, 0xc3, 0x2a, 0xa8, 0xec, 0x5c, 0xdf, 0xac, 0xe4,
	0xfa, 0x1d, 0xf3, 0x0c, 0xb6, 0xaa, 0x59, 0x43, 0x15, 0x0b, 0x6a, 0x75, 0xef, 0x67, 0xf2, 0x85,
	0xd7, 0x9e, 0xb2, 0x0e, 0xa3, 0x1c, 0x38, 0x8f, 0x2f, 0xe3, 0xe4, 0x3a, 0x1e, 0xd5, 0x4a, 0xd8,
	0xd3, 0xf9, 0x78, 0x8c, 0x9c, 0x8f, 0x1c, 0xb2, 0x0a, 0x83, 0x1c, 0xfb, 0x32, 0x88, 0xa6, 0xa3,
	0xfa, 0xde, 0x09, 0xb4, 0xf5, 0xd4, 0x91, 0x10, 0x18, 0xea, 0xcf, 0xe2, 0x9e, 0x15, 0xe8, 0x69,
	0xdc, 0x97, 0x11, 0x5e, 0x8f, 0x1c, 0x32, 0x04, 0x30, 0x53, 0xca, 0x79, 0x3c, 0xaa, 0x93, 0x11,
	0xf4, 0x35, 0x2c, 0x4b, 0xfc, 0x91, 0xbb, 0x77, 0x04, 0x0d, 0x11, 0x27, 0xa4, 0x0f, 0x9d, 0xd3,
	0x2c, 0x88, 0xc3, 0x80, 0x85, 0xea, 0xa2, 0x13, 0x86, 0xef, 0x91, 0x61, 0x3c, 0x46, 0xc1, 0xcb,
	0x0a, 0xf4, 0x5e, 0xc4, 0x57, 0x11, 0x4b, 0xe2, 0x19, 0xc6, 0xd9, 0xa8, 0x4e, 0x7a, 0xd0, 0x3e,
	0x46, 0xce, 0x83, 0x09, 0x8e, 0xdc, 0x83, 0x3f, 0xb6, 0x54, 0x37, 0x2a, 0x84, 0x27, 0xcf, 0xa0,
	0xa5, 0x5e, 0x66, 0x62, 0xb9, 0x46, 0x69, 0x48, 0xb1, 0xe9, 0xdd, 0x5e, 0xd0, 0x03, 0x8d, 0x9a,
	0x38, 0xae, 0xda, 0x21, 0xfb, 0x78, 0x69, 0xa2, 0x60, 0x1f, 0x2f, 0x77, 0x4e, 0xb4, 0x46, 0x7e,
	0x00, 0x0d, 0xd1, 0xd9, 0x12, 0xeb, 0x6d, 0xb2, 0x66, 0x06, 0x9b, 0x0f, 0xaa, 0x68, 0x9b, 0xae,
	0x6a, 0x43, 0x6d, 0xba, 0xa5, 0xf6, 0xd7, 0xa6, 0x5b, 0xee, 0x58, 0x69, 0x8d, 0x3c, 0x85, 0xa6,
	0x6c, 0xfd, 0x88, 0x45, 0xc1, 0x6e, 0x38, 0x37, 0x1f, 0xde, 0xc2, 0xdb, 0x67, 0xa5, 0x39, 0xec,
	0xb3, 0x76, 0x73, 0x67, 0x9f, 0x2d, 0xb5, 0x66, 0xb4, 0x46, 0x3e, 0x03, 0xf7, 0x2c, 0x98, 0x10,
	0x2b, 0xa3, 0x15, 0x9d, 0xd0, 0xe6, 0x46, 0x05, 0x6b, 0x53, 0x94, 0x7d, 0x8e, 0x4d, 0xd1, 0xee,
	0xa1, 0x6c, 0x8a, 0xa5, 0x86, 0x88, 0xd6, 0xc8, 0xf7, 0xc1, 0x7d, 0x25, 0x3a, 0xe0, 0x62, 0x47,
	0xd1, 0xfd, 0xd8, 0xfa, 0xb5, 0xa3, 0x55, 0x19, 0x46, 0x60, 0x6c, 0xc3, 0x58, 0xfd, 0xcf, 0x47,
	0x0e, 0x3e, 0x83, 0x96, 0xaa, 0x16, 0x6d, 0xc3, 0x94, 0x8a, 0x55, 0xdb, 0x30, 0xe5, 0xc2, 0x52,
	0x89, 0x2a, 0xe7, 0xbb, 0xb6, 0xa8, 0xf6, 0xe8, 0xdc, 0x16, 0xb5, 0x34, 0xca, 0x56, 0xa4, 0xd5,
	0xe0, 0xdd, 0x26, 0x5d, 0xfa, 0x89, 0x60, 0x93, 0xae, 0xcc, 0xe8, 0x6b, 0x07, 0x5f, 0xd7, 0x01,
	0x74, 0x81, 0x2d, 0x02, 0xe3, 0x29, 0xb4, 0x85, 0xa6, 0x92, 0xa4, 0xa4, 0x04, 0xab, 0x23, 0xb2,
	0x95, 0x60, 0xb7, 0x3a, 0xb4, 0x46, 0x5e, 0xe5, 0x41, 0xb5, 0x55, 0x8d, 0x1d, 0x7b, 0xae, 0xb8,
	0xf9, 0xcd, 0x25, 0xab, 0xf6, 0x45, 0xda, 0xcd, 0xb7, 0xaa, 0xde, 0xbc, 0xec, 0xa2, 0x05, 0xa3,
	0x5a, 0x5a, 0x23, 0x6f, 0xa0, 0x67, 0x0d, 0x43, 0xed, 0xdb, 0x6e, 0xcf, 0x62, 0xed, 0xdb, 0x16,
	0x4c, 0x50, 0x15, 0x5b, 0xda, 0xc8, 0x5b, 0x55, 0x5b, 0x2e, 0x63, 0x6b, 0xd1, 0x3c, 0xb4, 0xf6,
	0x9c, 0xc2, 0x7a, 0x94, 0xec, 0x5f, 0x5e, 0x5f, 0xee, 0x73, 0x64, 0x57, 0xd1, 0x18, 0xd5, 0x81,
	0xe7, 0x79, 0x7e, 0x3a, 0x71, 0xde, 0xb5, 0xe4, 0xbf, 0xa1, 0xc3, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0xdc, 0xa6, 0xc5, 0xac, 0x2d, 0x1a, 0x00, 0x00,
}
