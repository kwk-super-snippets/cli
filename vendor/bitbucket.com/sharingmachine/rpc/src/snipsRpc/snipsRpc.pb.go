// Code generated by protoc-gen-go.
// source: snipsRpc.proto
// DO NOT EDIT!

/*
Package snipsRpc is a generated protocol buffer package.

It is generated from these files:
	snipsRpc.proto

It has these top-level messages:
	CreateRequest
	UpdateRequest
	RenameRequest
	RenameResponse
	PatchRequest
	PatchResponse
	UpdateResponse
	CloneRequest
	CloneResponse
	TagRequest
	TagResponse
	UnTagRequest
	UnTagResponse
	GetRequest
	ListRequest
	DeleteRequest
	DeleteResponse
	CreateResponse
	Snip
	TypeMatchResponse
	MatchResponse
	ListResponse
*/
package snipsRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	Role_Standard    Role = 0
	Role_Preferences Role = 1
	Role_Environment Role = 2
)

var Role_name = map[int32]string{
	0: "Standard",
	1: "Preferences",
	2: "Environment",
}
var Role_value = map[string]int32{
	"Standard":    0,
	"Preferences": 1,
	"Environment": 2,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateRequest struct {
	Snip        string `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	FullName    string `protobuf:"bytes,2,opt,name=fullName" json:"fullName,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Role        Role   `protobuf:"varint,4,opt,name=role,enum=snipsRpc.Role" json:"role,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetSnip() string {
	if m != nil {
		return m.Snip
	}
	return ""
}

func (m *CreateRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *CreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRequest) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

type UpdateRequest struct {
	FullName    string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpdateRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type RenameRequest struct {
	FullName    string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	NewFullName string `protobuf:"bytes,2,opt,name=newFullName" json:"newFullName,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RenameRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *RenameRequest) GetNewFullName() string {
	if m != nil {
		return m.NewFullName
	}
	return ""
}

type RenameResponse struct {
	Snip             *Snip  `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	OriginalFullName string `protobuf:"bytes,2,opt,name=originalFullName" json:"originalFullName,omitempty"`
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RenameResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

func (m *RenameResponse) GetOriginalFullName() string {
	if m != nil {
		return m.OriginalFullName
	}
	return ""
}

type PatchRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Target   string `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	Patch    string `protobuf:"bytes,2,opt,name=patch" json:"patch,omitempty"`
}

func (m *PatchRequest) Reset()                    { *m = PatchRequest{} }
func (m *PatchRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchRequest) ProtoMessage()               {}
func (*PatchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PatchRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *PatchRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PatchRequest) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

type PatchResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *PatchResponse) Reset()                    { *m = PatchResponse{} }
func (m *PatchResponse) String() string            { return proto.CompactTextString(m) }
func (*PatchResponse) ProtoMessage()               {}
func (*PatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PatchResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type UpdateResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type CloneRequest struct {
	FullName    string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	NewFullName string `protobuf:"bytes,2,opt,name=newFullName" json:"newFullName,omitempty"`
	Username    string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *CloneRequest) Reset()                    { *m = CloneRequest{} }
func (m *CloneRequest) String() string            { return proto.CompactTextString(m) }
func (*CloneRequest) ProtoMessage()               {}
func (*CloneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CloneRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *CloneRequest) GetNewFullName() string {
	if m != nil {
		return m.NewFullName
	}
	return ""
}

func (m *CloneRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type CloneResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *CloneResponse) Reset()                    { *m = CloneResponse{} }
func (m *CloneResponse) String() string            { return proto.CompactTextString(m) }
func (*CloneResponse) ProtoMessage()               {}
func (*CloneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CloneResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type TagRequest struct {
	FullName string   `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Username string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TagRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *TagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TagRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type TagResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *TagResponse) Reset()                    { *m = TagResponse{} }
func (m *TagResponse) String() string            { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()               {}
func (*TagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TagResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type UnTagRequest struct {
	FullName string   `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Tags     []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Username string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *UnTagRequest) Reset()                    { *m = UnTagRequest{} }
func (m *UnTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UnTagRequest) ProtoMessage()               {}
func (*UnTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UnTagRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *UnTagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UnTagRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UnTagResponse struct {
	Snip *Snip `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
}

func (m *UnTagResponse) Reset()                    { *m = UnTagResponse{} }
func (m *UnTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UnTagResponse) ProtoMessage()               {}
func (*UnTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UnTagResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

type GetRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *GetRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ListRequest struct {
	Username   string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Since      int64    `protobuf:"varint,2,opt,name=since" json:"since,omitempty"`
	Size       int64    `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Tags       []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Extensions []string `protobuf:"bytes,5,rep,name=extensions" json:"extensions,omitempty"`
	All        bool     `protobuf:"varint,6,opt,name=all" json:"all,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ListRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListRequest) GetExtensions() []string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type DeleteRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *DeleteRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteResponse struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName" json:"fullName,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteResponse) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

type CreateResponse struct {
	Snip      *Snip              `protobuf:"bytes,1,opt,name=snip" json:"snip,omitempty"`
	TypeMatch *TypeMatchResponse `protobuf:"bytes,2,opt,name=typeMatch" json:"typeMatch,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CreateResponse) GetSnip() *Snip {
	if m != nil {
		return m.Snip
	}
	return nil
}

func (m *CreateResponse) GetTypeMatch() *TypeMatchResponse {
	if m != nil {
		return m.TypeMatch
	}
	return nil
}

type Snip struct {
	SnipId             string   `protobuf:"bytes,1,opt,name=snipId" json:"snipId,omitempty"`
	FullName           string   `protobuf:"bytes,2,opt,name=fullName" json:"fullName,omitempty"`
	Username           string   `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Name               string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Extension          string   `protobuf:"bytes,5,opt,name=extension" json:"extension,omitempty"`
	Snip               string   `protobuf:"bytes,6,opt,name=snip" json:"snip,omitempty"`
	SnipVersion        int64    `protobuf:"varint,7,opt,name=snipVersion" json:"snipVersion,omitempty"`
	Tags               []string `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Created            int64    `protobuf:"varint,9,opt,name=created" json:"created,omitempty"`
	Description        string   `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	ClonedFromFullName string   `protobuf:"bytes,11,opt,name=clonedFromFullName" json:"clonedFromFullName,omitempty"`
	ClonedFromVersion  int64    `protobuf:"varint,12,opt,name=clonedFromVersion" json:"clonedFromVersion,omitempty"`
	Private            bool     `protobuf:"varint,13,opt,name=private" json:"private,omitempty"`
	CloneCount         int64    `protobuf:"varint,14,opt,name=cloneCount" json:"cloneCount,omitempty"`
	RunCount           int64    `protobuf:"varint,15,opt,name=runCount" json:"runCount,omitempty"`
	SnipChecksum       string   `protobuf:"bytes,16,opt,name=snipChecksum" json:"snipChecksum,omitempty"`
	SnipSignature      string   `protobuf:"bytes,17,opt,name=snipSignature" json:"snipSignature,omitempty"`
	Encrypted          bool     `protobuf:"varint,18,opt,name=encrypted" json:"encrypted,omitempty"`
	Algorithm          string   `protobuf:"bytes,19,opt,name=algorithm" json:"algorithm,omitempty"`
	Role               Role     `protobuf:"varint,20,opt,name=role,enum=snipsRpc.Role" json:"role,omitempty"`
}

func (m *Snip) Reset()                    { *m = Snip{} }
func (m *Snip) String() string            { return proto.CompactTextString(m) }
func (*Snip) ProtoMessage()               {}
func (*Snip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Snip) GetSnipId() string {
	if m != nil {
		return m.SnipId
	}
	return ""
}

func (m *Snip) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Snip) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Snip) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Snip) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Snip) GetSnip() string {
	if m != nil {
		return m.Snip
	}
	return ""
}

func (m *Snip) GetSnipVersion() int64 {
	if m != nil {
		return m.SnipVersion
	}
	return 0
}

func (m *Snip) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Snip) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Snip) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Snip) GetClonedFromFullName() string {
	if m != nil {
		return m.ClonedFromFullName
	}
	return ""
}

func (m *Snip) GetClonedFromVersion() int64 {
	if m != nil {
		return m.ClonedFromVersion
	}
	return 0
}

func (m *Snip) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *Snip) GetCloneCount() int64 {
	if m != nil {
		return m.CloneCount
	}
	return 0
}

func (m *Snip) GetRunCount() int64 {
	if m != nil {
		return m.RunCount
	}
	return 0
}

func (m *Snip) GetSnipChecksum() string {
	if m != nil {
		return m.SnipChecksum
	}
	return ""
}

func (m *Snip) GetSnipSignature() string {
	if m != nil {
		return m.SnipSignature
	}
	return ""
}

func (m *Snip) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Snip) GetAlgorithm() string {
	if m != nil {
		return m.Algorithm
	}
	return ""
}

func (m *Snip) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

type TypeMatchResponse struct {
	Matches []*MatchResponse `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *TypeMatchResponse) Reset()                    { *m = TypeMatchResponse{} }
func (m *TypeMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeMatchResponse) ProtoMessage()               {}
func (*TypeMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TypeMatchResponse) GetMatches() []*MatchResponse {
	if m != nil {
		return m.Matches
	}
	return nil
}

type MatchResponse struct {
	Extension string `protobuf:"bytes,1,opt,name=extension" json:"extension,omitempty"`
	Score     int64  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (m *MatchResponse) Reset()                    { *m = MatchResponse{} }
func (m *MatchResponse) String() string            { return proto.CompactTextString(m) }
func (*MatchResponse) ProtoMessage()               {}
func (*MatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MatchResponse) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *MatchResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ListResponse struct {
	Items []*Snip `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Since int64   `protobuf:"varint,3,opt,name=since" json:"since,omitempty"`
	Size  int64   `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListResponse) GetItems() []*Snip {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponse) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "snipsRpc.CreateRequest")
	proto.RegisterType((*UpdateRequest)(nil), "snipsRpc.UpdateRequest")
	proto.RegisterType((*RenameRequest)(nil), "snipsRpc.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "snipsRpc.RenameResponse")
	proto.RegisterType((*PatchRequest)(nil), "snipsRpc.PatchRequest")
	proto.RegisterType((*PatchResponse)(nil), "snipsRpc.PatchResponse")
	proto.RegisterType((*UpdateResponse)(nil), "snipsRpc.UpdateResponse")
	proto.RegisterType((*CloneRequest)(nil), "snipsRpc.CloneRequest")
	proto.RegisterType((*CloneResponse)(nil), "snipsRpc.CloneResponse")
	proto.RegisterType((*TagRequest)(nil), "snipsRpc.TagRequest")
	proto.RegisterType((*TagResponse)(nil), "snipsRpc.TagResponse")
	proto.RegisterType((*UnTagRequest)(nil), "snipsRpc.UnTagRequest")
	proto.RegisterType((*UnTagResponse)(nil), "snipsRpc.UnTagResponse")
	proto.RegisterType((*GetRequest)(nil), "snipsRpc.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "snipsRpc.ListRequest")
	proto.RegisterType((*DeleteRequest)(nil), "snipsRpc.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "snipsRpc.DeleteResponse")
	proto.RegisterType((*CreateResponse)(nil), "snipsRpc.CreateResponse")
	proto.RegisterType((*Snip)(nil), "snipsRpc.Snip")
	proto.RegisterType((*TypeMatchResponse)(nil), "snipsRpc.TypeMatchResponse")
	proto.RegisterType((*MatchResponse)(nil), "snipsRpc.MatchResponse")
	proto.RegisterType((*ListResponse)(nil), "snipsRpc.ListResponse")
	proto.RegisterEnum("snipsRpc.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SnipsRpc service

type SnipsRpcClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type snipsRpcClient struct {
	cc *grpc.ClientConn
}

func NewSnipsRpcClient(cc *grpc.ClientConn) SnipsRpcClient {
	return &snipsRpcClient{cc}
}

func (c *snipsRpcClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Patch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Clone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Tag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error) {
	out := new(UnTagResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/UnTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snipsRpcClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/snipsRpc.SnipsRpc/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SnipsRpc service

type SnipsRpcServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	UnTag(context.Context, *UnTagRequest) (*UnTagResponse, error)
	Get(context.Context, *GetRequest) (*ListResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterSnipsRpcServer(s *grpc.Server, srv SnipsRpcServer) {
	s.RegisterService(&_SnipsRpc_serviceDesc, srv)
}

func _SnipsRpc_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_UnTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).UnTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/UnTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).UnTag(ctx, req.(*UnTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnipsRpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnipsRpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snipsRpc.SnipsRpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnipsRpcServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnipsRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snipsRpc.SnipsRpc",
	HandlerType: (*SnipsRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SnipsRpc_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SnipsRpc_Update_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _SnipsRpc_Rename_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _SnipsRpc_Patch_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _SnipsRpc_Clone_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _SnipsRpc_Tag_Handler,
		},
		{
			MethodName: "UnTag",
			Handler:    _SnipsRpc_UnTag_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SnipsRpc_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SnipsRpc_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SnipsRpc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snipsRpc.proto",
}

func init() { proto.RegisterFile("snipsRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 993 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0xf7, 0xf9, 0xce, 0x8e, 0x33, 0x67, 0xbb, 0xce, 0x92, 0xb6, 0x27, 0x83, 0x90, 0xb5, 0xea,
	0x43, 0x54, 0x55, 0x96, 0x9a, 0x14, 0x10, 0x48, 0x7d, 0xa9, 0x4b, 0x22, 0x24, 0x8a, 0xa2, 0x4b,
	0x8a, 0x2a, 0x9e, 0x38, 0xce, 0x5b, 0x67, 0x95, 0xf3, 0xee, 0xb1, 0xb7, 0x4e, 0x29, 0xef, 0x7c,
	0x08, 0xbe, 0x1d, 0x1f, 0x80, 0x0f, 0x81, 0x66, 0xef, 0xdf, 0x9e, 0x1d, 0x19, 0x5b, 0x82, 0xa7,
	0xdc, 0xfc, 0x66, 0xe6, 0x37, 0xb3, 0xb3, 0xe3, 0x99, 0x0d, 0x0c, 0x33, 0xc1, 0xd3, 0x2c, 0x4c,
	0xe3, 0x69, 0xaa, 0xa4, 0x96, 0xa4, 0x57, 0xca, 0xf4, 0x0f, 0x07, 0x06, 0x33, 0xc5, 0x22, 0xcd,
	0x42, 0xf6, 0xeb, 0x8a, 0x65, 0x9a, 0x10, 0xf0, 0x50, 0x1b, 0x38, 0x13, 0xe7, 0xe4, 0x30, 0x34,
	0xdf, 0x64, 0x0c, 0xbd, 0xf7, 0xab, 0x24, 0xf9, 0x21, 0x5a, 0xb2, 0xa0, 0x6d, 0xf0, 0x4a, 0x26,
	0x13, 0xf0, 0xe7, 0x2c, 0x8b, 0x15, 0x4f, 0x35, 0x97, 0x22, 0x70, 0x8d, 0xda, 0x86, 0x08, 0x05,
	0x4f, 0xc9, 0x84, 0x05, 0xde, 0xc4, 0x39, 0x19, 0x9e, 0x0e, 0xa7, 0x55, 0x32, 0xa1, 0x4c, 0x58,
	0x68, 0x74, 0xf4, 0x0d, 0x0c, 0xde, 0xa6, 0x73, 0x2b, 0x0d, 0x3b, 0xa4, 0xb3, 0x3d, 0x64, 0x7b,
	0x23, 0x24, 0xd2, 0x85, 0x4c, 0x44, 0xcb, 0x5d, 0xe9, 0x04, 0xfb, 0x70, 0xde, 0x3c, 0xa0, 0x0d,
	0xd1, 0x9f, 0x61, 0x58, 0xd2, 0x65, 0xa9, 0x14, 0x19, 0xc3, 0x33, 0x55, 0x55, 0xf2, 0xed, 0x33,
	0x5d, 0x09, 0x9e, 0x16, 0x55, 0x7b, 0x0a, 0x23, 0xa9, 0xf8, 0x82, 0x8b, 0x28, 0x59, 0x23, 0xdf,
	0xc0, 0xe9, 0x3b, 0xe8, 0x5f, 0x46, 0x3a, 0xbe, 0xd9, 0x25, 0xdf, 0x47, 0xd0, 0xd5, 0x91, 0x5a,
	0x30, 0x5d, 0x14, 0xbb, 0x90, 0xc8, 0x31, 0x74, 0x52, 0xe4, 0x28, 0x82, 0xe4, 0x02, 0x3d, 0x83,
	0x41, 0xc1, 0xbc, 0x7b, 0xea, 0xf4, 0x05, 0x0c, 0xcb, 0xeb, 0xd8, 0xc3, 0xeb, 0x06, 0xfa, 0xb3,
	0x44, 0x8a, 0xff, 0xa6, 0xe8, 0xe8, 0xbd, 0xca, 0x98, 0xc2, 0xb2, 0x17, 0x07, 0xad, 0x64, 0x3c,
	0x54, 0x11, 0x69, 0x8f, 0xf4, 0xde, 0x01, 0x5c, 0x47, 0x8b, 0x5d, 0x92, 0x23, 0xe0, 0xe9, 0x68,
	0x91, 0x05, 0xed, 0x89, 0x8b, 0xbf, 0x01, 0xfc, 0xde, 0x9a, 0xce, 0x73, 0xf0, 0x0d, 0xf3, 0x1e,
	0xc9, 0xfc, 0x04, 0xfd, 0xb7, 0xe2, 0x7f, 0x4a, 0xe7, 0x0c, 0x06, 0x05, 0xf7, 0x1e, 0x09, 0xbd,
	0x06, 0xb8, 0x60, 0x7a, 0x97, 0x74, 0xec, 0xd0, 0xed, 0xb5, 0xd0, 0x7f, 0x3a, 0xe0, 0x7f, 0xcf,
	0x33, 0x9b, 0xa7, 0xb2, 0x75, 0x9a, 0xb6, 0xd8, 0xaf, 0x19, 0x17, 0x71, 0x4e, 0xe2, 0x86, 0xb9,
	0x60, 0xe6, 0x0f, 0xff, 0x3d, 0x3f, 0x94, 0x1b, 0x9a, 0xef, 0xaa, 0x00, 0x9e, 0x55, 0x80, 0xcf,
	0x01, 0xd8, 0x6f, 0x9a, 0x89, 0x8c, 0x4b, 0x91, 0x05, 0x1d, 0xa3, 0xb1, 0x10, 0x32, 0x02, 0x37,
	0x4a, 0x92, 0xa0, 0x3b, 0x71, 0x4e, 0x7a, 0x21, 0x7e, 0xd2, 0x0b, 0x18, 0xbc, 0x66, 0x09, 0xdb,
	0x6d, 0xc6, 0x6c, 0x3b, 0xe4, 0x33, 0x18, 0x96, 0x44, 0x45, 0x81, 0xb7, 0x30, 0x51, 0x09, 0xc3,
	0x72, 0xc2, 0xee, 0x31, 0x3c, 0xbe, 0x86, 0x43, 0xfd, 0x31, 0x65, 0x6f, 0xaa, 0x1f, 0xb4, 0x7f,
	0xfa, 0x69, 0x6d, 0x78, 0x5d, 0xaa, 0x4a, 0xce, 0xb0, 0xb6, 0xa6, 0x7f, 0x7b, 0xe0, 0x21, 0x13,
	0x0e, 0x0a, 0xf4, 0xf8, 0x6e, 0x5e, 0xe4, 0x54, 0x48, 0x5b, 0xc7, 0xf9, 0x96, 0xbe, 0xc2, 0x6b,
	0x30, 0xb8, 0x97, 0xaf, 0x06, 0x83, 0x7d, 0x06, 0x87, 0x55, 0xd1, 0x83, 0x8e, 0x51, 0xd4, 0x40,
	0xb5, 0x4c, 0xba, 0xd6, 0x32, 0x99, 0x80, 0x8f, 0x7f, 0x7f, 0x64, 0xca, 0xf8, 0x1c, 0x98, 0x7b,
	0xb6, 0xa1, 0xea, 0xba, 0x7b, 0xd6, 0x75, 0x07, 0x70, 0x10, 0x9b, 0x2a, 0xce, 0x83, 0x43, 0xe3,
	0x51, 0x8a, 0xeb, 0xdb, 0x00, 0x36, 0x17, 0xd0, 0x14, 0x48, 0x8c, 0xd3, 0x62, 0x7e, 0xae, 0xe4,
	0xb2, 0x1a, 0x39, 0xbe, 0x31, 0xbc, 0x47, 0x43, 0x9e, 0xc1, 0x51, 0x8d, 0x96, 0x79, 0xf6, 0x4d,
	0xd4, 0x4d, 0x05, 0x66, 0x96, 0x2a, 0x7e, 0x17, 0x69, 0x16, 0x0c, 0x4c, 0xb3, 0x95, 0x22, 0xb6,
	0xa8, 0x31, 0x9f, 0xc9, 0x95, 0xd0, 0xc1, 0xd0, 0x10, 0x58, 0x08, 0xd6, 0x5a, 0xad, 0x44, 0xae,
	0x7d, 0x60, 0xb4, 0x95, 0x4c, 0x28, 0xf4, 0xb1, 0x24, 0xb3, 0x1b, 0x16, 0xdf, 0x66, 0xab, 0x65,
	0x30, 0x32, 0xd9, 0x36, 0x30, 0xf2, 0x04, 0x06, 0x28, 0x5f, 0xf1, 0x85, 0x88, 0xf4, 0x4a, 0xb1,
	0xe0, 0xc8, 0x18, 0x35, 0x41, 0x73, 0x43, 0x22, 0x56, 0x1f, 0x53, 0xac, 0x1d, 0x31, 0x19, 0xd6,
	0x00, 0x6a, 0xa3, 0x64, 0x21, 0x15, 0xd7, 0x37, 0xcb, 0xe0, 0x93, 0xfc, 0xfe, 0x2a, 0xa0, 0x5a,
	0xdd, 0xc7, 0x5b, 0x56, 0xf7, 0x39, 0x1c, 0x6d, 0xb4, 0x23, 0x79, 0x0e, 0x07, 0x4b, 0x04, 0x58,
	0x16, 0x38, 0x13, 0xf7, 0xc4, 0x3f, 0x7d, 0x5c, 0xfb, 0x36, 0x1b, 0xb7, 0xb4, 0xa3, 0x33, 0x18,
	0x34, 0x39, 0x1a, 0xad, 0xe5, 0xac, 0xb7, 0x16, 0x4e, 0x8f, 0x58, 0xaa, 0x7a, 0x7a, 0xa0, 0x40,
	0x35, 0xf4, 0xf3, 0xf1, 0x53, 0x70, 0x3c, 0x81, 0x0e, 0xd7, 0x6c, 0x59, 0x66, 0xb1, 0xfe, 0x5b,
	0xcb, 0x95, 0xc8, 0xa5, 0xa5, 0x8e, 0x92, 0x92, 0xcb, 0x08, 0xf5, 0x7c, 0x72, 0xef, 0x9b, 0x4f,
	0x5e, 0x3d, 0x9f, 0x9e, 0x7e, 0x09, 0x1e, 0x16, 0x84, 0xf4, 0xa1, 0x77, 0xa5, 0x23, 0x31, 0x8f,
	0xd4, 0x7c, 0xd4, 0x22, 0x0f, 0xc0, 0xbf, 0x54, 0xec, 0x3d, 0x53, 0x4c, 0xc4, 0x2c, 0x1b, 0x39,
	0x08, 0x7c, 0x2b, 0xee, 0xb8, 0x92, 0x62, 0xc9, 0x84, 0x1e, 0xb5, 0x4f, 0xff, 0xf2, 0xa0, 0x77,
	0x55, 0x24, 0x44, 0x5e, 0x42, 0x37, 0x9f, 0x13, 0xc4, 0xaa, 0x55, 0xe3, 0x6d, 0x36, 0x0e, 0x36,
	0x15, 0xf9, 0x39, 0x69, 0x0b, 0xdd, 0xf3, 0x95, 0x6d, 0xbb, 0x37, 0xde, 0x54, 0xb6, 0x7b, 0x73,
	0xbb, 0xe7, 0xee, 0xf9, 0x13, 0xc7, 0x76, 0x6f, 0xbc, 0xa1, 0x6c, 0xf7, 0xe6, 0x6b, 0x88, 0xb6,
	0xc8, 0x37, 0xd0, 0x31, 0xaf, 0x0c, 0xf2, 0xa8, 0x36, 0xb2, 0x1f, 0x34, 0xe3, 0xc7, 0x1b, 0xb8,
	0xed, 0x6b, 0x96, 0xb9, 0xed, 0x6b, 0xbf, 0x23, 0x6c, 0xdf, 0xc6, 0xd6, 0xa7, 0x2d, 0xf2, 0x02,
	0xdc, 0xeb, 0x68, 0x41, 0x8e, 0xad, 0xd1, 0x58, 0xed, 0xd4, 0xf1, 0xc3, 0x35, 0xd4, 0x8e, 0x68,
	0x16, 0xa4, 0x1d, 0xd1, 0xde, 0xc6, 0x76, 0xc4, 0xc6, 0x26, 0xa5, 0x2d, 0xf2, 0x05, 0xb8, 0x17,
	0xf8, 0xd8, 0xaa, 0x2d, 0xea, 0xb5, 0x39, 0xb6, 0xf8, 0xec, 0x36, 0xa4, 0x2d, 0xf2, 0x15, 0x78,
	0x88, 0x90, 0x87, 0xeb, 0x16, 0xff, 0xe6, 0xf8, 0x12, 0xba, 0xf9, 0xb2, 0xb1, 0x2f, 0xa6, 0xb1,
	0xc7, 0xec, 0x8b, 0x69, 0xee, 0x25, 0xda, 0x7a, 0x45, 0xe1, 0x98, 0xcb, 0xe9, 0xed, 0x87, 0xdb,
	0x69, 0xc6, 0xd4, 0x1d, 0x8f, 0x59, 0x6e, 0xfb, 0xaa, 0xea, 0xbb, 0x4b, 0xe7, 0x97, 0xae, 0xf9,
	0xaf, 0xe0, 0xec, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x43, 0x96, 0x5e, 0x27, 0x0c, 0x00,
	0x00,
}
