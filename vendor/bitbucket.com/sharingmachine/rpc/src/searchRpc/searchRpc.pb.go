// Code generated by protoc-gen-go.
// source: searchRpc.proto
// DO NOT EDIT!

/*
Package searchRpc is a generated protocol buffer package.

It is generated from these files:
	searchRpc.proto

It has these top-level messages:
	AlphaRequest
	AlphaResponse
	AlphaResult
*/
package searchRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Role int32

const (
	Role_Standard    Role = 0
	Role_Preferences Role = 1
	Role_Environment Role = 2
	Role_Message     Role = 3
)

var Role_name = map[int32]string{
	0: "Standard",
	1: "Preferences",
	2: "Environment",
	3: "Message",
}
var Role_value = map[string]int32{
	"Standard":    0,
	"Preferences": 1,
	"Environment": 2,
	"Message":     3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AlphaRequest struct {
	Term      string `protobuf:"bytes,1,opt,name=term" json:"term,omitempty"`
	Extension string `protobuf:"bytes,2,opt,name=extension" json:"extension,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	All       bool   `protobuf:"varint,4,opt,name=all" json:"all,omitempty"`
	Global    bool   `protobuf:"varint,5,opt,name=global" json:"global,omitempty"`
}

func (m *AlphaRequest) Reset()                    { *m = AlphaRequest{} }
func (m *AlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*AlphaRequest) ProtoMessage()               {}
func (*AlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AlphaRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *AlphaRequest) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *AlphaRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AlphaRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *AlphaRequest) GetGlobal() bool {
	if m != nil {
		return m.Global
	}
	return false
}

type AlphaResponse struct {
	Results []*AlphaResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Total   int64          `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Took    int64          `protobuf:"varint,3,opt,name=took" json:"took,omitempty"`
}

func (m *AlphaResponse) Reset()                    { *m = AlphaResponse{} }
func (m *AlphaResponse) String() string            { return proto.CompactTextString(m) }
func (*AlphaResponse) ProtoMessage()               {}
func (*AlphaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AlphaResponse) GetResults() []*AlphaResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AlphaResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AlphaResponse) GetTook() int64 {
	if m != nil {
		return m.Took
	}
	return 0
}

type AlphaResult struct {
	SnipId             string            `protobuf:"bytes,1,opt,name=snipId" json:"snipId,omitempty"`
	Username           string            `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Name               string            `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	FullName           string            `protobuf:"bytes,4,opt,name=fullName" json:"fullName,omitempty"`
	PouchName          string            `protobuf:"bytes,18,opt,name=pouchName" json:"pouchName,omitempty"`
	PouchId            string            `protobuf:"bytes,19,opt,name=pouchId" json:"pouchId,omitempty"`
	Extension          string            `protobuf:"bytes,5,opt,name=extension" json:"extension,omitempty"`
	Snip               string            `protobuf:"bytes,6,opt,name=snip" json:"snip,omitempty"`
	SnipVersion        int64             `protobuf:"varint,7,opt,name=snipVersion" json:"snipVersion,omitempty"`
	Created            int64             `protobuf:"varint,8,opt,name=created" json:"created,omitempty"`
	Tags               []string          `protobuf:"bytes,9,rep,name=tags" json:"tags,omitempty"`
	Highlights         map[string]string `protobuf:"bytes,10,rep,name=highlights" json:"highlights,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClonedFromFullName string            `protobuf:"bytes,11,opt,name=clonedFromFullName" json:"clonedFromFullName,omitempty"`
	ClonedFromVersion  int64             `protobuf:"varint,12,opt,name=clonedFromVersion" json:"clonedFromVersion,omitempty"`
	RunCount           int64             `protobuf:"varint,13,opt,name=runCount" json:"runCount,omitempty"`
	CloneCount         int64             `protobuf:"varint,14,opt,name=cloneCount" json:"cloneCount,omitempty"`
	Description        string            `protobuf:"bytes,15,opt,name=description" json:"description,omitempty"`
	Private            bool              `protobuf:"varint,16,opt,name=private" json:"private,omitempty"`
	Role               Role              `protobuf:"varint,17,opt,name=role,enum=searchRpc.Role" json:"role,omitempty"`
}

func (m *AlphaResult) Reset()                    { *m = AlphaResult{} }
func (m *AlphaResult) String() string            { return proto.CompactTextString(m) }
func (*AlphaResult) ProtoMessage()               {}
func (*AlphaResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AlphaResult) GetSnipId() string {
	if m != nil {
		return m.SnipId
	}
	return ""
}

func (m *AlphaResult) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AlphaResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlphaResult) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *AlphaResult) GetPouchName() string {
	if m != nil {
		return m.PouchName
	}
	return ""
}

func (m *AlphaResult) GetPouchId() string {
	if m != nil {
		return m.PouchId
	}
	return ""
}

func (m *AlphaResult) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *AlphaResult) GetSnip() string {
	if m != nil {
		return m.Snip
	}
	return ""
}

func (m *AlphaResult) GetSnipVersion() int64 {
	if m != nil {
		return m.SnipVersion
	}
	return 0
}

func (m *AlphaResult) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *AlphaResult) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AlphaResult) GetHighlights() map[string]string {
	if m != nil {
		return m.Highlights
	}
	return nil
}

func (m *AlphaResult) GetClonedFromFullName() string {
	if m != nil {
		return m.ClonedFromFullName
	}
	return ""
}

func (m *AlphaResult) GetClonedFromVersion() int64 {
	if m != nil {
		return m.ClonedFromVersion
	}
	return 0
}

func (m *AlphaResult) GetRunCount() int64 {
	if m != nil {
		return m.RunCount
	}
	return 0
}

func (m *AlphaResult) GetCloneCount() int64 {
	if m != nil {
		return m.CloneCount
	}
	return 0
}

func (m *AlphaResult) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AlphaResult) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *AlphaResult) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

func init() {
	proto.RegisterType((*AlphaRequest)(nil), "searchRpc.AlphaRequest")
	proto.RegisterType((*AlphaResponse)(nil), "searchRpc.AlphaResponse")
	proto.RegisterType((*AlphaResult)(nil), "searchRpc.AlphaResult")
	proto.RegisterEnum("searchRpc.Role", Role_name, Role_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SearchRpc service

type SearchRpcClient interface {
	Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error)
}

type searchRpcClient struct {
	cc *grpc.ClientConn
}

func NewSearchRpcClient(cc *grpc.ClientConn) SearchRpcClient {
	return &searchRpcClient{cc}
}

func (c *searchRpcClient) Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error) {
	out := new(AlphaResponse)
	err := grpc.Invoke(ctx, "/searchRpc.SearchRpc/Alpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SearchRpc service

type SearchRpcServer interface {
	Alpha(context.Context, *AlphaRequest) (*AlphaResponse, error)
}

func RegisterSearchRpcServer(s *grpc.Server, srv SearchRpcServer) {
	s.RegisterService(&_SearchRpc_serviceDesc, srv)
}

func _SearchRpc_Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchRpcServer).Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/searchRpc.SearchRpc/Alpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchRpcServer).Alpha(ctx, req.(*AlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "searchRpc.SearchRpc",
	HandlerType: (*SearchRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alpha",
			Handler:    _SearchRpc_Alpha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "searchRpc.proto",
}

func init() { proto.RegisterFile("searchRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x54, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x5d, 0x9a, 0x74, 0x6d, 0x6f, 0xb7, 0xb5, 0x33, 0x30, 0xac, 0x09, 0xa1, 0xaa, 0x20, 0x54,
	0x21, 0x54, 0xa1, 0xf1, 0x82, 0x10, 0x3c, 0xb0, 0x69, 0x13, 0x7b, 0x00, 0x4d, 0x99, 0xc4, 0xbb,
	0x97, 0xdc, 0xb5, 0x51, 0x5d, 0x3b, 0xd8, 0x4e, 0x61, 0x3f, 0xc0, 0xdf, 0xf0, 0x8f, 0xc8, 0x37,
	0x49, 0x9b, 0x6d, 0x7d, 0xea, 0x3d, 0xe7, 0xdc, 0xd4, 0xe7, 0x9e, 0xeb, 0x04, 0x06, 0x16, 0x85,
	0x49, 0xe6, 0x71, 0x9e, 0x4c, 0x73, 0xa3, 0x9d, 0x66, 0xbd, 0x35, 0x31, 0xfe, 0x1b, 0xc0, 0xde,
	0x57, 0x99, 0xcf, 0x45, 0x8c, 0xbf, 0x0a, 0xb4, 0x8e, 0x31, 0x88, 0x1c, 0x9a, 0x25, 0x0f, 0x46,
	0xc1, 0xa4, 0x17, 0x53, 0xcd, 0x5e, 0x40, 0x0f, 0xff, 0x38, 0x54, 0x36, 0xd3, 0x8a, 0xb7, 0x48,
	0xd8, 0x10, 0xec, 0x18, 0xba, 0x85, 0x45, 0xa3, 0xc4, 0x12, 0x79, 0x48, 0xe2, 0x1a, 0xb3, 0x21,
	0x84, 0x42, 0x4a, 0x1e, 0x8d, 0x82, 0x49, 0x37, 0xf6, 0x25, 0x3b, 0x82, 0xdd, 0x99, 0xd4, 0x37,
	0x42, 0xf2, 0x36, 0x91, 0x15, 0x1a, 0x2f, 0x60, 0xbf, 0xf2, 0x61, 0x73, 0xad, 0x2c, 0xb2, 0xf7,
	0xd0, 0x31, 0x68, 0x0b, 0xe9, 0x2c, 0x0f, 0x46, 0xe1, 0xa4, 0x7f, 0x72, 0x34, 0xdd, 0xcc, 0x51,
	0xb7, 0x16, 0xd2, 0xc5, 0x75, 0x1b, 0x7b, 0x0a, 0x6d, 0xa7, 0x9d, 0x90, 0x64, 0x31, 0x8c, 0x4b,
	0x40, 0x03, 0x69, 0xbd, 0x20, 0x6b, 0x61, 0x4c, 0xf5, 0xf8, 0x5f, 0x1b, 0xfa, 0x8d, 0xbf, 0xf0,
	0xa6, 0xac, 0xca, 0xf2, 0xcb, 0xb4, 0x1a, 0xbb, 0x42, 0xf7, 0x46, 0x6b, 0x3d, 0x18, 0x8d, 0x41,
	0xd4, 0x18, 0x99, 0x6a, 0xdf, 0x7f, 0x5b, 0x48, 0xf9, 0xc3, 0xf3, 0x51, 0xd9, 0x5f, 0x63, 0x1f,
	0x62, 0xae, 0x8b, 0x64, 0x4e, 0x22, 0x2b, 0x43, 0x5c, 0x13, 0x8c, 0x43, 0x87, 0xc0, 0x65, 0xca,
	0x9f, 0x90, 0x56, 0xc3, 0xfb, 0xe1, 0xb7, 0x1f, 0x86, 0xcf, 0x20, 0xf2, 0x5e, 0xf9, 0x6e, 0xe9,
	0xc2, 0xd7, 0x6c, 0x04, 0x7d, 0xff, 0xfb, 0x13, 0x0d, 0x3d, 0xd3, 0xa1, 0xc1, 0x9b, 0x94, 0x3f,
	0x2d, 0x31, 0x28, 0x1c, 0xa6, 0xbc, 0x4b, 0x6a, 0x0d, 0x29, 0x2d, 0x31, 0xb3, 0xbc, 0x37, 0x0a,
	0x69, 0xfd, 0x62, 0x66, 0xd9, 0x05, 0xc0, 0x3c, 0x9b, 0xcd, 0x65, 0x36, 0x9b, 0x3b, 0xcb, 0x81,
	0x96, 0xf1, 0x66, 0xfb, 0x32, 0xa6, 0xdf, 0xd6, 0x8d, 0xe7, 0xca, 0x99, 0xbb, 0xb8, 0xf1, 0x24,
	0x9b, 0x02, 0x4b, 0xa4, 0x56, 0x98, 0x5e, 0x18, 0xbd, 0xbc, 0xa8, 0x73, 0xea, 0x93, 0xf3, 0x2d,
	0x0a, 0x7b, 0x07, 0x87, 0x1b, 0xb6, 0x9e, 0x66, 0x8f, 0xfc, 0x3e, 0x16, 0x7c, 0xf6, 0xa6, 0x50,
	0x67, 0xba, 0x50, 0x8e, 0xef, 0x53, 0xd3, 0x1a, 0xb3, 0x97, 0x00, 0xf4, 0x40, 0xa9, 0x1e, 0x90,
	0xda, 0x60, 0x7c, 0x62, 0x29, 0xda, 0xc4, 0x64, 0xb9, 0xf3, 0x67, 0x0c, 0xc8, 0x52, 0x93, 0xa2,
	0xfd, 0x98, 0x6c, 0x25, 0x1c, 0xf2, 0x21, 0xdd, 0xdb, 0x1a, 0xb2, 0x57, 0x10, 0x19, 0x2d, 0x91,
	0x1f, 0x8e, 0x82, 0xc9, 0xc1, 0xc9, 0xa0, 0x91, 0x4b, 0xac, 0x25, 0xc6, 0x24, 0x1e, 0x7f, 0x81,
	0xc1, 0x83, 0x64, 0xfc, 0xab, 0xb1, 0xc0, 0xbb, 0xea, 0xc2, 0xf9, 0xd2, 0xdf, 0xdf, 0x95, 0x90,
	0x45, 0x7d, 0xd5, 0x4a, 0xf0, 0xa9, 0xf5, 0x31, 0x78, 0x7b, 0x06, 0x91, 0xff, 0x33, 0xb6, 0x07,
	0xdd, 0x6b, 0x27, 0x54, 0x2a, 0x4c, 0x3a, 0xdc, 0x61, 0x03, 0xe8, 0x5f, 0x19, 0xbc, 0x45, 0x83,
	0x2a, 0x41, 0x3b, 0x0c, 0x3c, 0x71, 0xae, 0x56, 0x99, 0xd1, 0x6a, 0x89, 0xca, 0x0d, 0x5b, 0xac,
	0x0f, 0x9d, 0xef, 0x68, 0xad, 0x98, 0xe1, 0x30, 0x3c, 0xb9, 0x84, 0xde, 0x75, 0xed, 0x8d, 0x7d,
	0x86, 0x36, 0xad, 0x8d, 0x3d, 0x7f, 0xbc, 0x48, 0xfa, 0x10, 0x1c, 0xf3, 0x2d, 0x1b, 0xa6, 0x37,
	0x73, 0xbc, 0x73, 0xfa, 0x1a, 0x9e, 0x65, 0x7a, 0xba, 0xf8, 0xbd, 0x98, 0x5a, 0x34, 0xab, 0x2c,
	0xc1, 0xaa, 0xf7, 0x74, 0x73, 0xc2, 0x55, 0x70, 0xb3, 0x4b, 0x5f, 0x9b, 0x0f, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x85, 0xcb, 0xf0, 0x94, 0x80, 0x04, 0x00, 0x00,
}
