// Code generated by protoc-gen-go.
// source: messageRpc.proto
// DO NOT EDIT!

/*
Package messageRpc is a generated protocol buffer package.

It is generated from these files:
	messageRpc.proto

It has these top-level messages:
	MarkMessageRequest
	MarkMessageResponse
	InboxRequest
	InboxResponse
	Message
*/
package messageRpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MarkMessageRequest struct {
	Read bool `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
}

func (m *MarkMessageRequest) Reset()                    { *m = MarkMessageRequest{} }
func (m *MarkMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MarkMessageRequest) ProtoMessage()               {}
func (*MarkMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MarkMessageRequest) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

type MarkMessageResponse struct {
}

func (m *MarkMessageResponse) Reset()                    { *m = MarkMessageResponse{} }
func (m *MarkMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MarkMessageResponse) ProtoMessage()               {}
func (*MarkMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type InboxRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Since    int64  `protobuf:"varint,2,opt,name=since" json:"since,omitempty"`
	Size     int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
}

func (m *InboxRequest) Reset()                    { *m = InboxRequest{} }
func (m *InboxRequest) String() string            { return proto.CompactTextString(m) }
func (*InboxRequest) ProtoMessage()               {}
func (*InboxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *InboxRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *InboxRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *InboxRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type InboxResponse struct {
	Items []*Message `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total int64      `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	Since int64      `protobuf:"varint,3,opt,name=since" json:"since,omitempty"`
	Size  int64      `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *InboxResponse) Reset()                    { *m = InboxResponse{} }
func (m *InboxResponse) String() string            { return proto.CompactTextString(m) }
func (*InboxResponse) ProtoMessage()               {}
func (*InboxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InboxResponse) GetItems() []*Message {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *InboxResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *InboxResponse) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *InboxResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type Message struct {
	Text    string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Read    bool   `protobuf:"varint,2,opt,name=read" json:"read,omitempty"`
	Sender  string `protobuf:"bytes,3,opt,name=sender" json:"sender,omitempty"`
	Created int64  `protobuf:"varint,4,opt,name=created" json:"created,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *Message) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Message) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func init() {
	proto.RegisterType((*MarkMessageRequest)(nil), "messageRpc.MarkMessageRequest")
	proto.RegisterType((*MarkMessageResponse)(nil), "messageRpc.MarkMessageResponse")
	proto.RegisterType((*InboxRequest)(nil), "messageRpc.InboxRequest")
	proto.RegisterType((*InboxResponse)(nil), "messageRpc.InboxResponse")
	proto.RegisterType((*Message)(nil), "messageRpc.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageRpc service

type MessageRpcClient interface {
	Inbox(ctx context.Context, in *InboxRequest, opts ...grpc.CallOption) (*InboxResponse, error)
	MarkMessage(ctx context.Context, in *MarkMessageRequest, opts ...grpc.CallOption) (*MarkMessageResponse, error)
}

type messageRpcClient struct {
	cc *grpc.ClientConn
}

func NewMessageRpcClient(cc *grpc.ClientConn) MessageRpcClient {
	return &messageRpcClient{cc}
}

func (c *messageRpcClient) Inbox(ctx context.Context, in *InboxRequest, opts ...grpc.CallOption) (*InboxResponse, error) {
	out := new(InboxResponse)
	err := grpc.Invoke(ctx, "/messageRpc.MessageRpc/Inbox", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageRpcClient) MarkMessage(ctx context.Context, in *MarkMessageRequest, opts ...grpc.CallOption) (*MarkMessageResponse, error) {
	out := new(MarkMessageResponse)
	err := grpc.Invoke(ctx, "/messageRpc.MessageRpc/MarkMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageRpc service

type MessageRpcServer interface {
	Inbox(context.Context, *InboxRequest) (*InboxResponse, error)
	MarkMessage(context.Context, *MarkMessageRequest) (*MarkMessageResponse, error)
}

func RegisterMessageRpcServer(s *grpc.Server, srv MessageRpcServer) {
	s.RegisterService(&_MessageRpc_serviceDesc, srv)
}

func _MessageRpc_Inbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).Inbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageRpc.MessageRpc/Inbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).Inbox(ctx, req.(*InboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageRpc_MarkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageRpcServer).MarkMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageRpc.MessageRpc/MarkMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageRpcServer).MarkMessage(ctx, req.(*MarkMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messageRpc.MessageRpc",
	HandlerType: (*MessageRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inbox",
			Handler:    _MessageRpc_Inbox_Handler,
		},
		{
			MethodName: "MarkMessage",
			Handler:    _MessageRpc_MarkMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messageRpc.proto",
}

func init() { proto.RegisterFile("messageRpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0xcb, 0x6e, 0xea, 0x30,
	0x10, 0xbd, 0x21, 0x3c, 0x87, 0x5b, 0xa9, 0x1a, 0xfa, 0x48, 0x59, 0xb4, 0x28, 0xab, 0x74, 0x93,
	0x05, 0xdd, 0x77, 0xc1, 0xae, 0x0b, 0x24, 0x64, 0xf5, 0x07, 0x8c, 0x19, 0x55, 0x11, 0x25, 0x4e,
	0x3d, 0xa6, 0x45, 0x7c, 0x4c, 0xbf, 0xb5, 0xc2, 0xd8, 0x10, 0x54, 0xba, 0x9b, 0x33, 0xaf, 0xe3,
	0x73, 0xc6, 0x70, 0xb9, 0x22, 0x66, 0xf9, 0x46, 0xa2, 0x52, 0x79, 0x65, 0xb4, 0xd5, 0x08, 0xc7,
	0x4c, 0x9a, 0x01, 0x4e, 0xa5, 0x59, 0x4e, 0x7d, 0x86, 0x3e, 0xd6, 0xc4, 0x16, 0x11, 0x9a, 0x86,
	0xe4, 0x22, 0x89, 0x46, 0x51, 0xd6, 0x15, 0x2e, 0x4e, 0xaf, 0x61, 0x70, 0xd2, 0xc9, 0x95, 0x2e,
	0x99, 0xd2, 0x57, 0xf8, 0xff, 0x52, 0xce, 0xf5, 0x26, 0x8c, 0x0e, 0xa1, 0xbb, 0x66, 0x32, 0xa5,
	0x5c, 0x91, 0x1b, 0xef, 0x89, 0x03, 0xc6, 0x2b, 0x68, 0x71, 0x51, 0x2a, 0x4a, 0x1a, 0xa3, 0x28,
	0x8b, 0xc5, 0x1e, 0xec, 0xc8, 0xb8, 0xd8, 0x52, 0x12, 0xbb, 0xa4, 0x8b, 0xd3, 0x2d, 0x5c, 0xf8,
	0xad, 0x7b, 0x1a, 0x7c, 0x84, 0x56, 0x61, 0x69, 0xc5, 0x49, 0x34, 0x8a, 0xb3, 0xfe, 0x78, 0x90,
	0xd7, 0x54, 0x85, 0x27, 0xed, 0x3b, 0x76, 0x2c, 0x56, 0x5b, 0xf9, 0x1e, 0x58, 0x1c, 0x38, 0x72,
	0xc7, 0xe7, 0xb8, 0x9b, 0x35, 0x6e, 0x05, 0x1d, 0xbf, 0x71, 0x57, 0xb6, 0xb4, 0xb1, 0x5e, 0x88,
	0x8b, 0x0f, 0xde, 0x34, 0x8e, 0xde, 0xe0, 0x0d, 0xb4, 0x99, 0xca, 0x05, 0x19, 0xb7, 0xbd, 0x27,
	0x3c, 0xc2, 0x04, 0x3a, 0xca, 0x90, 0xb4, 0xb4, 0xf0, 0x0c, 0x01, 0x8e, 0xbf, 0x23, 0x80, 0xe9,
	0x41, 0x02, 0x3e, 0x43, 0xcb, 0xe9, 0xc5, 0xa4, 0x2e, 0xac, 0x6e, 0xec, 0xf0, 0xee, 0x4c, 0xc5,
	0xdf, 0xe0, 0x1f, 0xce, 0xa0, 0x5f, 0x3b, 0x0e, 0xde, 0x9f, 0xd8, 0xf3, 0xeb, 0xbe, 0xc3, 0x87,
	0x3f, 0xeb, 0x61, 0xe3, 0x24, 0x83, 0xdb, 0x42, 0xe7, 0xcb, 0xaf, 0x65, 0xce, 0x64, 0x3e, 0x0b,
	0x45, 0x61, 0x84, 0x27, 0x7d, 0xdf, 0xcd, 0xa2, 0x52, 0xb3, 0x68, 0xde, 0x76, 0xbf, 0xea, 0xe9,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x4e, 0x27, 0x64, 0x4f, 0x69, 0x02, 0x00, 0x00,
}
