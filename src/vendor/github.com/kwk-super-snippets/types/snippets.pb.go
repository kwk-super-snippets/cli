// Code generated by protoc-gen-gogo.
// source: snippets.proto
// DO NOT EDIT!

/*
	Package types is a generated protocol buffer package.

	It is generated from these files:
		snippets.proto
		users.proto

	It has these top-level messages:
		UseContext
		LogUseResponse
		AlphaRequest
		AlphaResponse
		TypeAheadRequest
		TypeAheadResponse
		TypeAheadItem
		AlphaItem
		CreatePouchRequest
		CreatePouchResponse
		RenamePouchRequest
		RenamePouchResponse
		MakePrivateRequest
		MakePrivateResponse
		DeletePouchRequest
		DeletePouchResponse
		CreateRequest
		UpdateRequest
		MoveRequest
		Alias
		SnipName
		MoveResponse
		RenameRequest
		RenameResponse
		PatchRequest
		PatchResponse
		UpdateResponse
		CloneRequest
		CloneResponse
		TagRequest
		TagResponse
		UnTagRequest
		UnTagResponse
		GetRequest
		ListRequest
		RootRequest
		RootResponse
		UserStats
		DeleteRequest
		DeleteResponse
		CreateResponse
		Pouch
		PouchStats
		Snippet
		Tags
		Dependencies
		Apps
		Runtimes
		SharedWith
		SnipStats
		TypeMatchResponse
		MatchResponse
		ListResponse
		ResetRequest
		SignInResponse
		SignUpResponse
		ResetResponse
		ChangeRequest
		ChangeResponse
		SignUpRequest
		SignInRequest
		ListUsersRequest
		ListUsersResponse
		User
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UseStatus int32

const (
	UseStatus_Unknown UseStatus = 0
	UseStatus_Success UseStatus = 1
	UseStatus_Fail    UseStatus = 2
)

var UseStatus_name = map[int32]string{
	0: "Unknown",
	1: "Success",
	2: "Fail",
}
var UseStatus_value = map[string]int32{
	"Unknown": 0,
	"Success": 1,
	"Fail":    2,
}

func (x UseStatus) String() string {
	return proto.EnumName(UseStatus_name, int32(x))
}
func (UseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{0} }

type UseType int32

const (
	UseType_UnknownUse UseType = 0
	UseType_View       UseType = 1
	UseType_Run        UseType = 2
	UseType_Clone      UseType = 3
)

var UseType_name = map[int32]string{
	0: "UnknownUse",
	1: "View",
	2: "Run",
	3: "Clone",
}
var UseType_value = map[string]int32{
	"UnknownUse": 0,
	"View":       1,
	"Run":        2,
	"Clone":      3,
}

func (x UseType) String() string {
	return proto.EnumName(UseType_name, int32(x))
}
func (UseType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{1} }

type Role int32

const (
	Role_Standard    Role = 0
	Role_Preferences Role = 1
	Role_Environment Role = 2
	Role_Message     Role = 3
)

var Role_name = map[int32]string{
	0: "Standard",
	1: "Preferences",
	2: "Environment",
	3: "Message",
}
var Role_value = map[string]int32{
	"Standard":    0,
	"Preferences": 1,
	"Environment": 2,
	"Message":     3,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}
func (Role) EnumDescriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{2} }

type PouchType int32

const (
	PouchType_Physical PouchType = 0
	PouchType_Virtual  PouchType = 1
	PouchType_Personal PouchType = 2
	PouchType_Promoted PouchType = 3
)

var PouchType_name = map[int32]string{
	0: "Physical",
	1: "Virtual",
	2: "Personal",
	3: "Promoted",
}
var PouchType_value = map[string]int32{
	"Physical": 0,
	"Virtual":  1,
	"Personal": 2,
	"Promoted": 3,
}

func (x PouchType) String() string {
	return proto.EnumName(PouchType_name, int32(x))
}
func (PouchType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{3} }

type UseContext struct {
	Alias       *Alias    `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Type        UseType   `protobuf:"varint,2,opt,name=type,proto3,enum=types.UseType" json:"type,omitempty"`
	Status      UseStatus `protobuf:"varint,3,opt,name=status,proto3,enum=types.UseStatus" json:"status,omitempty"`
	Preview     string    `protobuf:"bytes,4,opt,name=preview,proto3" json:"preview,omitempty"`
	Time        int64     `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	Level       int64     `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Runner      string    `protobuf:"bytes,7,opt,name=runner,proto3" json:"runner,omitempty"`
	CallerAlias string    `protobuf:"bytes,8,opt,name=callerAlias,proto3" json:"callerAlias,omitempty"`
	Os          string    `protobuf:"bytes,9,opt,name=os,proto3" json:"os,omitempty"`
}

func (m *UseContext) Reset()                    { *m = UseContext{} }
func (m *UseContext) String() string            { return proto.CompactTextString(m) }
func (*UseContext) ProtoMessage()               {}
func (*UseContext) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{0} }

func (m *UseContext) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *UseContext) GetType() UseType {
	if m != nil {
		return m.Type
	}
	return UseType_UnknownUse
}

func (m *UseContext) GetStatus() UseStatus {
	if m != nil {
		return m.Status
	}
	return UseStatus_Unknown
}

func (m *UseContext) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *UseContext) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UseContext) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *UseContext) GetRunner() string {
	if m != nil {
		return m.Runner
	}
	return ""
}

func (m *UseContext) GetCallerAlias() string {
	if m != nil {
		return m.CallerAlias
	}
	return ""
}

func (m *UseContext) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

type LogUseResponse struct {
}

func (m *LogUseResponse) Reset()                    { *m = LogUseResponse{} }
func (m *LogUseResponse) String() string            { return proto.CompactTextString(m) }
func (*LogUseResponse) ProtoMessage()               {}
func (*LogUseResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{1} }

type AlphaRequest struct {
	Term      string `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	Extension string `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	All       bool   `protobuf:"varint,4,opt,name=all,proto3" json:"all,omitempty"`
	Os        string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
}

func (m *AlphaRequest) Reset()                    { *m = AlphaRequest{} }
func (m *AlphaRequest) String() string            { return proto.CompactTextString(m) }
func (*AlphaRequest) ProtoMessage()               {}
func (*AlphaRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{2} }

func (m *AlphaRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *AlphaRequest) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *AlphaRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AlphaRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *AlphaRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// AlphaResponse is the actual method response wheras AlphaResult
// is the search result item.
type AlphaResponse struct {
	Results       []*AlphaItem `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Total         int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Took          int64        `protobuf:"varint,3,opt,name=took,proto3" json:"took,omitempty"`
	Term          string       `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`
	FallbackTitle string       `protobuf:"bytes,5,opt,name=fallbackTitle,proto3" json:"fallbackTitle,omitempty"`
}

func (m *AlphaResponse) Reset()                    { *m = AlphaResponse{} }
func (m *AlphaResponse) String() string            { return proto.CompactTextString(m) }
func (*AlphaResponse) ProtoMessage()               {}
func (*AlphaResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{3} }

func (m *AlphaResponse) GetResults() []*AlphaItem {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AlphaResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AlphaResponse) GetTook() int64 {
	if m != nil {
		return m.Took
	}
	return 0
}

func (m *AlphaResponse) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *AlphaResponse) GetFallbackTitle() string {
	if m != nil {
		return m.FallbackTitle
	}
	return ""
}

type TypeAheadRequest struct {
	Term string `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	All  bool   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	Os   string `protobuf:"bytes,3,opt,name=os,proto3" json:"os,omitempty"`
}

func (m *TypeAheadRequest) Reset()                    { *m = TypeAheadRequest{} }
func (m *TypeAheadRequest) String() string            { return proto.CompactTextString(m) }
func (*TypeAheadRequest) ProtoMessage()               {}
func (*TypeAheadRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{4} }

func (m *TypeAheadRequest) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *TypeAheadRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *TypeAheadRequest) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

type TypeAheadResponse struct {
	Results []*TypeAheadItem `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Total   int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Took    int64            `protobuf:"varint,3,opt,name=took,proto3" json:"took,omitempty"`
}

func (m *TypeAheadResponse) Reset()                    { *m = TypeAheadResponse{} }
func (m *TypeAheadResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeAheadResponse) ProtoMessage()               {}
func (*TypeAheadResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{5} }

func (m *TypeAheadResponse) GetResults() []*TypeAheadItem {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *TypeAheadResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *TypeAheadResponse) GetTook() int64 {
	if m != nil {
		return m.Took
	}
	return 0
}

type TypeAheadItem struct {
	Snippet *Snippet `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *TypeAheadItem) Reset()                    { *m = TypeAheadItem{} }
func (m *TypeAheadItem) String() string            { return proto.CompactTextString(m) }
func (*TypeAheadItem) ProtoMessage()               {}
func (*TypeAheadItem) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{6} }

func (m *TypeAheadItem) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type AlphaItem struct {
	Snippet    *Snippet          `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
	Highlights map[string]string `protobuf:"bytes,2,rep,name=highlights" json:"highlights,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AlphaItem) Reset()                    { *m = AlphaItem{} }
func (m *AlphaItem) String() string            { return proto.CompactTextString(m) }
func (*AlphaItem) ProtoMessage()               {}
func (*AlphaItem) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{7} }

func (m *AlphaItem) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

func (m *AlphaItem) GetHighlights() map[string]string {
	if m != nil {
		return m.Highlights
	}
	return nil
}

type CreatePouchRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MakePrivate bool   `protobuf:"varint,3,opt,name=makePrivate,proto3" json:"makePrivate,omitempty"`
	Encrypt     bool   `protobuf:"varint,4,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (m *CreatePouchRequest) Reset()                    { *m = CreatePouchRequest{} }
func (m *CreatePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePouchRequest) ProtoMessage()               {}
func (*CreatePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{8} }

func (m *CreatePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreatePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreatePouchRequest) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

func (m *CreatePouchRequest) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

type CreatePouchResponse struct {
	Pouch *Pouch        `protobuf:"bytes,1,opt,name=pouch" json:"pouch,omitempty"`
	Root  *RootResponse `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
}

func (m *CreatePouchResponse) Reset()                    { *m = CreatePouchResponse{} }
func (m *CreatePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*CreatePouchResponse) ProtoMessage()               {}
func (*CreatePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{9} }

func (m *CreatePouchResponse) GetPouch() *Pouch {
	if m != nil {
		return m.Pouch
	}
	return nil
}

func (m *CreatePouchResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type RenamePouchRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NewName  string `protobuf:"bytes,3,opt,name=newName,proto3" json:"newName,omitempty"`
}

func (m *RenamePouchRequest) Reset()                    { *m = RenamePouchRequest{} }
func (m *RenamePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*RenamePouchRequest) ProtoMessage()               {}
func (*RenamePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{10} }

func (m *RenamePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RenamePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenamePouchRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenamePouchResponse struct {
	OriginalName string        `protobuf:"bytes,1,opt,name=originalName,proto3" json:"originalName,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Root         *RootResponse `protobuf:"bytes,3,opt,name=root" json:"root,omitempty"`
}

func (m *RenamePouchResponse) Reset()                    { *m = RenamePouchResponse{} }
func (m *RenamePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*RenamePouchResponse) ProtoMessage()               {}
func (*RenamePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{11} }

func (m *RenamePouchResponse) GetOriginalName() string {
	if m != nil {
		return m.OriginalName
	}
	return ""
}

func (m *RenamePouchResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenamePouchResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type MakePrivateRequest struct {
	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MakePrivate bool   `protobuf:"varint,3,opt,name=makePrivate,proto3" json:"makePrivate,omitempty"`
}

func (m *MakePrivateRequest) Reset()                    { *m = MakePrivateRequest{} }
func (m *MakePrivateRequest) String() string            { return proto.CompactTextString(m) }
func (*MakePrivateRequest) ProtoMessage()               {}
func (*MakePrivateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{12} }

func (m *MakePrivateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MakePrivateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MakePrivateRequest) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

type MakePrivateResponse struct {
	IsPrivate bool          `protobuf:"varint,1,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	Root      *RootResponse `protobuf:"bytes,2,opt,name=root" json:"root,omitempty"`
}

func (m *MakePrivateResponse) Reset()                    { *m = MakePrivateResponse{} }
func (m *MakePrivateResponse) String() string            { return proto.CompactTextString(m) }
func (*MakePrivateResponse) ProtoMessage()               {}
func (*MakePrivateResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{13} }

func (m *MakePrivateResponse) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *MakePrivateResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type DeletePouchRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DeletePouchRequest) Reset()                    { *m = DeletePouchRequest{} }
func (m *DeletePouchRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePouchRequest) ProtoMessage()               {}
func (*DeletePouchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{14} }

func (m *DeletePouchRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeletePouchRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeletePouchResponse struct {
	Root *RootResponse `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (m *DeletePouchResponse) Reset()                    { *m = DeletePouchResponse{} }
func (m *DeletePouchResponse) String() string            { return proto.CompactTextString(m) }
func (*DeletePouchResponse) ProtoMessage()               {}
func (*DeletePouchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{15} }

func (m *DeletePouchResponse) GetRoot() *RootResponse {
	if m != nil {
		return m.Root
	}
	return nil
}

type CreateRequest struct {
	Content     string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Alias       *Alias `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Role        Role   `protobuf:"varint,4,opt,name=role,proto3,enum=types.Role" json:"role,omitempty"`
	Tags        *Tags  `protobuf:"bytes,5,opt,name=tags" json:"tags,omitempty"`
	ClonedFrom  *Alias `protobuf:"bytes,6,opt,name=clonedFrom" json:"clonedFrom,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{16} }

func (m *CreateRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CreateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateRequest) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

func (m *CreateRequest) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *CreateRequest) GetClonedFrom() *Alias {
	if m != nil {
		return m.ClonedFrom
	}
	return nil
}

type UpdateRequest struct {
	Alias       *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{17} }

func (m *UpdateRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *UpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MoveRequest struct {
	Username    string        `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	SourcePouch string        `protobuf:"bytes,2,opt,name=sourcePouch,proto3" json:"sourcePouch,omitempty"`
	TargetPouch string        `protobuf:"bytes,3,opt,name=targetPouch,proto3" json:"targetPouch,omitempty"`
	SnipNames   []*SnipName   `protobuf:"bytes,4,rep,name=snipNames" json:"snipNames,omitempty"`
	List        *ListResponse `protobuf:"bytes,5,opt,name=list" json:"list,omitempty"`
}

func (m *MoveRequest) Reset()                    { *m = MoveRequest{} }
func (m *MoveRequest) String() string            { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()               {}
func (*MoveRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{18} }

func (m *MoveRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MoveRequest) GetSourcePouch() string {
	if m != nil {
		return m.SourcePouch
	}
	return ""
}

func (m *MoveRequest) GetTargetPouch() string {
	if m != nil {
		return m.TargetPouch
	}
	return ""
}

func (m *MoveRequest) GetSnipNames() []*SnipName {
	if m != nil {
		return m.SnipNames
	}
	return nil
}

func (m *MoveRequest) GetList() *ListResponse {
	if m != nil {
		return m.List
	}
	return nil
}

type Alias struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Pouch    string `protobuf:"bytes,2,opt,name=pouch,proto3" json:"pouch,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Ext      string `protobuf:"bytes,4,opt,name=ext,proto3" json:"ext,omitempty"`
	Version  int64  `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *Alias) Reset()                    { *m = Alias{} }
func (m *Alias) String() string            { return proto.CompactTextString(m) }
func (*Alias) ProtoMessage()               {}
func (*Alias) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{19} }

func (m *Alias) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Alias) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *Alias) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alias) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *Alias) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type SnipName struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ext  string `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *SnipName) Reset()                    { *m = SnipName{} }
func (m *SnipName) String() string            { return proto.CompactTextString(m) }
func (*SnipName) ProtoMessage()               {}
func (*SnipName) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{20} }

func (m *SnipName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SnipName) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

type MoveResponse struct {
	Pouch string        `protobuf:"bytes,1,opt,name=pouch,proto3" json:"pouch,omitempty"`
	List  *ListResponse `protobuf:"bytes,2,opt,name=list" json:"list,omitempty"`
}

func (m *MoveResponse) Reset()                    { *m = MoveResponse{} }
func (m *MoveResponse) String() string            { return proto.CompactTextString(m) }
func (*MoveResponse) ProtoMessage()               {}
func (*MoveResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{21} }

func (m *MoveResponse) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *MoveResponse) GetList() *ListResponse {
	if m != nil {
		return m.List
	}
	return nil
}

type RenameRequest struct {
	Alias   *Alias    `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	NewName *SnipName `protobuf:"bytes,3,opt,name=newName" json:"newName,omitempty"`
}

func (m *RenameRequest) Reset()                    { *m = RenameRequest{} }
func (m *RenameRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()               {}
func (*RenameRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{22} }

func (m *RenameRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *RenameRequest) GetNewName() *SnipName {
	if m != nil {
		return m.NewName
	}
	return nil
}

type RenameResponse struct {
	Snippet  *Snippet  `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
	Original *SnipName `protobuf:"bytes,2,opt,name=original" json:"original,omitempty"`
}

func (m *RenameResponse) Reset()                    { *m = RenameResponse{} }
func (m *RenameResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameResponse) ProtoMessage()               {}
func (*RenameResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{23} }

func (m *RenameResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

func (m *RenameResponse) GetOriginal() *SnipName {
	if m != nil {
		return m.Original
	}
	return nil
}

type PatchRequest struct {
	Alias  *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Patch  string `protobuf:"bytes,3,opt,name=patch,proto3" json:"patch,omitempty"`
}

func (m *PatchRequest) Reset()                    { *m = PatchRequest{} }
func (m *PatchRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchRequest) ProtoMessage()               {}
func (*PatchRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{24} }

func (m *PatchRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *PatchRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *PatchRequest) GetPatch() string {
	if m != nil {
		return m.Patch
	}
	return ""
}

type PatchResponse struct {
	Snippet *Snippet `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *PatchResponse) Reset()                    { *m = PatchResponse{} }
func (m *PatchResponse) String() string            { return proto.CompactTextString(m) }
func (*PatchResponse) ProtoMessage()               {}
func (*PatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{25} }

func (m *PatchResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type UpdateResponse struct {
	Snippet *Snippet `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{26} }

func (m *UpdateResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type CloneRequest struct {
	Alias *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	New   *Alias `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
}

func (m *CloneRequest) Reset()                    { *m = CloneRequest{} }
func (m *CloneRequest) String() string            { return proto.CompactTextString(m) }
func (*CloneRequest) ProtoMessage()               {}
func (*CloneRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{27} }

func (m *CloneRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *CloneRequest) GetNew() *Alias {
	if m != nil {
		return m.New
	}
	return nil
}

type CloneResponse struct {
	Snippet *Snippet      `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
	List    *ListResponse `protobuf:"bytes,2,opt,name=list" json:"list,omitempty"`
}

func (m *CloneResponse) Reset()                    { *m = CloneResponse{} }
func (m *CloneResponse) String() string            { return proto.CompactTextString(m) }
func (*CloneResponse) ProtoMessage()               {}
func (*CloneResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{28} }

func (m *CloneResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

func (m *CloneResponse) GetList() *ListResponse {
	if m != nil {
		return m.List
	}
	return nil
}

type TagRequest struct {
	Alias *Alias   `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Tags  []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *TagRequest) Reset()                    { *m = TagRequest{} }
func (m *TagRequest) String() string            { return proto.CompactTextString(m) }
func (*TagRequest) ProtoMessage()               {}
func (*TagRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{29} }

func (m *TagRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *TagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TagResponse struct {
	Snippet *Snippet `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *TagResponse) Reset()                    { *m = TagResponse{} }
func (m *TagResponse) String() string            { return proto.CompactTextString(m) }
func (*TagResponse) ProtoMessage()               {}
func (*TagResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{30} }

func (m *TagResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type UnTagRequest struct {
	Alias *Alias   `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Tags  []string `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
}

func (m *UnTagRequest) Reset()                    { *m = UnTagRequest{} }
func (m *UnTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UnTagRequest) ProtoMessage()               {}
func (*UnTagRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{31} }

func (m *UnTagRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *UnTagRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type UnTagResponse struct {
	Snippet *Snippet `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
}

func (m *UnTagResponse) Reset()                    { *m = UnTagResponse{} }
func (m *UnTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UnTagResponse) ProtoMessage()               {}
func (*UnTagResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{32} }

func (m *UnTagResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

type GetRequest struct {
	Alias   *Alias `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{33} }

func (m *GetRequest) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *GetRequest) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type ListRequest struct {
	Username   string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Since      int64    `protobuf:"varint,2,opt,name=since,proto3" json:"since,omitempty"`
	Limit      int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Tags       []string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Extensions []string `protobuf:"bytes,5,rep,name=extensions" json:"extensions,omitempty"`
	All        bool     `protobuf:"varint,6,opt,name=all,proto3" json:"all,omitempty"`
	Pouch      string   `protobuf:"bytes,7,opt,name=pouch,proto3" json:"pouch,omitempty"`
	Category   string   `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{34} }

func (m *ListRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListRequest) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ListRequest) GetExtensions() []string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

func (m *ListRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

func (m *ListRequest) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *ListRequest) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type RootRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	All      bool   `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *RootRequest) Reset()                    { *m = RootRequest{} }
func (m *RootRequest) String() string            { return proto.CompactTextString(m) }
func (*RootRequest) ProtoMessage()               {}
func (*RootRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{35} }

func (m *RootRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RootRequest) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type RootResponse struct {
	Snippets []*Snippet `protobuf:"bytes,1,rep,name=snippets" json:"snippets,omitempty"`
	Pouches  []*Pouch   `protobuf:"bytes,2,rep,name=pouches" json:"pouches,omitempty"`
	Personal []*Pouch   `protobuf:"bytes,3,rep,name=personal" json:"personal,omitempty"`
	Username string     `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Stats    *UserStats `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
}

func (m *RootResponse) Reset()                    { *m = RootResponse{} }
func (m *RootResponse) String() string            { return proto.CompactTextString(m) }
func (*RootResponse) ProtoMessage()               {}
func (*RootResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{36} }

func (m *RootResponse) GetSnippets() []*Snippet {
	if m != nil {
		return m.Snippets
	}
	return nil
}

func (m *RootResponse) GetPouches() []*Pouch {
	if m != nil {
		return m.Pouches
	}
	return nil
}

func (m *RootResponse) GetPersonal() []*Pouch {
	if m != nil {
		return m.Personal
	}
	return nil
}

func (m *RootResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *RootResponse) GetStats() *UserStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type UserStats struct {
	MaxUsePerPouch   int64    `protobuf:"varint,1,opt,name=maxUsePerPouch,proto3" json:"maxUsePerPouch,omitempty"`
	MaxSnipsPerPouch int64    `protobuf:"varint,2,opt,name=maxSnipsPerPouch,proto3" json:"maxSnipsPerPouch,omitempty"`
	RecentPouches    []string `protobuf:"bytes,3,rep,name=recentPouches" json:"recentPouches,omitempty"`
	LastPouch        string   `protobuf:"bytes,4,opt,name=lastPouch,proto3" json:"lastPouch,omitempty"`
}

func (m *UserStats) Reset()                    { *m = UserStats{} }
func (m *UserStats) String() string            { return proto.CompactTextString(m) }
func (*UserStats) ProtoMessage()               {}
func (*UserStats) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{37} }

func (m *UserStats) GetMaxUsePerPouch() int64 {
	if m != nil {
		return m.MaxUsePerPouch
	}
	return 0
}

func (m *UserStats) GetMaxSnipsPerPouch() int64 {
	if m != nil {
		return m.MaxSnipsPerPouch
	}
	return 0
}

func (m *UserStats) GetRecentPouches() []string {
	if m != nil {
		return m.RecentPouches
	}
	return nil
}

func (m *UserStats) GetLastPouch() string {
	if m != nil {
		return m.LastPouch
	}
	return ""
}

type DeleteRequest struct {
	Username string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Pouch    string      `protobuf:"bytes,2,opt,name=pouch,proto3" json:"pouch,omitempty"`
	Names    []*SnipName `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{38} }

func (m *DeleteRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteRequest) GetPouch() string {
	if m != nil {
		return m.Pouch
	}
	return ""
}

func (m *DeleteRequest) GetNames() []*SnipName {
	if m != nil {
		return m.Names
	}
	return nil
}

type DeleteResponse struct {
	Deleted []*Alias      `protobuf:"bytes,1,rep,name=deleted" json:"deleted,omitempty"`
	List    *ListResponse `protobuf:"bytes,2,opt,name=list" json:"list,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{39} }

func (m *DeleteResponse) GetDeleted() []*Alias {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *DeleteResponse) GetList() *ListResponse {
	if m != nil {
		return m.List
	}
	return nil
}

type CreateResponse struct {
	Snippet   *Snippet           `protobuf:"bytes,1,opt,name=snippet" json:"snippet,omitempty"`
	TypeMatch *TypeMatchResponse `protobuf:"bytes,2,opt,name=typeMatch" json:"typeMatch,omitempty"`
	List      *ListResponse      `protobuf:"bytes,3,opt,name=list" json:"list,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{40} }

func (m *CreateResponse) GetSnippet() *Snippet {
	if m != nil {
		return m.Snippet
	}
	return nil
}

func (m *CreateResponse) GetTypeMatch() *TypeMatchResponse {
	if m != nil {
		return m.TypeMatch
	}
	return nil
}

func (m *CreateResponse) GetList() *ListResponse {
	if m != nil {
		return m.List
	}
	return nil
}

type Pouch struct {
	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Username    string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Name        string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	MakePrivate bool        `protobuf:"varint,4,opt,name=makePrivate,proto3" json:"makePrivate,omitempty"`
	Encrypt     bool        `protobuf:"varint,5,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	SharedWith  *SharedWith `protobuf:"bytes,6,opt,name=sharedWith" json:"sharedWith,omitempty"`
	Updated     int64       `protobuf:"varint,7,opt,name=updated,proto3" json:"updated,omitempty"`
	UnOpened    int64       `protobuf:"varint,8,opt,name=unOpened,proto3" json:"unOpened,omitempty"`
	Type        PouchType   `protobuf:"varint,9,opt,name=type,proto3,enum=types.PouchType" json:"type,omitempty"`
	Stats       *PouchStats `protobuf:"bytes,10,opt,name=stats" json:"stats,omitempty"`
	LastUse     int64       `protobuf:"varint,11,opt,name=lastUse,proto3" json:"lastUse,omitempty"`
	Created     int64       `protobuf:"varint,12,opt,name=created,proto3" json:"created,omitempty"`
}

func (m *Pouch) Reset()                    { *m = Pouch{} }
func (m *Pouch) String() string            { return proto.CompactTextString(m) }
func (*Pouch) ProtoMessage()               {}
func (*Pouch) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{41} }

func (m *Pouch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Pouch) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Pouch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Pouch) GetMakePrivate() bool {
	if m != nil {
		return m.MakePrivate
	}
	return false
}

func (m *Pouch) GetEncrypt() bool {
	if m != nil {
		return m.Encrypt
	}
	return false
}

func (m *Pouch) GetSharedWith() *SharedWith {
	if m != nil {
		return m.SharedWith
	}
	return nil
}

func (m *Pouch) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Pouch) GetUnOpened() int64 {
	if m != nil {
		return m.UnOpened
	}
	return 0
}

func (m *Pouch) GetType() PouchType {
	if m != nil {
		return m.Type
	}
	return PouchType_Physical
}

func (m *Pouch) GetStats() *PouchStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Pouch) GetLastUse() int64 {
	if m != nil {
		return m.LastUse
	}
	return 0
}

func (m *Pouch) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

type PouchStats struct {
	Views  int64 `protobuf:"varint,1,opt,name=views,proto3" json:"views,omitempty"`
	Runs   int64 `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Clones int64 `protobuf:"varint,3,opt,name=clones,proto3" json:"clones,omitempty"`
	Snips  int64 `protobuf:"varint,5,opt,name=snips,proto3" json:"snips,omitempty"`
	Red    int64 `protobuf:"varint,4,opt,name=red,proto3" json:"red,omitempty"`
	Green  int64 `protobuf:"varint,7,opt,name=green,proto3" json:"green,omitempty"`
}

func (m *PouchStats) Reset()                    { *m = PouchStats{} }
func (m *PouchStats) String() string            { return proto.CompactTextString(m) }
func (*PouchStats) ProtoMessage()               {}
func (*PouchStats) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{42} }

func (m *PouchStats) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *PouchStats) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

func (m *PouchStats) GetClones() int64 {
	if m != nil {
		return m.Clones
	}
	return 0
}

func (m *PouchStats) GetSnips() int64 {
	if m != nil {
		return m.Snips
	}
	return 0
}

func (m *PouchStats) GetRed() int64 {
	if m != nil {
		return m.Red
	}
	return 0
}

func (m *PouchStats) GetGreen() int64 {
	if m != nil {
		return m.Green
	}
	return 0
}

type Snippet struct {
	Alias         *Alias        `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
	Id            string        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Content       string        `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Tags          *Tags         `protobuf:"bytes,5,opt,name=tags" json:"tags,omitempty"`
	Created       int64         `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	Updated       int64         `protobuf:"varint,7,opt,name=updated,proto3" json:"updated,omitempty"`
	Description   string        `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	ClonedFromURI string        `protobuf:"bytes,9,opt,name=clonedFromURI,proto3" json:"clonedFromURI,omitempty"`
	Public        bool          `protobuf:"varint,12,opt,name=public,proto3" json:"public,omitempty"`
	Checksum      string        `protobuf:"bytes,13,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Signature     string        `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"`
	Encrypted     bool          `protobuf:"varint,15,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	EncryptedAlgo string        `protobuf:"bytes,16,opt,name=encryptedAlgo,proto3" json:"encryptedAlgo,omitempty"`
	Role          Role          `protobuf:"varint,17,opt,name=role,proto3,enum=types.Role" json:"role,omitempty"`
	Stats         *SnipStats    `protobuf:"bytes,18,opt,name=stats" json:"stats,omitempty"`
	RunStatus     UseStatus     `protobuf:"varint,19,opt,name=runStatus,proto3,enum=types.UseStatus" json:"runStatus,omitempty"`
	RunStatusTime int64         `protobuf:"varint,20,opt,name=runStatusTime,proto3" json:"runStatusTime,omitempty"`
	Preview       string        `protobuf:"bytes,21,opt,name=preview,proto3" json:"preview,omitempty"`
	Dependencies  *Dependencies `protobuf:"bytes,22,opt,name=dependencies" json:"dependencies,omitempty"`
	Apps          *Apps         `protobuf:"bytes,23,opt,name=apps" json:"apps,omitempty"`
	SupportedOn   *Runtimes     `protobuf:"bytes,24,opt,name=supportedOn" json:"supportedOn,omitempty"`
	Attribution   string        `protobuf:"bytes,25,opt,name=attribution,proto3" json:"attribution,omitempty"`
	PouchId       string        `protobuf:"bytes,27,opt,name=pouchId,proto3" json:"pouchId,omitempty"`
	Latest        bool          `protobuf:"varint,28,opt,name=latest,proto3" json:"latest,omitempty"`
}

func (m *Snippet) Reset()                    { *m = Snippet{} }
func (m *Snippet) String() string            { return proto.CompactTextString(m) }
func (*Snippet) ProtoMessage()               {}
func (*Snippet) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{43} }

func (m *Snippet) GetAlias() *Alias {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *Snippet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Snippet) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Snippet) GetTags() *Tags {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Snippet) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Snippet) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Snippet) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Snippet) GetClonedFromURI() string {
	if m != nil {
		return m.ClonedFromURI
	}
	return ""
}

func (m *Snippet) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Snippet) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *Snippet) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *Snippet) GetEncrypted() bool {
	if m != nil {
		return m.Encrypted
	}
	return false
}

func (m *Snippet) GetEncryptedAlgo() string {
	if m != nil {
		return m.EncryptedAlgo
	}
	return ""
}

func (m *Snippet) GetRole() Role {
	if m != nil {
		return m.Role
	}
	return Role_Standard
}

func (m *Snippet) GetStats() *SnipStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Snippet) GetRunStatus() UseStatus {
	if m != nil {
		return m.RunStatus
	}
	return UseStatus_Unknown
}

func (m *Snippet) GetRunStatusTime() int64 {
	if m != nil {
		return m.RunStatusTime
	}
	return 0
}

func (m *Snippet) GetPreview() string {
	if m != nil {
		return m.Preview
	}
	return ""
}

func (m *Snippet) GetDependencies() *Dependencies {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Snippet) GetApps() *Apps {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *Snippet) GetSupportedOn() *Runtimes {
	if m != nil {
		return m.SupportedOn
	}
	return nil
}

func (m *Snippet) GetAttribution() string {
	if m != nil {
		return m.Attribution
	}
	return ""
}

func (m *Snippet) GetPouchId() string {
	if m != nil {
		return m.PouchId
	}
	return ""
}

func (m *Snippet) GetLatest() bool {
	if m != nil {
		return m.Latest
	}
	return false
}

type Tags struct {
	Names map[string]bool `protobuf:"bytes,1,rep,name=names" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Tags) Reset()                    { *m = Tags{} }
func (m *Tags) String() string            { return proto.CompactTextString(m) }
func (*Tags) ProtoMessage()               {}
func (*Tags) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{44} }

func (m *Tags) GetNames() map[string]bool {
	if m != nil {
		return m.Names
	}
	return nil
}

type Dependencies struct {
	Aliases []*Alias `protobuf:"bytes,1,rep,name=aliases" json:"aliases,omitempty"`
}

func (m *Dependencies) Reset()                    { *m = Dependencies{} }
func (m *Dependencies) String() string            { return proto.CompactTextString(m) }
func (*Dependencies) ProtoMessage()               {}
func (*Dependencies) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{45} }

func (m *Dependencies) GetAliases() []*Alias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type Apps struct {
	Aliases []*Alias `protobuf:"bytes,1,rep,name=aliases" json:"aliases,omitempty"`
}

func (m *Apps) Reset()                    { *m = Apps{} }
func (m *Apps) String() string            { return proto.CompactTextString(m) }
func (*Apps) ProtoMessage()               {}
func (*Apps) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{46} }

func (m *Apps) GetAliases() []*Alias {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type Runtimes struct {
	Oss map[string]bool `protobuf:"bytes,1,rep,name=oss" json:"oss,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *Runtimes) Reset()                    { *m = Runtimes{} }
func (m *Runtimes) String() string            { return proto.CompactTextString(m) }
func (*Runtimes) ProtoMessage()               {}
func (*Runtimes) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{47} }

func (m *Runtimes) GetOss() map[string]bool {
	if m != nil {
		return m.Oss
	}
	return nil
}

type SharedWith struct {
	Usernames map[string]bool `protobuf:"bytes,1,rep,name=usernames" json:"usernames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SharedWith) Reset()                    { *m = SharedWith{} }
func (m *SharedWith) String() string            { return proto.CompactTextString(m) }
func (*SharedWith) ProtoMessage()               {}
func (*SharedWith) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{48} }

func (m *SharedWith) GetUsernames() map[string]bool {
	if m != nil {
		return m.Usernames
	}
	return nil
}

type SnipStats struct {
	Views  int64 `protobuf:"varint,1,opt,name=views,proto3" json:"views,omitempty"`
	Clones int64 `protobuf:"varint,2,opt,name=clones,proto3" json:"clones,omitempty"`
	Runs   int64 `protobuf:"varint,3,opt,name=runs,proto3" json:"runs,omitempty"`
}

func (m *SnipStats) Reset()                    { *m = SnipStats{} }
func (m *SnipStats) String() string            { return proto.CompactTextString(m) }
func (*SnipStats) ProtoMessage()               {}
func (*SnipStats) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{49} }

func (m *SnipStats) GetViews() int64 {
	if m != nil {
		return m.Views
	}
	return 0
}

func (m *SnipStats) GetClones() int64 {
	if m != nil {
		return m.Clones
	}
	return 0
}

func (m *SnipStats) GetRuns() int64 {
	if m != nil {
		return m.Runs
	}
	return 0
}

type TypeMatchResponse struct {
	Matches []*MatchResponse `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *TypeMatchResponse) Reset()                    { *m = TypeMatchResponse{} }
func (m *TypeMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*TypeMatchResponse) ProtoMessage()               {}
func (*TypeMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{50} }

func (m *TypeMatchResponse) GetMatches() []*MatchResponse {
	if m != nil {
		return m.Matches
	}
	return nil
}

type MatchResponse struct {
	Extension string `protobuf:"bytes,1,opt,name=extension,proto3" json:"extension,omitempty"`
	Score     int64  `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *MatchResponse) Reset()                    { *m = MatchResponse{} }
func (m *MatchResponse) String() string            { return proto.CompactTextString(m) }
func (*MatchResponse) ProtoMessage()               {}
func (*MatchResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{51} }

func (m *MatchResponse) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *MatchResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ListResponse struct {
	Items    []*Snippet `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Total    int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Since    int64      `protobuf:"varint,3,opt,name=since,proto3" json:"since,omitempty"`
	Limit    int64      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Username string     `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Pouch    *Pouch     `protobuf:"bytes,6,opt,name=pouch" json:"pouch,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptorSnippets, []int{52} }

func (m *ListResponse) GetItems() []*Snippet {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *ListResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponse) GetSince() int64 {
	if m != nil {
		return m.Since
	}
	return 0
}

func (m *ListResponse) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ListResponse) GetPouch() *Pouch {
	if m != nil {
		return m.Pouch
	}
	return nil
}

func init() {
	proto.RegisterType((*UseContext)(nil), "types.UseContext")
	proto.RegisterType((*LogUseResponse)(nil), "types.LogUseResponse")
	proto.RegisterType((*AlphaRequest)(nil), "types.AlphaRequest")
	proto.RegisterType((*AlphaResponse)(nil), "types.AlphaResponse")
	proto.RegisterType((*TypeAheadRequest)(nil), "types.TypeAheadRequest")
	proto.RegisterType((*TypeAheadResponse)(nil), "types.TypeAheadResponse")
	proto.RegisterType((*TypeAheadItem)(nil), "types.TypeAheadItem")
	proto.RegisterType((*AlphaItem)(nil), "types.AlphaItem")
	proto.RegisterType((*CreatePouchRequest)(nil), "types.CreatePouchRequest")
	proto.RegisterType((*CreatePouchResponse)(nil), "types.CreatePouchResponse")
	proto.RegisterType((*RenamePouchRequest)(nil), "types.RenamePouchRequest")
	proto.RegisterType((*RenamePouchResponse)(nil), "types.RenamePouchResponse")
	proto.RegisterType((*MakePrivateRequest)(nil), "types.MakePrivateRequest")
	proto.RegisterType((*MakePrivateResponse)(nil), "types.MakePrivateResponse")
	proto.RegisterType((*DeletePouchRequest)(nil), "types.DeletePouchRequest")
	proto.RegisterType((*DeletePouchResponse)(nil), "types.DeletePouchResponse")
	proto.RegisterType((*CreateRequest)(nil), "types.CreateRequest")
	proto.RegisterType((*UpdateRequest)(nil), "types.UpdateRequest")
	proto.RegisterType((*MoveRequest)(nil), "types.MoveRequest")
	proto.RegisterType((*Alias)(nil), "types.Alias")
	proto.RegisterType((*SnipName)(nil), "types.SnipName")
	proto.RegisterType((*MoveResponse)(nil), "types.MoveResponse")
	proto.RegisterType((*RenameRequest)(nil), "types.RenameRequest")
	proto.RegisterType((*RenameResponse)(nil), "types.RenameResponse")
	proto.RegisterType((*PatchRequest)(nil), "types.PatchRequest")
	proto.RegisterType((*PatchResponse)(nil), "types.PatchResponse")
	proto.RegisterType((*UpdateResponse)(nil), "types.UpdateResponse")
	proto.RegisterType((*CloneRequest)(nil), "types.CloneRequest")
	proto.RegisterType((*CloneResponse)(nil), "types.CloneResponse")
	proto.RegisterType((*TagRequest)(nil), "types.TagRequest")
	proto.RegisterType((*TagResponse)(nil), "types.TagResponse")
	proto.RegisterType((*UnTagRequest)(nil), "types.UnTagRequest")
	proto.RegisterType((*UnTagResponse)(nil), "types.UnTagResponse")
	proto.RegisterType((*GetRequest)(nil), "types.GetRequest")
	proto.RegisterType((*ListRequest)(nil), "types.ListRequest")
	proto.RegisterType((*RootRequest)(nil), "types.RootRequest")
	proto.RegisterType((*RootResponse)(nil), "types.RootResponse")
	proto.RegisterType((*UserStats)(nil), "types.UserStats")
	proto.RegisterType((*DeleteRequest)(nil), "types.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "types.DeleteResponse")
	proto.RegisterType((*CreateResponse)(nil), "types.CreateResponse")
	proto.RegisterType((*Pouch)(nil), "types.Pouch")
	proto.RegisterType((*PouchStats)(nil), "types.PouchStats")
	proto.RegisterType((*Snippet)(nil), "types.Snippet")
	proto.RegisterType((*Tags)(nil), "types.Tags")
	proto.RegisterType((*Dependencies)(nil), "types.Dependencies")
	proto.RegisterType((*Apps)(nil), "types.Apps")
	proto.RegisterType((*Runtimes)(nil), "types.Runtimes")
	proto.RegisterType((*SharedWith)(nil), "types.SharedWith")
	proto.RegisterType((*SnipStats)(nil), "types.SnipStats")
	proto.RegisterType((*TypeMatchResponse)(nil), "types.TypeMatchResponse")
	proto.RegisterType((*MatchResponse)(nil), "types.MatchResponse")
	proto.RegisterType((*ListResponse)(nil), "types.ListResponse")
	proto.RegisterEnum("types.UseStatus", UseStatus_name, UseStatus_value)
	proto.RegisterEnum("types.UseType", UseType_name, UseType_value)
	proto.RegisterEnum("types.Role", Role_name, Role_value)
	proto.RegisterEnum("types.PouchType", PouchType_name, PouchType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Snippets service

type SnippetsClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error)
	Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error)
	UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	GetRoot(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error)
	CreatePouch(ctx context.Context, in *CreatePouchRequest, opts ...grpc.CallOption) (*CreatePouchResponse, error)
	RenamePouch(ctx context.Context, in *RenamePouchRequest, opts ...grpc.CallOption) (*RenamePouchResponse, error)
	MakePouchPrivate(ctx context.Context, in *MakePrivateRequest, opts ...grpc.CallOption) (*MakePrivateResponse, error)
	DeletePouch(ctx context.Context, in *DeletePouchRequest, opts ...grpc.CallOption) (*DeletePouchResponse, error)
	Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error)
	TypeAhead(ctx context.Context, in *TypeAheadRequest, opts ...grpc.CallOption) (*TypeAheadResponse, error)
	LogUse(ctx context.Context, in *UseContext, opts ...grpc.CallOption) (*LogUseResponse, error)
}

type snippetsClient struct {
	cc *grpc.ClientConn
}

func NewSnippetsClient(cc *grpc.ClientConn) SnippetsClient {
	return &snippetsClient{cc}
}

func (c *snippetsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Move", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	out := new(RenameResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Patch(ctx context.Context, in *PatchRequest, opts ...grpc.CallOption) (*PatchResponse, error) {
	out := new(PatchResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Patch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Clone(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Clone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Tag(ctx context.Context, in *TagRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Tag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) UnTag(ctx context.Context, in *UnTagRequest, opts ...grpc.CallOption) (*UnTagResponse, error) {
	out := new(UnTagResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/UnTag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) GetRoot(ctx context.Context, in *RootRequest, opts ...grpc.CallOption) (*RootResponse, error) {
	out := new(RootResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/GetRoot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) CreatePouch(ctx context.Context, in *CreatePouchRequest, opts ...grpc.CallOption) (*CreatePouchResponse, error) {
	out := new(CreatePouchResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/CreatePouch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) RenamePouch(ctx context.Context, in *RenamePouchRequest, opts ...grpc.CallOption) (*RenamePouchResponse, error) {
	out := new(RenamePouchResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/RenamePouch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) MakePouchPrivate(ctx context.Context, in *MakePrivateRequest, opts ...grpc.CallOption) (*MakePrivateResponse, error) {
	out := new(MakePrivateResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/MakePouchPrivate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) DeletePouch(ctx context.Context, in *DeletePouchRequest, opts ...grpc.CallOption) (*DeletePouchResponse, error) {
	out := new(DeletePouchResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/DeletePouch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) Alpha(ctx context.Context, in *AlphaRequest, opts ...grpc.CallOption) (*AlphaResponse, error) {
	out := new(AlphaResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/Alpha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) TypeAhead(ctx context.Context, in *TypeAheadRequest, opts ...grpc.CallOption) (*TypeAheadResponse, error) {
	out := new(TypeAheadResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/TypeAhead", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snippetsClient) LogUse(ctx context.Context, in *UseContext, opts ...grpc.CallOption) (*LogUseResponse, error) {
	out := new(LogUseResponse)
	err := grpc.Invoke(ctx, "/types.Snippets/LogUse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Snippets service

type SnippetsServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Move(context.Context, *MoveRequest) (*MoveResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	Patch(context.Context, *PatchRequest) (*PatchResponse, error)
	Clone(context.Context, *CloneRequest) (*CloneResponse, error)
	Tag(context.Context, *TagRequest) (*TagResponse, error)
	UnTag(context.Context, *UnTagRequest) (*UnTagResponse, error)
	Get(context.Context, *GetRequest) (*ListResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	GetRoot(context.Context, *RootRequest) (*RootResponse, error)
	CreatePouch(context.Context, *CreatePouchRequest) (*CreatePouchResponse, error)
	RenamePouch(context.Context, *RenamePouchRequest) (*RenamePouchResponse, error)
	MakePouchPrivate(context.Context, *MakePrivateRequest) (*MakePrivateResponse, error)
	DeletePouch(context.Context, *DeletePouchRequest) (*DeletePouchResponse, error)
	Alpha(context.Context, *AlphaRequest) (*AlphaResponse, error)
	TypeAhead(context.Context, *TypeAheadRequest) (*TypeAheadResponse, error)
	LogUse(context.Context, *UseContext) (*LogUseResponse, error)
}

func RegisterSnippetsServer(s *grpc.Server, srv SnippetsServer) {
	s.RegisterService(&_Snippets_serviceDesc, srv)
}

func _Snippets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Rename",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Patch(ctx, req.(*PatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Clone(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Tag(ctx, req.(*TagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_UnTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).UnTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/UnTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).UnTag(ctx, req.(*UnTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_GetRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).GetRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/GetRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).GetRoot(ctx, req.(*RootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_CreatePouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).CreatePouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/CreatePouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).CreatePouch(ctx, req.(*CreatePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_RenamePouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenamePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).RenamePouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/RenamePouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).RenamePouch(ctx, req.(*RenamePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_MakePouchPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).MakePouchPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/MakePouchPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).MakePouchPrivate(ctx, req.(*MakePrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_DeletePouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).DeletePouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/DeletePouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).DeletePouch(ctx, req.(*DeletePouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/Alpha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).Alpha(ctx, req.(*AlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_TypeAhead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeAheadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).TypeAhead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/TypeAhead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).TypeAhead(ctx, req.(*TypeAheadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snippets_LogUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnippetsServer).LogUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Snippets/LogUse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnippetsServer).LogUse(ctx, req.(*UseContext))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snippets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Snippets",
	HandlerType: (*SnippetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Snippets_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Snippets_Update_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Snippets_Move_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Snippets_Rename_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _Snippets_Patch_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _Snippets_Clone_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Snippets_Tag_Handler,
		},
		{
			MethodName: "UnTag",
			Handler:    _Snippets_UnTag_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Snippets_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Snippets_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Snippets_Delete_Handler,
		},
		{
			MethodName: "GetRoot",
			Handler:    _Snippets_GetRoot_Handler,
		},
		{
			MethodName: "CreatePouch",
			Handler:    _Snippets_CreatePouch_Handler,
		},
		{
			MethodName: "RenamePouch",
			Handler:    _Snippets_RenamePouch_Handler,
		},
		{
			MethodName: "MakePouchPrivate",
			Handler:    _Snippets_MakePouchPrivate_Handler,
		},
		{
			MethodName: "DeletePouch",
			Handler:    _Snippets_DeletePouch_Handler,
		},
		{
			MethodName: "Alpha",
			Handler:    _Snippets_Alpha_Handler,
		},
		{
			MethodName: "TypeAhead",
			Handler:    _Snippets_TypeAhead_Handler,
		},
		{
			MethodName: "LogUse",
			Handler:    _Snippets_LogUse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snippets.proto",
}

func (m *UseContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UseContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n1, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Status))
	}
	if len(m.Preview) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Preview)))
		i += copy(dAtA[i:], m.Preview)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Time))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Level))
	}
	if len(m.Runner) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Runner)))
		i += copy(dAtA[i:], m.Runner)
	}
	if len(m.CallerAlias) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.CallerAlias)))
		i += copy(dAtA[i:], m.CallerAlias)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	return i, nil
}

func (m *LogUseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogUseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AlphaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlphaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Term) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Term)))
		i += copy(dAtA[i:], m.Term)
	}
	if len(m.Extension) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Extension)))
		i += copy(dAtA[i:], m.Extension)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.All {
		dAtA[i] = 0x20
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	return i, nil
}

func (m *AlphaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlphaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Total))
	}
	if m.Took != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Took))
	}
	if len(m.Term) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Term)))
		i += copy(dAtA[i:], m.Term)
	}
	if len(m.FallbackTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.FallbackTitle)))
		i += copy(dAtA[i:], m.FallbackTitle)
	}
	return i, nil
}

func (m *TypeAheadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeAheadRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Term) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Term)))
		i += copy(dAtA[i:], m.Term)
	}
	if m.All {
		dAtA[i] = 0x10
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	return i, nil
}

func (m *TypeAheadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeAheadResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Total))
	}
	if m.Took != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Took))
	}
	return i, nil
}

func (m *TypeAheadItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeAheadItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n2, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AlphaItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlphaItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n3, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Highlights) > 0 {
		for k, _ := range m.Highlights {
			dAtA[i] = 0x12
			i++
			v := m.Highlights[k]
			mapSize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + len(v) + sovSnippets(uint64(len(v)))
			i = encodeVarintSnippets(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *CreatePouchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePouchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MakePrivate {
		dAtA[i] = 0x18
		i++
		if m.MakePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Encrypt {
		dAtA[i] = 0x20
		i++
		if m.Encrypt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CreatePouchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePouchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pouch != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Pouch.Size()))
		n4, err := m.Pouch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Root != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Root.Size()))
		n5, err := m.Root.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *RenamePouchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenamePouchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.NewName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	return i, nil
}

func (m *RenamePouchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenamePouchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OriginalName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.OriginalName)))
		i += copy(dAtA[i:], m.OriginalName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Root != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Root.Size()))
		n6, err := m.Root.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MakePrivateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakePrivateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MakePrivate {
		dAtA[i] = 0x18
		i++
		if m.MakePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MakePrivateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MakePrivateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsPrivate {
		dAtA[i] = 0x8
		i++
		if m.IsPrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Root != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Root.Size()))
		n7, err := m.Root.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *DeletePouchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePouchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *DeletePouchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePouchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Root != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Root.Size()))
		n8, err := m.Root.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Alias != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n9, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Role != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Role))
	}
	if m.Tags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Tags.Size()))
		n10, err := m.Tags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ClonedFrom != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.ClonedFrom.Size()))
		n11, err := m.ClonedFrom.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n12, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	return i, nil
}

func (m *MoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.SourcePouch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.SourcePouch)))
		i += copy(dAtA[i:], m.SourcePouch)
	}
	if len(m.TargetPouch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.TargetPouch)))
		i += copy(dAtA[i:], m.TargetPouch)
	}
	if len(m.SnipNames) > 0 {
		for _, msg := range m.SnipNames {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.List != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.List.Size()))
		n13, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *Alias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Alias) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Pouch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Pouch)))
		i += copy(dAtA[i:], m.Pouch)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Ext) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Ext)))
		i += copy(dAtA[i:], m.Ext)
	}
	if m.Version != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *SnipName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnipName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Ext) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Ext)))
		i += copy(dAtA[i:], m.Ext)
	}
	return i, nil
}

func (m *MoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MoveResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pouch) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Pouch)))
		i += copy(dAtA[i:], m.Pouch)
	}
	if m.List != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.List.Size()))
		n14, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *RenameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n15, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.NewName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.NewName.Size()))
		n16, err := m.NewName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *RenameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenameResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n17, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Original != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Original.Size()))
		n18, err := m.Original.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}

func (m *PatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n19, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Patch) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Patch)))
		i += copy(dAtA[i:], m.Patch)
	}
	return i, nil
}

func (m *PatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n20, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n21, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}

func (m *CloneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n22, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.New != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.New.Size()))
		n23, err := m.New.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *CloneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloneResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n24, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.List != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.List.Size()))
		n25, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}

func (m *TagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n26, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *TagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n27, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}

func (m *UnTagRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnTagRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n28, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *UnTagResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnTagResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n29, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n30, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *ListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Since != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Since))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Limit))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.All {
		dAtA[i] = 0x30
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Pouch) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Pouch)))
		i += copy(dAtA[i:], m.Pouch)
	}
	if len(m.Category) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Category)))
		i += copy(dAtA[i:], m.Category)
	}
	return i, nil
}

func (m *RootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RootRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.All {
		dAtA[i] = 0x10
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RootResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Snippets) > 0 {
		for _, msg := range m.Snippets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Pouches) > 0 {
		for _, msg := range m.Pouches {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Personal) > 0 {
		for _, msg := range m.Personal {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Stats != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Stats.Size()))
		n31, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *UserStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxUsePerPouch != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.MaxUsePerPouch))
	}
	if m.MaxSnipsPerPouch != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.MaxSnipsPerPouch))
	}
	if len(m.RecentPouches) > 0 {
		for _, s := range m.RecentPouches {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.LastPouch) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.LastPouch)))
		i += copy(dAtA[i:], m.LastPouch)
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Pouch) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Pouch)))
		i += copy(dAtA[i:], m.Pouch)
	}
	if len(m.Names) > 0 {
		for _, msg := range m.Names {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Deleted) > 0 {
		for _, msg := range m.Deleted {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.List != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.List.Size()))
		n32, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Snippet != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snippet.Size()))
		n33, err := m.Snippet.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.TypeMatch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.TypeMatch.Size()))
		n34, err := m.TypeMatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.List != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.List.Size()))
		n35, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *Pouch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pouch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.MakePrivate {
		dAtA[i] = 0x20
		i++
		if m.MakePrivate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Encrypt {
		dAtA[i] = 0x28
		i++
		if m.Encrypt {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SharedWith != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.SharedWith.Size()))
		n36, err := m.SharedWith.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Updated != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Updated))
	}
	if m.UnOpened != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.UnOpened))
	}
	if m.Type != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Type))
	}
	if m.Stats != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Stats.Size()))
		n37, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.LastUse != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.LastUse))
	}
	if m.Created != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Created))
	}
	return i, nil
}

func (m *PouchStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PouchStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Views != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Views))
	}
	if m.Runs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Runs))
	}
	if m.Clones != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Clones))
	}
	if m.Red != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Red))
	}
	if m.Snips != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Snips))
	}
	if m.Green != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Green))
	}
	return i, nil
}

func (m *Snippet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snippet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Alias != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Alias.Size()))
		n38, err := m.Alias.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Tags != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Tags.Size()))
		n39, err := m.Tags.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.Created != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Created))
	}
	if m.Updated != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Updated))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.ClonedFromURI) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.ClonedFromURI)))
		i += copy(dAtA[i:], m.ClonedFromURI)
	}
	if m.Public {
		dAtA[i] = 0x60
		i++
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Checksum) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Checksum)))
		i += copy(dAtA[i:], m.Checksum)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.Encrypted {
		dAtA[i] = 0x78
		i++
		if m.Encrypted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.EncryptedAlgo) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.EncryptedAlgo)))
		i += copy(dAtA[i:], m.EncryptedAlgo)
	}
	if m.Role != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Role))
	}
	if m.Stats != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Stats.Size()))
		n40, err := m.Stats.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.RunStatus != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.RunStatus))
	}
	if m.RunStatusTime != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.RunStatusTime))
	}
	if len(m.Preview) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Preview)))
		i += copy(dAtA[i:], m.Preview)
	}
	if m.Dependencies != nil {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Dependencies.Size()))
		n41, err := m.Dependencies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.Apps != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Apps.Size()))
		n42, err := m.Apps.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.SupportedOn != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.SupportedOn.Size()))
		n43, err := m.SupportedOn.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if len(m.Attribution) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Attribution)))
		i += copy(dAtA[i:], m.Attribution)
	}
	if len(m.PouchId) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.PouchId)))
		i += copy(dAtA[i:], m.PouchId)
	}
	if m.Latest {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.Latest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Tags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tags) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for k, _ := range m.Names {
			dAtA[i] = 0xa
			i++
			v := m.Names[k]
			mapSize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			i = encodeVarintSnippets(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *Dependencies) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dependencies) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for _, msg := range m.Aliases {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Apps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Apps) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for _, msg := range m.Aliases {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Runtimes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Runtimes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Oss) > 0 {
		for k, _ := range m.Oss {
			dAtA[i] = 0xa
			i++
			v := m.Oss[k]
			mapSize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			i = encodeVarintSnippets(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *SharedWith) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SharedWith) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Usernames) > 0 {
		for k, _ := range m.Usernames {
			dAtA[i] = 0xa
			i++
			v := m.Usernames[k]
			mapSize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			i = encodeVarintSnippets(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *SnipStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnipStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Views != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Views))
	}
	if m.Clones != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Clones))
	}
	if m.Runs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Runs))
	}
	return i, nil
}

func (m *TypeMatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TypeMatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, msg := range m.Matches {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Extension) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Extension)))
		i += copy(dAtA[i:], m.Extension)
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Score))
	}
	return i, nil
}

func (m *ListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSnippets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Total))
	}
	if m.Since != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Since))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Limit))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.Pouch != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSnippets(dAtA, i, uint64(m.Pouch.Size()))
		n44, err := m.Pouch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	return i, nil
}

func encodeFixed64Snippets(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Snippets(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSnippets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UseContext) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovSnippets(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovSnippets(uint64(m.Status))
	}
	l = len(m.Preview)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovSnippets(uint64(m.Time))
	}
	if m.Level != 0 {
		n += 1 + sovSnippets(uint64(m.Level))
	}
	l = len(m.Runner)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.CallerAlias)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *LogUseResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AlphaRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Term)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.All {
		n += 2
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *AlphaResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSnippets(uint64(m.Total))
	}
	if m.Took != 0 {
		n += 1 + sovSnippets(uint64(m.Took))
	}
	l = len(m.Term)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.FallbackTitle)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *TypeAheadRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Term)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.All {
		n += 2
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *TypeAheadResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSnippets(uint64(m.Total))
	}
	if m.Took != 0 {
		n += 1 + sovSnippets(uint64(m.Took))
	}
	return n
}

func (m *TypeAheadItem) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *AlphaItem) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if len(m.Highlights) > 0 {
		for k, v := range m.Highlights {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + len(v) + sovSnippets(uint64(len(v)))
			n += mapEntrySize + 1 + sovSnippets(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreatePouchRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.MakePrivate {
		n += 2
	}
	if m.Encrypt {
		n += 2
	}
	return n
}

func (m *CreatePouchResponse) Size() (n int) {
	var l int
	_ = l
	if m.Pouch != nil {
		l = m.Pouch.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *RenamePouchRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *RenamePouchResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.OriginalName)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *MakePrivateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.MakePrivate {
		n += 2
	}
	return n
}

func (m *MakePrivateResponse) Size() (n int) {
	var l int
	_ = l
	if m.IsPrivate {
		n += 2
	}
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *DeletePouchRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *DeletePouchResponse) Size() (n int) {
	var l int
	_ = l
	if m.Root != nil {
		l = m.Root.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Role != 0 {
		n += 1 + sovSnippets(uint64(m.Role))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.ClonedFrom != nil {
		l = m.ClonedFrom.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *MoveRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.SourcePouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.TargetPouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if len(m.SnipNames) > 0 {
		for _, e := range m.SnipNames {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *Alias) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Pouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovSnippets(uint64(m.Version))
	}
	return n
}

func (m *SnipName) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *MoveResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *RenameRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.NewName != nil {
		l = m.NewName.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *RenameResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Original != nil {
		l = m.Original.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *PatchRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Patch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *PatchResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *CloneRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.New != nil {
		l = m.New.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *CloneResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *TagRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *TagResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *UnTagRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *UnTagResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovSnippets(uint64(m.Version))
	}
	return n
}

func (m *ListRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Since != 0 {
		n += 1 + sovSnippets(uint64(m.Since))
	}
	if m.Limit != 0 {
		n += 1 + sovSnippets(uint64(m.Limit))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if len(m.Extensions) > 0 {
		for _, s := range m.Extensions {
			l = len(s)
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.All {
		n += 2
	}
	l = len(m.Pouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *RootRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.All {
		n += 2
	}
	return n
}

func (m *RootResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Snippets) > 0 {
		for _, e := range m.Snippets {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if len(m.Pouches) > 0 {
		for _, e := range m.Pouches {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if len(m.Personal) > 0 {
		for _, e := range m.Personal {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *UserStats) Size() (n int) {
	var l int
	_ = l
	if m.MaxUsePerPouch != 0 {
		n += 1 + sovSnippets(uint64(m.MaxUsePerPouch))
	}
	if m.MaxSnipsPerPouch != 0 {
		n += 1 + sovSnippets(uint64(m.MaxSnipsPerPouch))
	}
	if len(m.RecentPouches) > 0 {
		for _, s := range m.RecentPouches {
			l = len(s)
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	l = len(m.LastPouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Pouch)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Deleted) > 0 {
		for _, e := range m.Deleted {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Snippet != nil {
		l = m.Snippet.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.TypeMatch != nil {
		l = m.TypeMatch.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func (m *Pouch) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.MakePrivate {
		n += 2
	}
	if m.Encrypt {
		n += 2
	}
	if m.SharedWith != nil {
		l = m.SharedWith.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Updated != 0 {
		n += 1 + sovSnippets(uint64(m.Updated))
	}
	if m.UnOpened != 0 {
		n += 1 + sovSnippets(uint64(m.UnOpened))
	}
	if m.Type != 0 {
		n += 1 + sovSnippets(uint64(m.Type))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.LastUse != 0 {
		n += 1 + sovSnippets(uint64(m.LastUse))
	}
	if m.Created != 0 {
		n += 1 + sovSnippets(uint64(m.Created))
	}
	return n
}

func (m *PouchStats) Size() (n int) {
	var l int
	_ = l
	if m.Views != 0 {
		n += 1 + sovSnippets(uint64(m.Views))
	}
	if m.Runs != 0 {
		n += 1 + sovSnippets(uint64(m.Runs))
	}
	if m.Clones != 0 {
		n += 1 + sovSnippets(uint64(m.Clones))
	}
	if m.Red != 0 {
		n += 1 + sovSnippets(uint64(m.Red))
	}
	if m.Snips != 0 {
		n += 1 + sovSnippets(uint64(m.Snips))
	}
	if m.Green != 0 {
		n += 1 + sovSnippets(uint64(m.Green))
	}
	return n
}

func (m *Snippet) Size() (n int) {
	var l int
	_ = l
	if m.Alias != nil {
		l = m.Alias.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Tags != nil {
		l = m.Tags.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovSnippets(uint64(m.Created))
	}
	if m.Updated != 0 {
		n += 1 + sovSnippets(uint64(m.Updated))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.ClonedFromURI)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Public {
		n += 2
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Encrypted {
		n += 2
	}
	l = len(m.EncryptedAlgo)
	if l > 0 {
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.Role != 0 {
		n += 2 + sovSnippets(uint64(m.Role))
	}
	if m.Stats != nil {
		l = m.Stats.Size()
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.RunStatus != 0 {
		n += 2 + sovSnippets(uint64(m.RunStatus))
	}
	if m.RunStatusTime != 0 {
		n += 2 + sovSnippets(uint64(m.RunStatusTime))
	}
	l = len(m.Preview)
	if l > 0 {
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.Dependencies != nil {
		l = m.Dependencies.Size()
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.Apps != nil {
		l = m.Apps.Size()
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.SupportedOn != nil {
		l = m.SupportedOn.Size()
		n += 2 + l + sovSnippets(uint64(l))
	}
	l = len(m.Attribution)
	if l > 0 {
		n += 2 + l + sovSnippets(uint64(l))
	}
	l = len(m.PouchId)
	if l > 0 {
		n += 2 + l + sovSnippets(uint64(l))
	}
	if m.Latest {
		n += 3
	}
	return n
}

func (m *Tags) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for k, v := range m.Names {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovSnippets(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Dependencies) Size() (n int) {
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *Apps) Size() (n int) {
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for _, e := range m.Aliases {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *Runtimes) Size() (n int) {
	var l int
	_ = l
	if len(m.Oss) > 0 {
		for k, v := range m.Oss {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovSnippets(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SharedWith) Size() (n int) {
	var l int
	_ = l
	if len(m.Usernames) > 0 {
		for k, v := range m.Usernames {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSnippets(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovSnippets(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SnipStats) Size() (n int) {
	var l int
	_ = l
	if m.Views != 0 {
		n += 1 + sovSnippets(uint64(m.Views))
	}
	if m.Clones != 0 {
		n += 1 + sovSnippets(uint64(m.Clones))
	}
	if m.Runs != 0 {
		n += 1 + sovSnippets(uint64(m.Runs))
	}
	return n
}

func (m *TypeMatchResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Matches) > 0 {
		for _, e := range m.Matches {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	return n
}

func (m *MatchResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Extension)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovSnippets(uint64(m.Score))
	}
	return n
}

func (m *ListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovSnippets(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovSnippets(uint64(m.Total))
	}
	if m.Since != 0 {
		n += 1 + sovSnippets(uint64(m.Since))
	}
	if m.Limit != 0 {
		n += 1 + sovSnippets(uint64(m.Limit))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSnippets(uint64(l))
	}
	if m.Pouch != nil {
		l = m.Pouch.Size()
		n += 1 + l + sovSnippets(uint64(l))
	}
	return n
}

func sovSnippets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnippets(x uint64) (n int) {
	return sovSnippets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UseContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UseContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UseContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (UseType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (UseStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preview = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Runner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallerAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallerAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogUseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogUseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogUseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlphaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlphaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlphaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlphaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlphaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlphaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &AlphaItem{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Took", wireType)
			}
			m.Took = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Took |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeAheadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeAheadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeAheadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeAheadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeAheadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeAheadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &TypeAheadItem{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Took", wireType)
			}
			m.Took = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Took |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeAheadItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeAheadItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeAheadItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlphaItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlphaItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlphaItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Highlights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSnippets
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Highlights == nil {
				m.Highlights = make(map[string]string)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var stringLenmapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLenmapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLenmapvalue := int(stringLenmapvalue)
				if intStringLenmapvalue < 0 {
					return ErrInvalidLengthSnippets
				}
				postStringIndexmapvalue := iNdEx + intStringLenmapvalue
				if postStringIndexmapvalue > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := string(dAtA[iNdEx:postStringIndexmapvalue])
				iNdEx = postStringIndexmapvalue
				m.Highlights[mapkey] = mapvalue
			} else {
				var mapvalue string
				m.Highlights[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePouchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePouchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePouchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakePrivate = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypt = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePouchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePouchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePouchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pouch == nil {
				m.Pouch = &Pouch{}
			}
			if err := m.Pouch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &RootResponse{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenamePouchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenamePouchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenamePouchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenamePouchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenamePouchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenamePouchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &RootResponse{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakePrivateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakePrivateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakePrivateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakePrivate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MakePrivateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MakePrivateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MakePrivateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrivate = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &RootResponse{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePouchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePouchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePouchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePouchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePouchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePouchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Root == nil {
				m.Root = &RootResponse{}
			}
			if err := m.Root.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &Tags{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClonedFrom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClonedFrom == nil {
				m.ClonedFrom = &Alias{}
			}
			if err := m.ClonedFrom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnipNames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SnipNames = append(m.SnipNames, &SnipName{})
			if err := m.SnipNames[len(m.SnipNames)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &ListResponse{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Alias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnipName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnipName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnipName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &ListResponse{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewName == nil {
				m.NewName = &SnipName{}
			}
			if err := m.NewName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Original", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Original == nil {
				m.Original = &SnipName{}
			}
			if err := m.Original.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.New == nil {
				m.New = &Alias{}
			}
			if err := m.New.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &ListResponse{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnTagRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnTagRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnTagRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnTagResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnTagResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnTagResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extensions = append(m.Extensions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snippets = append(m.Snippets, &Snippet{})
			if err := m.Snippets[len(m.Snippets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pouches = append(m.Pouches, &Pouch{})
			if err := m.Pouches[len(m.Pouches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Personal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Personal = append(m.Personal, &Pouch{})
			if err := m.Personal[len(m.Personal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &UserStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsePerPouch", wireType)
			}
			m.MaxUsePerPouch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUsePerPouch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSnipsPerPouch", wireType)
			}
			m.MaxSnipsPerPouch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSnipsPerPouch |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecentPouches", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecentPouches = append(m.RecentPouches, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pouch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, &SnipName{})
			if err := m.Names[len(m.Names)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deleted = append(m.Deleted, &Alias{})
			if err := m.Deleted[len(m.Deleted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &ListResponse{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snippet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snippet == nil {
				m.Snippet = &Snippet{}
			}
			if err := m.Snippet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeMatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TypeMatch == nil {
				m.TypeMatch = &TypeMatchResponse{}
			}
			if err := m.TypeMatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &ListResponse{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pouch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pouch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pouch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakePrivate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MakePrivate = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypt", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypt = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharedWith", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SharedWith == nil {
				m.SharedWith = &SharedWith{}
			}
			if err := m.SharedWith.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnOpened", wireType)
			}
			m.UnOpened = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnOpened |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PouchType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &PouchStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUse", wireType)
			}
			m.LastUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUse |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PouchStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PouchStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PouchStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runs", wireType)
			}
			m.Runs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Runs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clones", wireType)
			}
			m.Clones = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clones |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Red", wireType)
			}
			m.Red = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Red |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snips", wireType)
			}
			m.Snips = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Snips |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Green", wireType)
			}
			m.Green = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Green |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snippet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snippet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snippet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Alias == nil {
				m.Alias = &Alias{}
			}
			if err := m.Alias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = &Tags{}
			}
			if err := m.Tags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClonedFromURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClonedFromURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encrypted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Encrypted = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (Role(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stats == nil {
				m.Stats = &SnipStats{}
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStatus", wireType)
			}
			m.RunStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunStatus |= (UseStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunStatusTime", wireType)
			}
			m.RunStatusTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunStatusTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preview = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dependencies == nil {
				m.Dependencies = &Dependencies{}
			}
			if err := m.Dependencies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = &Apps{}
			}
			if err := m.Apps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupportedOn == nil {
				m.SupportedOn = &Runtimes{}
			}
			if err := m.SupportedOn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribution", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribution = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PouchId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PouchId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Latest = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSnippets
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Names == nil {
				m.Names = make(map[string]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.Names[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.Names[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dependencies) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dependencies: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dependencies: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, &Alias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Apps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Apps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Apps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, &Alias{})
			if err := m.Aliases[len(m.Aliases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Runtimes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Runtimes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Runtimes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSnippets
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Oss == nil {
				m.Oss = make(map[string]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.Oss[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.Oss[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SharedWith) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SharedWith: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SharedWith: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usernames", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthSnippets
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Usernames == nil {
				m.Usernames = make(map[string]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.Usernames[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.Usernames[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnipStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnipStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnipStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clones", wireType)
			}
			m.Clones = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clones |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runs", wireType)
			}
			m.Runs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Runs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TypeMatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TypeMatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TypeMatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Matches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Matches = append(m.Matches, &MatchResponse{})
			if err := m.Matches[len(m.Matches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extension", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extension = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Snippet{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			m.Since = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Since |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pouch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnippets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pouch == nil {
				m.Pouch = &Pouch{}
			}
			if err := m.Pouch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnippets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnippets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnippets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnippets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnippets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSnippets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnippets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnippets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnippets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnippets   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("snippets.proto", fileDescriptorSnippets) }

var fileDescriptorSnippets = []byte{
	// 2557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x19, 0xdb, 0x72, 0x1c, 0x47,
	0x75, 0x67, 0x66, 0xaf, 0x67, 0x2f, 0x5e, 0xb7, 0x14, 0x67, 0xbc, 0xb8, 0x84, 0x6a, 0x30, 0x8e,
	0x10, 0xb0, 0xc1, 0x86, 0xb2, 0x93, 0x00, 0xa9, 0xd8, 0x72, 0x9c, 0x18, 0xa2, 0x58, 0x35, 0xd6,
	0x86, 0x17, 0x2a, 0xc5, 0x68, 0xb7, 0xbd, 0x9a, 0xd2, 0xec, 0xcc, 0x30, 0xdd, 0x2b, 0x59, 0x2f,
	0x14, 0xcf, 0x54, 0x3e, 0x80, 0x2a, 0x1e, 0x78, 0x80, 0x6f, 0xc8, 0x1f, 0x50, 0xc5, 0x0b, 0x55,
	0xf9, 0x03, 0x52, 0xe6, 0x03, 0xf8, 0x05, 0xaa, 0xaf, 0xd3, 0xbd, 0x5a, 0x59, 0xbb, 0x01, 0xde,
	0xe6, 0x5c, 0xa6, 0xfb, 0x9c, 0xd3, 0xa7, 0xcf, 0xad, 0xa1, 0x47, 0xd2, 0x38, 0xcf, 0x31, 0x25,
	0xc3, 0xbc, 0xc8, 0x68, 0x86, 0x6a, 0xf4, 0x3c, 0xc7, 0x24, 0xf8, 0xc2, 0x05, 0x18, 0x11, 0xbc,
	0x97, 0xa5, 0x14, 0xbf, 0xa4, 0x28, 0x80, 0x5a, 0x94, 0xc4, 0x11, 0xf1, 0x9d, 0x6d, 0x67, 0xa7,
	0x7d, 0xaf, 0x33, 0xe4, 0x5c, 0xc3, 0x87, 0x0c, 0x17, 0x0a, 0x12, 0x0a, 0xa0, 0xca, 0xb0, 0xbe,
	0xbb, 0xed, 0xec, 0xf4, 0xee, 0xf5, 0x24, 0xcb, 0x88, 0xe0, 0xc3, 0xf3, 0x1c, 0x87, 0x9c, 0x86,
	0x76, 0xa0, 0x4e, 0x68, 0x44, 0xe7, 0xc4, 0xf7, 0x38, 0x57, 0xbf, 0xe4, 0x7a, 0xce, 0xf1, 0xa1,
	0xa4, 0x23, 0x1f, 0x1a, 0x79, 0x81, 0x4f, 0x63, 0x7c, 0xe6, 0x57, 0xb7, 0x9d, 0x9d, 0x56, 0xa8,
	0x40, 0x84, 0xa0, 0x4a, 0xe3, 0x19, 0xf6, 0x6b, 0xdb, 0xce, 0x8e, 0x17, 0xf2, 0x6f, 0xb4, 0x09,
	0xb5, 0x04, 0x9f, 0xe2, 0xc4, 0xaf, 0x73, 0xa4, 0x00, 0xd0, 0x0d, 0xa8, 0x17, 0xf3, 0x34, 0xc5,
	0x85, 0xdf, 0xe0, 0x4b, 0x48, 0x08, 0x6d, 0x43, 0x7b, 0x1c, 0x25, 0x09, 0x2e, 0xb8, 0xfc, 0x7e,
	0x93, 0x13, 0x4d, 0x14, 0xea, 0x81, 0x9b, 0x11, 0xbf, 0xc5, 0x09, 0x6e, 0x46, 0x82, 0x3e, 0xf4,
	0x3e, 0xc9, 0xa6, 0x23, 0x82, 0x43, 0x4c, 0xf2, 0x2c, 0x25, 0x38, 0xf8, 0x1d, 0x74, 0x1e, 0x26,
	0xf9, 0x71, 0x14, 0xe2, 0xdf, 0xce, 0x31, 0xa1, 0x5c, 0x2a, 0x5c, 0xcc, 0xb8, 0x81, 0x5a, 0x21,
	0xff, 0x46, 0xb7, 0xa0, 0x85, 0x5f, 0x52, 0x9c, 0x92, 0x38, 0x4b, 0xb9, 0x59, 0x5a, 0x61, 0x89,
	0x40, 0x03, 0x68, 0xce, 0x09, 0x2e, 0xd2, 0x68, 0x86, 0xb9, 0x35, 0x5a, 0xa1, 0x86, 0x51, 0x1f,
	0xbc, 0x28, 0x49, 0xb8, 0xe6, 0xcd, 0x90, 0x7d, 0x4a, 0x89, 0x6a, 0x5a, 0xa2, 0x3f, 0x3b, 0xd0,
	0x95, 0x02, 0x08, 0x89, 0xd0, 0x2e, 0x34, 0x0a, 0x4c, 0xe6, 0x09, 0x65, 0xa7, 0xe4, 0xed, 0xb4,
	0xb5, 0x71, 0x39, 0xdb, 0x53, 0x8a, 0x67, 0xa1, 0x62, 0x60, 0xf6, 0xa2, 0x19, 0x8d, 0x12, 0x2e,
	0x95, 0x17, 0x0a, 0x80, 0xeb, 0x90, 0x65, 0x27, 0x5c, 0x1a, 0x66, 0xd9, 0x2c, 0x3b, 0xd1, 0x7a,
	0x55, 0x0d, 0xbd, 0x6e, 0x43, 0xf7, 0x45, 0x94, 0x24, 0x47, 0xd1, 0xf8, 0xe4, 0x30, 0xa6, 0x09,
	0x96, 0x62, 0xd9, 0xc8, 0xe0, 0x63, 0xe8, 0xb3, 0x93, 0x7f, 0x78, 0x8c, 0xa3, 0xc9, 0xeb, 0xac,
	0x24, 0x75, 0x75, 0x17, 0x75, 0xf5, 0xb4, 0xae, 0x33, 0xb8, 0x6e, 0xac, 0x24, 0xd5, 0x1d, 0x2e,
	0xaa, 0xbb, 0x29, 0xd5, 0xd5, 0xac, 0xdf, 0x50, 0xe5, 0xe0, 0x5d, 0xe8, 0x5a, 0x6b, 0xa0, 0x1d,
	0x68, 0xc8, 0x5b, 0x22, 0xfd, 0x5f, 0x39, 0xf7, 0x73, 0x81, 0x0d, 0x15, 0x39, 0xf8, 0xd2, 0x81,
	0x96, 0x36, 0xf7, 0xea, 0xff, 0xa1, 0x0f, 0x00, 0x8e, 0xe3, 0xe9, 0x71, 0x12, 0x4f, 0x8f, 0x29,
	0xf1, 0x5d, 0xae, 0xcf, 0xf6, 0xe2, 0xf1, 0x0d, 0x3f, 0xd6, 0x2c, 0x1f, 0xa6, 0xb4, 0x38, 0x0f,
	0x8d, 0x7f, 0x06, 0x3f, 0x87, 0x6b, 0x0b, 0x64, 0x66, 0xd8, 0x13, 0x7c, 0x2e, 0x6d, 0xcd, 0x3e,
	0x99, 0x0d, 0x4e, 0xa3, 0x64, 0x8e, 0xa5, 0x33, 0x0a, 0xe0, 0x3d, 0xf7, 0x1d, 0x27, 0xf8, 0xbd,
	0x03, 0x68, 0xaf, 0xc0, 0x11, 0xc5, 0x07, 0xd9, 0x7c, 0x7c, 0xac, 0xce, 0xcb, 0xf4, 0x51, 0x67,
	0xc1, 0x47, 0x11, 0x54, 0x39, 0x5e, 0xac, 0xc5, 0xbf, 0xd9, 0xcd, 0x9a, 0x45, 0x27, 0xf8, 0xa0,
	0x88, 0x4f, 0x23, 0x2a, 0xdc, 0xba, 0x19, 0x9a, 0x28, 0x76, 0xaf, 0x71, 0x3a, 0x2e, 0xce, 0x73,
	0x2a, 0xbd, 0x5b, 0x81, 0xc1, 0x11, 0x6c, 0x58, 0x12, 0xc8, 0x73, 0x0e, 0xa0, 0x96, 0x33, 0xc4,
	0x42, 0xe8, 0x11, 0x4c, 0x82, 0x84, 0xde, 0x82, 0x6a, 0x91, 0x65, 0x94, 0x8b, 0xd2, 0xbe, 0xb7,
	0x21, 0x59, 0xc2, 0x2c, 0xa3, 0x6a, 0x99, 0x90, 0x33, 0x04, 0x9f, 0x03, 0x0a, 0x31, 0x93, 0xf4,
	0xbf, 0xd2, 0xd2, 0x87, 0x46, 0x8a, 0xcf, 0x3e, 0x2d, 0x2f, 0xae, 0x02, 0x83, 0x53, 0xd8, 0xb0,
	0xd6, 0xd7, 0x3a, 0x74, 0xb2, 0x22, 0x9e, 0xc6, 0x69, 0x94, 0x7c, 0x5a, 0x6e, 0x62, 0xe1, 0x96,
	0x6e, 0xa4, 0xf4, 0xf2, 0xae, 0xd2, 0xeb, 0x05, 0xa0, 0xfd, 0xd2, 0xc8, 0xff, 0xb7, 0xd3, 0x0b,
	0x7e, 0x0d, 0x1b, 0xd6, 0x3e, 0x52, 0xbf, 0x5b, 0xd0, 0x8a, 0x89, 0xfa, 0xcd, 0xe1, 0xbf, 0x95,
	0x88, 0xd5, 0x4f, 0xe7, 0x31, 0xa0, 0xc7, 0x38, 0xc1, 0xdf, 0xc0, 0x07, 0xbd, 0x52, 0x8b, 0xe0,
	0x7d, 0xd8, 0xb0, 0x56, 0x91, 0x32, 0x2a, 0x29, 0x9c, 0xab, 0xa4, 0xf8, 0xa7, 0x03, 0x5d, 0xe1,
	0x88, 0x4a, 0x02, 0x1f, 0x1a, 0x63, 0x96, 0x08, 0x53, 0x2a, 0x05, 0x50, 0x60, 0x99, 0x17, 0xdd,
	0xcb, 0xf3, 0xe2, 0x36, 0xb4, 0x27, 0x98, 0x8c, 0x8b, 0x38, 0xa7, 0x2c, 0x0f, 0x08, 0x51, 0x4d,
	0x14, 0xfa, 0x36, 0x13, 0x2d, 0xc1, 0xfc, 0x42, 0xf4, 0xee, 0xb5, 0xb5, 0x68, 0x09, 0x17, 0x29,
	0xc1, 0x8c, 0x81, 0x46, 0x53, 0x11, 0xfe, 0xdb, 0x9a, 0xe1, 0x30, 0x9a, 0x92, 0x90, 0x13, 0xd0,
	0x0f, 0x00, 0xc6, 0x49, 0x96, 0xe2, 0xc9, 0x93, 0x22, 0x9b, 0xf1, 0x24, 0xb8, 0x28, 0x8c, 0x41,
	0x0f, 0x46, 0xd0, 0x1d, 0xe5, 0x13, 0x43, 0xc1, 0x55, 0xd2, 0xfb, 0x82, 0x1a, 0xee, 0x05, 0x35,
	0x82, 0xbf, 0x39, 0xd0, 0xde, 0xcf, 0x4e, 0x57, 0x72, 0xbf, 0x6d, 0x68, 0x93, 0x6c, 0x5e, 0x8c,
	0xc5, 0x21, 0xa9, 0xd5, 0x0c, 0x14, 0xe3, 0xa0, 0x51, 0x31, 0xc5, 0x54, 0x70, 0x48, 0xb3, 0x19,
	0x28, 0xf4, 0x43, 0x68, 0xb1, 0xf8, 0xc9, 0x6e, 0x0f, 0xf1, 0xab, 0x3c, 0x66, 0x5e, 0x33, 0x02,
	0x2c, 0xc3, 0x87, 0x25, 0x07, 0x73, 0x80, 0x24, 0x26, 0x54, 0x1a, 0x51, 0x39, 0xc0, 0x27, 0x31,
	0x31, 0x1c, 0x80, 0x31, 0x04, 0xe7, 0x50, 0x13, 0x55, 0xc0, 0xeb, 0x14, 0xd8, 0x54, 0x61, 0x49,
	0x86, 0x52, 0x11, 0x88, 0x96, 0xf8, 0x23, 0x0b, 0xc3, 0xf8, 0x25, 0x95, 0x09, 0x94, 0x7d, 0x32,
	0x7f, 0x3a, 0xc5, 0x05, 0xaf, 0x0a, 0x44, 0x11, 0xa3, 0xc0, 0xe0, 0x47, 0xd0, 0x54, 0xa2, 0xeb,
	0xb5, 0x9c, 0x8b, 0x6b, 0xb9, 0x7a, 0xad, 0x60, 0x1f, 0x3a, 0xc2, 0xe6, 0xd2, 0xcd, 0x37, 0xcd,
	0x70, 0xd9, 0x32, 0x02, 0x24, 0xd7, 0xdd, 0xbd, 0x4a, 0xf7, 0xcf, 0xa1, 0x2b, 0x02, 0xd8, 0x3a,
	0xae, 0xf1, 0x3d, 0x3b, 0x1e, 0x2e, 0x39, 0x06, 0x1d, 0x20, 0xa7, 0xd0, 0x53, 0xeb, 0x4b, 0x81,
	0x57, 0x4f, 0x92, 0xdf, 0x87, 0xa6, 0x8a, 0x98, 0x52, 0x91, 0x0b, 0xfb, 0x68, 0x86, 0xe0, 0x37,
	0xd0, 0x39, 0x88, 0x68, 0x19, 0x45, 0x56, 0xd1, 0xe3, 0x06, 0xd4, 0x85, 0x7f, 0x49, 0x03, 0x4b,
	0x88, 0xdb, 0x94, 0xad, 0x25, 0x8f, 0x55, 0x00, 0xac, 0x4c, 0x90, 0x3b, 0xac, 0xab, 0x49, 0xf0,
	0x1e, 0xf4, 0xd4, 0x05, 0x5c, 0xfb, 0xdf, 0x10, 0x3a, 0x7b, 0xec, 0x2a, 0xaf, 0xa3, 0xd8, 0x16,
	0x78, 0x29, 0x3e, 0x5b, 0x1a, 0xa4, 0x18, 0x21, 0x38, 0x82, 0xae, 0x5c, 0x73, 0xed, 0x43, 0x59,
	0xd9, 0xb3, 0x1e, 0x03, 0x1c, 0x46, 0xd3, 0x75, 0xa4, 0x46, 0x32, 0xea, 0xb1, 0x72, 0xa8, 0x25,
	0x02, 0x5d, 0xf0, 0x00, 0xda, 0x7c, 0x95, 0xb5, 0xcd, 0xf6, 0x04, 0x3a, 0xa3, 0xf4, 0x7f, 0x20,
	0xc0, 0xbb, 0xd0, 0x95, 0xeb, 0xac, 0x2d, 0xc2, 0x2f, 0x00, 0x3e, 0xc2, 0x74, 0x1d, 0x01, 0x8c,
	0x40, 0xe1, 0xda, 0x81, 0xe2, 0x1f, 0x0e, 0xb4, 0x85, 0x91, 0xaf, 0x8e, 0xb5, 0x9b, 0x50, 0x23,
	0x71, 0x3a, 0xc6, 0xaa, 0xf2, 0xe5, 0x00, 0x6f, 0x99, 0xe2, 0x59, 0x4c, 0x65, 0xe9, 0x2b, 0x00,
	0xad, 0x72, 0xb5, 0x54, 0x19, 0x6d, 0x01, 0xe8, 0xae, 0x85, 0xe5, 0x20, 0x46, 0x31, 0x30, 0xaa,
	0x80, 0xaf, 0x97, 0x05, 0xbc, 0x0e, 0x42, 0x0d, 0x33, 0x08, 0x0d, 0xa0, 0x39, 0x8e, 0x28, 0x9e,
	0x66, 0xc5, 0xb9, 0xec, 0xb9, 0x34, 0x1c, 0xfc, 0x14, 0xda, 0x22, 0x15, 0x5f, 0xad, 0xce, 0x85,
	0x7e, 0x21, 0xf8, 0xca, 0x81, 0x8e, 0x99, 0xc8, 0xd1, 0x2e, 0x34, 0x55, 0x5b, 0x2b, 0x9b, 0x83,
	0xc5, 0x43, 0xd1, 0x74, 0x74, 0x07, 0x1a, 0x5c, 0x3c, 0xac, 0xea, 0x6e, 0xbb, 0xc2, 0x54, 0x44,
	0xb4, 0x03, 0xcd, 0x1c, 0x17, 0x24, 0x63, 0xd1, 0xc7, 0x5b, 0xc2, 0xa8, 0xa9, 0x4c, 0xf8, 0x91,
	0x12, 0x5e, 0x44, 0x7d, 0x0d, 0xa3, 0x3b, 0x50, 0x63, 0x0d, 0xae, 0x4a, 0xe5, 0x46, 0xff, 0x5b,
	0xb0, 0x06, 0x98, 0x84, 0x82, 0x1c, 0xfc, 0xc5, 0x81, 0x96, 0x46, 0xa2, 0x3b, 0xd0, 0x9b, 0x45,
	0x2f, 0x47, 0x04, 0x1f, 0xe0, 0xe2, 0x40, 0x47, 0x77, 0x2f, 0x5c, 0xc0, 0xa2, 0x5d, 0xe8, 0xcf,
	0xa2, 0x97, 0x4c, 0x47, 0xa2, 0x39, 0xc5, 0xa1, 0x5f, 0xc0, 0xb3, 0x26, 0xae, 0xc0, 0x63, 0x9c,
	0x8a, 0x64, 0x8a, 0x09, 0x57, 0xaa, 0x15, 0xda, 0x48, 0x56, 0xd9, 0x25, 0x11, 0x91, 0x39, 0x58,
	0x28, 0x53, 0x22, 0x82, 0x63, 0xe8, 0x8a, 0x52, 0x6b, 0x45, 0x37, 0x5c, 0x92, 0x31, 0xbf, 0x0b,
	0xb5, 0x94, 0x27, 0x70, 0x6f, 0x79, 0x02, 0x17, 0xd4, 0x20, 0x82, 0x9e, 0xda, 0x49, 0x9e, 0xf1,
	0x1d, 0x68, 0x4c, 0x38, 0x66, 0x22, 0x8f, 0xd8, 0xbe, 0x41, 0x8a, 0xb8, 0x7a, 0x80, 0xfa, 0x93,
	0x03, 0x3d, 0x55, 0xf7, 0xad, 0x1d, 0x06, 0xef, 0x43, 0x8b, 0x51, 0xf6, 0x79, 0x9a, 0x10, 0x5b,
	0xf9, 0x46, 0x3f, 0xba, 0x6f, 0x26, 0x8a, 0xb0, 0x64, 0xd5, 0xd2, 0x79, 0x57, 0x49, 0xf7, 0x6f,
	0x17, 0x6a, 0xe2, 0xe0, 0x7a, 0xe0, 0xc6, 0x13, 0x69, 0x5d, 0x37, 0x9e, 0x58, 0x36, 0x77, 0xaf,
	0xae, 0x8f, 0x17, 0xab, 0xfc, 0xea, 0x6b, 0x7b, 0xb4, 0x9a, 0xd5, 0xa3, 0xa1, 0xbb, 0x00, 0xe4,
	0x38, 0x2a, 0xf0, 0xe4, 0x57, 0x31, 0x3d, 0x96, 0x75, 0xe6, 0x75, 0x65, 0x13, 0x4d, 0x08, 0x0d,
	0x26, 0xb6, 0xd8, 0x9c, 0xe7, 0xba, 0x09, 0x8f, 0x06, 0x5e, 0xa8, 0x40, 0x2e, 0x78, 0xfa, 0x2c,
	0xc7, 0x29, 0x9e, 0xf0, 0x78, 0xe0, 0x85, 0x1a, 0x46, 0xb7, 0xe5, 0x30, 0xa9, 0x65, 0x8d, 0x89,
	0xb8, 0x01, 0x8c, 0x71, 0xd2, 0x5b, 0xea, 0x36, 0x81, 0x25, 0x09, 0x67, 0x33, 0xaf, 0x13, 0x13,
	0x82, 0x79, 0xed, 0x88, 0x60, 0xbf, 0x2d, 0x84, 0x90, 0x20, 0xaf, 0xed, 0xf9, 0xa1, 0x4f, 0xfc,
	0x8e, 0xa0, 0x48, 0x30, 0xf8, 0xc2, 0x01, 0x28, 0x57, 0xe2, 0xbd, 0x73, 0x8c, 0xcf, 0x88, 0xbc,
	0x7a, 0x02, 0x60, 0x06, 0x2e, 0xe6, 0x29, 0x91, 0xb7, 0x8c, 0x7f, 0xb3, 0x32, 0x82, 0x17, 0xdb,
	0x44, 0x86, 0x56, 0x09, 0xb1, 0xc0, 0x55, 0xe0, 0x09, 0x37, 0xb8, 0x17, 0xb2, 0x4f, 0x1e, 0x99,
	0xd9, 0xa5, 0x94, 0x65, 0xa0, 0x00, 0x18, 0x76, 0x5a, 0x60, 0x9c, 0x4a, 0x7b, 0x09, 0x20, 0xf8,
	0x6b, 0x1d, 0x1a, 0xd2, 0xed, 0x56, 0xca, 0x1d, 0xc2, 0x4d, 0x5c, 0xed, 0x26, 0x46, 0x13, 0x53,
	0xb5, 0x9b, 0x98, 0x2b, 0xbb, 0x0b, 0xc3, 0x46, 0x75, 0xcb, 0x46, 0xaf, 0x39, 0xdc, 0x85, 0x76,
	0xa1, 0x79, 0xb1, 0xeb, 0xb9, 0x0d, 0xdd, 0xb2, 0x27, 0x19, 0x85, 0x4f, 0xe5, 0xb8, 0xcd, 0x46,
	0x32, 0x63, 0xe6, 0xf3, 0xa3, 0x24, 0x1e, 0xf3, 0xe3, 0x69, 0x86, 0x12, 0xe2, 0xc9, 0xe4, 0x18,
	0x8f, 0x4f, 0xc8, 0x7c, 0xe6, 0x77, 0x65, 0x32, 0x91, 0x30, 0x0b, 0x5a, 0x24, 0x9e, 0xa6, 0x11,
	0x9d, 0x17, 0xd8, 0xef, 0x89, 0xa0, 0xa5, 0x11, 0x7c, 0x2a, 0x27, 0xdc, 0x19, 0x4f, 0xfc, 0x6b,
	0xa2, 0x59, 0xd5, 0x08, 0x26, 0x95, 0x06, 0x1e, 0x26, 0xd3, 0xcc, 0xef, 0x0b, 0xa9, 0x2c, 0xa4,
	0xee, 0xd8, 0xae, 0x5f, 0xd6, 0xb1, 0xe9, 0x38, 0x8f, 0xac, 0x38, 0xcf, 0x0e, 0xd0, 0x72, 0xcc,
	0x21, 0xb4, 0x8a, 0x79, 0x2a, 0x66, 0x9f, 0xfe, 0xc6, 0x25, 0x33, 0xd1, 0x92, 0x85, 0x47, 0x6d,
	0x05, 0x1c, 0xc6, 0x33, 0xec, 0x6f, 0x72, 0xb3, 0xdb, 0x48, 0x73, 0x78, 0xfa, 0x86, 0x3d, 0x3c,
	0x7d, 0x00, 0x9d, 0x09, 0xce, 0x71, 0x3a, 0xc1, 0xe9, 0x38, 0xc6, 0xc4, 0xbf, 0x61, 0xc5, 0x9d,
	0xc7, 0x06, 0x29, 0xb4, 0x18, 0x99, 0xc6, 0x51, 0x9e, 0x13, 0xff, 0x4d, 0xcb, 0x49, 0x1e, 0xe6,
	0x39, 0x09, 0x39, 0x01, 0xdd, 0x85, 0x36, 0x99, 0xe7, 0x79, 0x56, 0x50, 0x3c, 0x79, 0x96, 0xfa,
	0xbe, 0x55, 0xa0, 0x87, 0xf3, 0x94, 0xc6, 0x33, 0x4c, 0x42, 0x93, 0x87, 0xf9, 0x48, 0x44, 0x69,
	0x11, 0x1f, 0xcd, 0xb9, 0x8f, 0xdc, 0x14, 0x3e, 0x62, 0xa0, 0xb8, 0x22, 0xec, 0x0a, 0x3e, 0x9d,
	0xf8, 0xdf, 0x92, 0x8a, 0x08, 0x90, 0xf9, 0x45, 0x12, 0x51, 0x4c, 0xa8, 0x7f, 0x4b, 0xf8, 0x85,
	0x80, 0x82, 0x14, 0xaa, 0x87, 0xa2, 0x23, 0x96, 0x79, 0x45, 0x24, 0x87, 0x1b, 0x86, 0x57, 0x0f,
	0x79, 0x3f, 0x28, 0x46, 0x68, 0x82, 0x69, 0xf0, 0x0e, 0x40, 0x89, 0xbc, 0x6a, 0x70, 0xd6, 0x34,
	0x07, 0x67, 0xf7, 0xa1, 0x63, 0x5a, 0x8d, 0xa5, 0x25, 0x7e, 0xff, 0xf4, 0xce, 0x0b, 0x69, 0x49,
	0x12, 0x83, 0x21, 0x54, 0x99, 0xf1, 0x56, 0xe6, 0x4f, 0xa1, 0xa9, 0x8c, 0x88, 0x76, 0xc1, 0xcb,
	0x88, 0xe2, 0xf7, 0x17, 0x4c, 0x3c, 0x7c, 0x46, 0xa4, 0x6e, 0x8c, 0x69, 0x70, 0x1f, 0x9a, 0x0a,
	0xb1, 0x96, 0x5e, 0x7f, 0x70, 0x00, 0xca, 0x88, 0x8e, 0xde, 0x87, 0x96, 0x4a, 0x2a, 0x6a, 0xe3,
	0xed, 0x0b, 0x71, 0x7f, 0xa8, 0xca, 0x1c, 0x29, 0x40, 0xf9, 0xcb, 0xe0, 0x67, 0xd0, 0xb3, 0x89,
	0x6b, 0x09, 0xb3, 0x0f, 0x2d, 0x7d, 0x73, 0x2e, 0x09, 0xc4, 0x65, 0xd0, 0x75, 0xad, 0xa0, 0xab,
	0x02, 0xb4, 0x57, 0x06, 0xe8, 0x60, 0x4f, 0xcc, 0x93, 0xad, 0xa4, 0x8c, 0x86, 0xd0, 0x98, 0x31,
	0x04, 0x5e, 0x9c, 0x27, 0xdb, 0xb9, 0x5b, 0x31, 0x05, 0x7b, 0xd0, 0xb5, 0x17, 0xb0, 0xa6, 0xfd,
	0xce, 0xe2, 0xb4, 0x9f, 0x85, 0xfa, 0x71, 0x56, 0x94, 0x45, 0x38, 0x03, 0x82, 0x2f, 0x1d, 0xe8,
	0x98, 0xc9, 0x1e, 0xdd, 0x86, 0x5a, 0x4c, 0xf1, 0xec, 0xb2, 0xb2, 0x55, 0x10, 0x2f, 0x99, 0x65,
	0xeb, 0x3a, 0xdf, 0x5b, 0x5a, 0xe7, 0x57, 0xcd, 0x3a, 0xdf, 0x2c, 0x1a, 0x6a, 0x0b, 0x45, 0x83,
	0x9e, 0xb8, 0xd6, 0x2f, 0x9d, 0xb8, 0xee, 0xbe, 0xcd, 0xcb, 0x53, 0x19, 0x94, 0xda, 0xd0, 0x18,
	0xa5, 0x27, 0x69, 0x76, 0x96, 0xf6, 0x2b, 0x0c, 0x78, 0x3e, 0x1f, 0x8f, 0x31, 0x21, 0x7d, 0x07,
	0x35, 0xa1, 0xfa, 0x24, 0x8a, 0x93, 0xbe, 0xbb, 0xfb, 0x00, 0x1a, 0xf2, 0x29, 0x08, 0xf5, 0x00,
	0x24, 0xfb, 0x88, 0xe0, 0x7e, 0x85, 0x31, 0x7d, 0x16, 0xe3, 0xb3, 0xbe, 0x83, 0x1a, 0xe0, 0x85,
	0xf3, 0xb4, 0xef, 0xa2, 0x16, 0xd4, 0x78, 0x43, 0xda, 0xf7, 0x76, 0xf7, 0xa0, 0xca, 0xe2, 0x2a,
	0xea, 0x40, 0xf3, 0x39, 0x8d, 0xd2, 0x49, 0x54, 0x4c, 0xfa, 0x15, 0x74, 0x0d, 0xda, 0x07, 0x05,
	0x7e, 0x81, 0x0b, 0x9c, 0x8e, 0x31, 0xdb, 0xe9, 0x1a, 0xb4, 0x3f, 0x4c, 0x4f, 0xe3, 0x22, 0x4b,
	0x67, 0x38, 0xa5, 0x7d, 0x97, 0xc9, 0xb1, 0x8f, 0x09, 0x89, 0xa6, 0x6c, 0x91, 0x47, 0xd0, 0xd2,
	0xb5, 0x03, 0x5b, 0xe9, 0xe0, 0xf8, 0x9c, 0xc4, 0xe3, 0x28, 0x11, 0xf2, 0x7e, 0x16, 0x17, 0x74,
	0x1e, 0x25, 0x7d, 0x87, 0x93, 0x64, 0x19, 0xdf, 0x77, 0x39, 0x54, 0x64, 0xb3, 0x8c, 0xe2, 0x49,
	0xdf, 0xbb, 0xf7, 0x75, 0x53, 0x0c, 0x67, 0x78, 0xd7, 0xf0, 0x00, 0xea, 0xa2, 0x56, 0x44, 0xca,
	0x4d, 0xac, 0x91, 0xe1, 0xe0, 0x8d, 0x05, 0xac, 0x7c, 0x35, 0xaa, 0xb0, 0x1f, 0x45, 0xeb, 0xaf,
	0x7f, 0xb4, 0x46, 0x71, 0xfa, 0x47, 0x7b, 0x3e, 0x10, 0x54, 0xd0, 0x5d, 0xa8, 0xee, 0x67, 0xa7,
	0x18, 0x21, 0xe5, 0x96, 0xe5, 0xa4, 0x6d, 0xb0, 0x61, 0xe1, 0xcc, 0xbd, 0xc4, 0xb0, 0x45, 0xef,
	0x65, 0xcd, 0x76, 0xf4, 0x5e, 0xf6, 0x44, 0x26, 0xa8, 0xa0, 0x9f, 0x40, 0x8d, 0x8f, 0x36, 0x90,
	0x5a, 0xd8, 0x1c, 0xa5, 0x0c, 0x36, 0x6d, 0xa4, 0xf9, 0x17, 0x3f, 0x34, 0xfd, 0x97, 0x39, 0xa7,
	0xd0, 0x7f, 0x59, 0x83, 0x86, 0xa0, 0x82, 0x86, 0xe0, 0x1d, 0x46, 0x53, 0x74, 0xbd, 0x0c, 0xd0,
	0xea, 0x0f, 0x64, 0xa2, 0xcc, 0x5d, 0x78, 0x03, 0xae, 0x77, 0x31, 0xdb, 0x7a, 0xbd, 0x8b, 0xd5,
	0xa3, 0x07, 0x15, 0xf4, 0x36, 0x78, 0x1f, 0x61, 0xaa, 0x77, 0x29, 0xfb, 0xf0, 0xc1, 0xb2, 0x9a,
	0x5b, 0x98, 0x9b, 0x61, 0xb4, 0xb9, 0x8d, 0x66, 0xfb, 0xb2, 0x5f, 0x1e, 0x40, 0x5d, 0xf4, 0x28,
	0xda, 0xdc, 0x56, 0x73, 0xa4, 0xcd, 0x6d, 0x37, 0x32, 0x5c, 0xa5, 0x06, 0x13, 0x28, 0xcb, 0xca,
	0xed, 0x8c, 0x66, 0x78, 0xb0, 0x6c, 0x56, 0x1d, 0x54, 0xd0, 0x13, 0x68, 0x1b, 0xef, 0x25, 0xe8,
	0xa6, 0xe5, 0x71, 0xe6, 0x04, 0x7d, 0x30, 0x58, 0x46, 0x32, 0xd7, 0x31, 0xde, 0x2c, 0xf4, 0x3a,
	0x17, 0xdf, 0x49, 0xf4, 0x3a, 0x4b, 0x9e, 0x38, 0x82, 0x0a, 0xfa, 0x25, 0xf4, 0xf9, 0xdb, 0x00,
	0x43, 0xab, 0x4e, 0xe2, 0xa6, 0x8e, 0xa1, 0x8b, 0x8f, 0x13, 0x7a, 0xb1, 0x25, 0xef, 0x09, 0x42,
	0x28, 0x63, 0x88, 0xaf, 0xd7, 0xb9, 0xf8, 0x3c, 0xa0, 0xd7, 0x59, 0x32, 0xf3, 0x17, 0xde, 0xc2,
	0xdf, 0xcf, 0xb4, 0xb7, 0x98, 0x8f, 0xb6, 0xda, 0x5b, 0xac, 0x87, 0xd4, 0xa0, 0x82, 0x3e, 0x80,
	0x96, 0x7e, 0x01, 0x44, 0x6f, 0x2e, 0xbe, 0x2b, 0xaa, 0xbf, 0xfd, 0x8b, 0x04, 0x63, 0xdf, 0xba,
	0x78, 0x30, 0xd6, 0x2e, 0x57, 0xbe, 0xa6, 0x6b, 0x47, 0x58, 0x78, 0x52, 0xae, 0x3c, 0xfa, 0xce,
	0xdf, 0x5f, 0x6d, 0x39, 0x5f, 0xbd, 0xda, 0x72, 0xbe, 0x7e, 0xb5, 0xe5, 0xfc, 0xf1, 0x5f, 0x5b,
	0x15, 0x10, 0xcf, 0xf1, 0x8f, 0x74, 0xe0, 0x39, 0x70, 0x8e, 0xea, 0xfc, 0xa1, 0xfe, 0xc7, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x11, 0xd3, 0x7d, 0xe8, 0xba, 0x1f, 0x00, 0x00,
}
